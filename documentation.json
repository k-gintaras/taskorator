{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApiStrategy",
            "id": "interface-ApiStrategy-2122cd8cfd00094e5537208a981afc475a013c0caf25faf511221b1a7a0d06c5f56aaca36a0a89e03c98d8b393b7c8386d2e1ba452c93da7dc4fc97edf492d9a",
            "file": "src/app/models/service-strategies/api-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskApiStrategy } from './task-strategy.interface';\r\nimport { SettingsApiStrategy } from './settings-strategy.interface';\r\nimport { ScoreApiStrategy } from './score-strategy.interface copy';\r\nimport { TreeApiStrategy } from './tree-strategy.interface';\r\nimport { RegisterUserResult, TaskUserInfo } from './user';\r\nimport { Score } from '../score';\r\nimport { TaskSettings } from '../settings';\r\nimport { TaskoratorTask } from '../taskModelManager';\r\nimport { TaskTree } from '../taskTree';\r\nimport { TaskListApiStrategy } from './task-list-strategy.interface';\r\nimport { RegistrationApiStrategy } from './registration-strategy';\r\n\r\n// TODO: might wanna add SKIN strategy so people can have color scheme and styles... (purchase probably)\r\nexport interface ApiStrategy\r\n  extends TaskApiStrategy, // using different duo to that it needs user ID\r\n    TreeApiStrategy,\r\n    SettingsApiStrategy,\r\n    ScoreApiStrategy,\r\n    TaskListApiStrategy,\r\n    RegistrationApiStrategy {\r\n  // might have special unique methods later on in life\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "TaskApiStrategy",
                "TreeApiStrategy",
                "SettingsApiStrategy",
                "ScoreApiStrategy",
                "TaskListApiStrategy",
                "RegistrationApiStrategy"
            ]
        },
        {
            "name": "AppRouteMap",
            "id": "interface-AppRouteMap-55d35f4d17d64585484909d97c386d129e50a2b98ef6427f3a666540b98017f482d112d7c5832d8fd0cf45d4e757e7f43f3e1b9e649c94e0cd57408a1d467d19",
            "file": "src/app/app.routes-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RouteMetadata {\r\n  title: string;\r\n  altName: string;\r\n  description: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface AppRouteMap {\r\n  [key: string]: RouteMetadata;\r\n}\r\n\r\n// import { Routes } from '@angular/router';\r\n// import { citadelChildren } from './features/core/citadel/citadel-routing.module';\r\n// import { crucibleChildren } from './features/core/crucible/crucible-routing.module';\r\n// import { dreamforgeChildren } from './features/core/dreamforge/dreamforge-routing.module';\r\n// import { gatewayChildren } from './features/core/gateway/gateway-routing.module';\r\n// import { nexusChildren } from './features/core/nexus/nexus-routing.module';\r\n// import { sentinelChildren } from './features/core/sentinel/sentinel-routing.module';\r\n// import { vortexChildren } from './features/core/vortex/vortex-routing.module';\r\n// import {\r\n//   AppRoute,\r\n//   AppRouteMap,\r\n//   CORE_APP_PATHS,\r\n//   RouteMetadata,\r\n// } from './app.core-paths.module';\r\n\r\n// export function generateAngularRoutes(appRoutes: AppRouteMap): Routes {\r\n//   return Object.values(appRoutes).map((route: AppRoute) => ({\r\n//     path: route.path, // Non-null assertion here\r\n//     component: route.component,\r\n//     loadChildren: route.loadChildren,\r\n//     canActivate: route.canActivate,\r\n//     canActivateChild: route.canActivateChild,\r\n//     children: route.children\r\n//       ? generateAngularRoutes(createAppRouteMap(route.children))\r\n//       : undefined,\r\n//   }));\r\n// }\r\n\r\n// export function getRoutes(): Routes {\r\n//   return [\r\n//     {\r\n//       path: '',\r\n//       redirectTo: CORE_APP_PATHS['sentinel'].path, // Redirect to your default path\r\n//       pathMatch: 'full',\r\n//     },\r\n//     ...generateAngularRoutes(CORE_APP_PATHS),\r\n//   ];\r\n// }\r\n\r\n// // Helper function to convert an array of AppRoutes into an AppRouteMap\r\n// function createAppRouteMap(routes: AppRoute[]): AppRouteMap {\r\n//   return routes.reduce((map, route) => {\r\n//     map[route.path] = route;\r\n//     return map;\r\n//   }, {} as AppRouteMap);\r\n// }\r\n\r\n// export function generateRouteMetadataMap(appRoutes: AppRouteMap): {\r\n//   [key: string]: RouteMetadata;\r\n// } {\r\n//   const metadataMap: { [key: string]: RouteMetadata } = {};\r\n\r\n//   Object.values(appRoutes).forEach((route: AppRoute) => {\r\n//     metadataMap[route.path] = {\r\n//       title: route.title,\r\n//       altName: route.altName,\r\n//       description: route.description,\r\n//       icon: route.icon,\r\n//     };\r\n\r\n//     if (route.children) {\r\n//       Object.assign(\r\n//         metadataMap,\r\n//         generateRouteMetadataMap(createAppRouteMap(route.children))\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   return metadataMap;\r\n// }\r\n\r\n// // Use this to generate your final routes\r\n// export const CORE_ROUTES: Routes = generateAngularRoutes(CORE_APP_PATHS);\r\n\r\n// // Generate metadata map\r\n// export const CORE_METADATA_MAP = generateRouteMetadataMap(CORE_APP_PATHS);\r\n// // all metadata\r\n// // export const ALL_METADATA_MAP = generateRouteMetadataMap(ALL_APP_PATHS);\r\n\r\n// // Example of retrieving metadata for a specific route\r\n// // const metadata = getRouteMetadata('test-app');\r\n\r\n// // export function getRouteMetadata(path: string): RouteMetadata | undefined {\r\n// //   const allPaths = { ...CORE_APP_PATHS, ...ALL_APP_PATHS };\r\n\r\n// //   // Search for the path in the objects\r\n// //   for (const key in allPaths) {\r\n// //     if (allPaths[key].path === path) {\r\n// //       return allPaths[key];\r\n// //     }\r\n// //   }\r\n\r\n// //   // If no match is found, return undefined\r\n// //   return undefined;\r\n// // }\r\n\r\n// export interface PathItem {\r\n//   path: string;\r\n//   children: string[];\r\n// }\r\n\r\n// export function getPathMap(): { [key: string]: PathItem } {\r\n//   return {\r\n//     citadel: {\r\n//       path: CORE_APP_PATHS['citadel'].path,\r\n//       children: citadelChildren,\r\n//     },\r\n//     crucible: {\r\n//       path: CORE_APP_PATHS['crucible'].path,\r\n//       children: crucibleChildren,\r\n//     },\r\n//     forge: {\r\n//       path: CORE_APP_PATHS['forge'].path,\r\n//       children: dreamforgeChildren,\r\n//     },\r\n//     gateway: {\r\n//       path: CORE_APP_PATHS['gateway'].path,\r\n//       children: gatewayChildren,\r\n//     },\r\n//     nexus: {\r\n//       path: CORE_APP_PATHS['nexus'].path,\r\n//       children: nexusChildren,\r\n//     },\r\n//     sentinel: {\r\n//       path: CORE_APP_PATHS['sentinel'].path,\r\n//       children: sentinelChildren,\r\n//     },\r\n//     vortex: {\r\n//       path: CORE_APP_PATHS['vortex'].path,\r\n//       children: vortexChildren,\r\n//     },\r\n//   };\r\n// }\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-55d35f4d17d64585484909d97c386d129e50a2b98ef6427f3a666540b98017f482d112d7c5832d8fd0cf45d4e757e7f43f3e1b9e649c94e0cd57408a1d467d19",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "RouteMetadata",
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "Artificer",
            "id": "interface-Artificer-8af5331e4b1462c594056cd737f46056b48b7c8960b63a33c786d1d04b8df64d859728308a9d735d972ac183a49254c2332298d4c2a362a154f9675bd04666fe",
            "file": "src/app/components/artificer/artificer.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskoratorTask } from '../../models/taskModelManager';\r\n\r\n// likely will perform actions on selected tasks on click\r\n// another idea was to replace all task buttons with current \"action\" (probably bad idea)\r\n// improvement suggestions welcome to make it less than 2 clicks...\r\n// i.e. we select task action mode... then we can blast all tasks with it... somehow\r\nexport interface Artificer {\r\n  delete(task: TaskoratorTask): void;\r\n  complete(task: TaskoratorTask): void;\r\n  refresh(task: TaskoratorTask): void; // just make task back into TODO\r\n  moveSelectedInto(task: TaskoratorTask): void; // move selected tasks into this task\r\n  split(task: TaskoratorTask): void; // will delete it and create 2 new (or... create 2 inside it?)\r\n  crush(task: TaskoratorTask): void; // will move them into 1 new\r\n  merge(task: TaskoratorTask): void; // will delete all selected and create 1 new\r\n  extract(task: TaskoratorTask): void; // extract inside tasks and make them selected?\r\n  clearSelected(): void; // clears all selected tasks\r\n  selectAll(): void; // selects current navigation view tasks\r\n  edit(task: TaskoratorTask): void; // opens edit menu?\r\n  promote(task: TaskoratorTask): void;\r\n  demote(task: TaskoratorTask): void;\r\n  select(task: TaskoratorTask): void;\r\n  suggest(task: TaskoratorTask): void;\r\n  mass(task: TaskoratorTask): void;\r\n  moveToParent(task: TaskoratorTask): void;\r\n}\r\n\r\nexport interface ArtificerDetails {\r\n  action: string;\r\n  icon: string;\r\n  colorClass: string;\r\n}\r\n\r\nexport const artificerDetailList: ArtificerDetails[] = [\r\n  { action: 'complete', icon: 'check', colorClass: 'complete-icon-color' },\r\n  { action: 'delete', icon: 'delete', colorClass: 'delete-icon-color' },\r\n  { action: 'refresh', icon: 'refresh', colorClass: 'refresh-icon-color' },\r\n  { action: 'move', icon: 'move_to_inbox', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'edit', icon: 'edit', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'select', icon: 'check_box', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'suggest', icon: 'search', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'promote', icon: 'expand_less', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'demote', icon: 'expand_more', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'mass', icon: 'add', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  {\r\n    action: 'moveToParent',\r\n    icon: 'arrow_upward',\r\n    colorClass: 'refresh-icon-color',\r\n  },\r\n];\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "clearSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "complete",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "crush",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "demote",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extract",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mass",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "merge",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveSelectedInto",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveToParent",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "promote",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "split",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "suggest",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "ArtificerDetails",
            "id": "interface-ArtificerDetails-8af5331e4b1462c594056cd737f46056b48b7c8960b63a33c786d1d04b8df64d859728308a9d735d972ac183a49254c2332298d4c2a362a154f9675bd04666fe",
            "file": "src/app/components/artificer/artificer.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskoratorTask } from '../../models/taskModelManager';\r\n\r\n// likely will perform actions on selected tasks on click\r\n// another idea was to replace all task buttons with current \"action\" (probably bad idea)\r\n// improvement suggestions welcome to make it less than 2 clicks...\r\n// i.e. we select task action mode... then we can blast all tasks with it... somehow\r\nexport interface Artificer {\r\n  delete(task: TaskoratorTask): void;\r\n  complete(task: TaskoratorTask): void;\r\n  refresh(task: TaskoratorTask): void; // just make task back into TODO\r\n  moveSelectedInto(task: TaskoratorTask): void; // move selected tasks into this task\r\n  split(task: TaskoratorTask): void; // will delete it and create 2 new (or... create 2 inside it?)\r\n  crush(task: TaskoratorTask): void; // will move them into 1 new\r\n  merge(task: TaskoratorTask): void; // will delete all selected and create 1 new\r\n  extract(task: TaskoratorTask): void; // extract inside tasks and make them selected?\r\n  clearSelected(): void; // clears all selected tasks\r\n  selectAll(): void; // selects current navigation view tasks\r\n  edit(task: TaskoratorTask): void; // opens edit menu?\r\n  promote(task: TaskoratorTask): void;\r\n  demote(task: TaskoratorTask): void;\r\n  select(task: TaskoratorTask): void;\r\n  suggest(task: TaskoratorTask): void;\r\n  mass(task: TaskoratorTask): void;\r\n  moveToParent(task: TaskoratorTask): void;\r\n}\r\n\r\nexport interface ArtificerDetails {\r\n  action: string;\r\n  icon: string;\r\n  colorClass: string;\r\n}\r\n\r\nexport const artificerDetailList: ArtificerDetails[] = [\r\n  { action: 'complete', icon: 'check', colorClass: 'complete-icon-color' },\r\n  { action: 'delete', icon: 'delete', colorClass: 'delete-icon-color' },\r\n  { action: 'refresh', icon: 'refresh', colorClass: 'refresh-icon-color' },\r\n  { action: 'move', icon: 'move_to_inbox', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'edit', icon: 'edit', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'select', icon: 'check_box', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'suggest', icon: 'search', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'promote', icon: 'expand_less', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'demote', icon: 'expand_more', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'mass', icon: 'add', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  {\r\n    action: 'moveToParent',\r\n    icon: 'arrow_upward',\r\n    colorClass: 'refresh-icon-color',\r\n  },\r\n];\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "colorClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthStrategy",
            "id": "interface-AuthStrategy-3838dd3d02a2c3998aaa0f1955b6afa35efbd4ee550c0dfcc59d07aba515d2ccd25ccba30e350878155be3e170ec969ce8d6ac08d587ca99c93450d98eb0d405",
            "file": "src/app/models/service-strategies/auth-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface AuthUser {\r\n  uid: string;\r\n  email?: string | null;\r\n  displayName?: string | null;\r\n  isAnonymous?: boolean;\r\n  emailVerified?: boolean;\r\n  isNewUser?: boolean;\r\n  // Add other common fields if needed\r\n}\r\n\r\nexport interface AuthStrategy {\r\n  isAuthenticated(): boolean;\r\n  getCurrentUserId(): string | undefined;\r\n  getCurrentUser(): Observable<AuthUser | null>; // firebase User or whatever... for now unknown...\r\n  logOut(): Promise<void>;\r\n  deleteCurrentUser(): void;\r\n  login(): Promise<{ userId: string; isNewUser: boolean }>; // General login method, using it for testing really or offline mode...\r\n\r\n  loginWithEmailAndPassword(email: string, password: string): Promise<void>;\r\n  loginWithGoogle(): Promise<{ userId: string; isNewUser: boolean }>; // user id\r\n  loginWithYahoo(): Promise<unknown>;\r\n  loginWithFacebook(): Promise<unknown>;\r\n\r\n  // passwordless\r\n  sendSignInLinkToEmail(email: string): Promise<unknown>;\r\n  confirmSignInWithEmail(url: string): Promise<unknown>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "confirmSignInWithEmail",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AuthUser | null>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithEmailAndPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginWithFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithYahoo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendSignInLinkToEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AuthUser",
            "id": "interface-AuthUser-3838dd3d02a2c3998aaa0f1955b6afa35efbd4ee550c0dfcc59d07aba515d2ccd25ccba30e350878155be3e170ec969ce8d6ac08d587ca99c93450d98eb0d405",
            "file": "src/app/models/service-strategies/auth-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface AuthUser {\r\n  uid: string;\r\n  email?: string | null;\r\n  displayName?: string | null;\r\n  isAnonymous?: boolean;\r\n  emailVerified?: boolean;\r\n  isNewUser?: boolean;\r\n  // Add other common fields if needed\r\n}\r\n\r\nexport interface AuthStrategy {\r\n  isAuthenticated(): boolean;\r\n  getCurrentUserId(): string | undefined;\r\n  getCurrentUser(): Observable<AuthUser | null>; // firebase User or whatever... for now unknown...\r\n  logOut(): Promise<void>;\r\n  deleteCurrentUser(): void;\r\n  login(): Promise<{ userId: string; isNewUser: boolean }>; // General login method, using it for testing really or offline mode...\r\n\r\n  loginWithEmailAndPassword(email: string, password: string): Promise<void>;\r\n  loginWithGoogle(): Promise<{ userId: string; isNewUser: boolean }>; // user id\r\n  loginWithYahoo(): Promise<unknown>;\r\n  loginWithFacebook(): Promise<unknown>;\r\n\r\n  // passwordless\r\n  sendSignInLinkToEmail(email: string): Promise<unknown>;\r\n  confirmSignInWithEmail(url: string): Promise<unknown>;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isAnonymous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isNewUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CacheStrategy",
            "id": "interface-CacheStrategy-9c8c98e50e24ca67333f63113920b22be66fb6bcba21010389e7b19fd49640a8264e26999e9d737fed6407a168943457f0667e2667cc0aa0d9a4fa4660ef55f1",
            "file": "src/app/models/service-strategies/cache-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScoreCacheStrategy } from './score-strategy.interface copy';\r\nimport { SettingsCacheStrategy } from './settings-strategy.interface';\r\nimport { TaskCacheStrategy } from './task-strategy.interface';\r\nimport { TreeCacheStrategy } from './tree-strategy.interface';\r\n\r\nexport interface CacheStrategy\r\n  extends TaskCacheStrategy,\r\n    TreeCacheStrategy,\r\n    SettingsCacheStrategy,\r\n    ScoreCacheStrategy {\r\n  clearCache(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [
                "TaskCacheStrategy",
                "TreeCacheStrategy",
                "SettingsCacheStrategy",
                "ScoreCacheStrategy"
            ]
        },
        {
            "name": "ConfigStrategy",
            "id": "interface-ConfigStrategy-a131d902b76c226180b36c7427011f3c7b0a0766cd3546db190a8af0d2398a2685389e7645b4fd59530d069c3b5583215a118ece2009f9ee594ea8ffd8feeed0",
            "file": "src/app/models/service-strategies/strategy-config.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ApiStrategy } from './api-strategy.interface';\r\nimport { AuthStrategy } from './auth-strategy.interface';\r\nimport { CacheStrategy } from './cache-strategy.interface';\r\nimport { ErrorHandlingStrategy } from './error-handling-strategy.interface';\r\n\r\nexport interface ConfigStrategy {\r\n  getAuthStrategy: () => AuthStrategy;\r\n  getCacheStrategy: () => CacheStrategy;\r\n  getApiStrategy: () => ApiStrategy;\r\n  getErrorHandlingStrategy: () => ErrorHandlingStrategy;\r\n}\r\n",
            "properties": [
                {
                    "name": "getApiStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "getAuthStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "getCacheStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "getErrorHandlingStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ErrorHandlingStrategy",
            "id": "interface-ErrorHandlingStrategy-9d0b7800cc46eb7294568bd65e461b4eeed63fad763fdd77208f0837fd4e20ae1e9307dae608c6269be3fd43afbf66d4f9054d2d810a51e53274f378691a74ad",
            "file": "src/app/models/service-strategies/error-handling-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ErrorHandlingStrategy {\r\n  error(error: unknown): void;\r\n  log(error: unknown): void;\r\n  feedback(msg: string): void;\r\n  popup(msg: string): void;\r\n  getFeedback(): Observable<string | null>;\r\n  // Other error handling methods...\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "popup",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "ExtendedTask",
            "id": "interface-ExtendedTask-20cc381878d66d015aab784b3f23d258eb1093e999f38712b533883e102c92d23141d15e5c8c92630dcf875f5537f616fe2b22932916f00b984ebd2574c255fc",
            "file": "src/app/models/taskModelManager.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TaskoratorTask {\r\n  taskId: string; // Unique identifier for the task\r\n  name: string;\r\n  todo: string;\r\n  why: string;\r\n  timeCreated: number; // UNIX timestamp in milliseconds\r\n  lastUpdated: number; // UNIX timestamp in milliseconds\r\n  timeEnd: number | null; // UNIX timestamp in milliseconds\r\n  duration: number; // Estimated time to complete the task in minutes or hours\r\n  overlord: string | null; // taskId of the parent task if it's part of a hierarchy\r\n  repeat: RepeatOptions;\r\n  status: TaskStatus; // Task status options\r\n  stage: TaskStage; // Task stage options\r\n  type: TaskType; // basically this defines size of project anyway\r\n  subtype: TaskSubtype; // good if code, we can make it pretty...\r\n  size: TaskSize; // we can delegate this to another owner or something, probably rename... its what action shall be taken ?\r\n  owner: string; // for future use of who does whose tasks\r\n  priority: number; // Task priority (1 to 10, for example)\r\n  backupLink: string; // github, file location, web link, nothing\r\n  imageUrl: string | null; // URL to the image file\r\n  imageDataUrl: string | null; // Base64 representation of the image\r\n  tags: string[]; // Array of tags associated with the task\r\n}\r\n\r\n// Utility method to generate unique IDs\r\nexport function getUniqueTaskId(): string {\r\n  return `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nexport const TASK_ACTIONS = [\r\n  'created',\r\n  'updated',\r\n  'completed',\r\n  'archived',\r\n  'deleted',\r\n  'renewed',\r\n  'seen',\r\n  'activated',\r\n  'moved',\r\n  'split',\r\n  'priorityIncreased',\r\n  'priorityDecreased',\r\n  'nameUpdated',\r\n  'todoUpdated',\r\n  'whyUpdated',\r\n  'tagAdded',\r\n  'tagRemoved',\r\n  'imageUpdated',\r\n  'backupLinkUpdated',\r\n  'repeatUpdated',\r\n  'timeEndUpdated',\r\n  'durationUpdated',\r\n  'statusUpdated',\r\n  'typeUpdated',\r\n  'subtypeUpdated',\r\n  'sizeUpdated',\r\n];\r\n\r\n// so the UI can react to task updates a bit better\r\nexport interface ExtendedTask extends TaskoratorTask {\r\n  isVisible: boolean; // For filtering visible tasks\r\n  animationState: 'highlighted' | 'normal' | 'removed'; // For UI animations\r\n}\r\n\r\nexport const maxPriority = 10;\r\nexport type TaskSize = 'do now' | 'split' | 'delegate';\r\nexport type TaskStage = 'seen' | 'completed' | 'todo' | 'archived' | 'deleted';\r\nexport type TaskStatus = 'active' | 'inactive';\r\nexport type RepeatOptions =\r\n  | 'once'\r\n  | 'never'\r\n  | 'half-hourly'\r\n  | 'hourly'\r\n  | 'half-daily'\r\n  | 'daily'\r\n  | 'weekly'\r\n  | 'half-monthly'\r\n  | 'monthly'\r\n  | 'three-monthly'\r\n  | 'half-yearly'\r\n  | 'yearly';\r\n\r\n/**\r\n * task type guesser:\r\n * if \"Task name caps\"- project\r\n * \"task name\" - todo\r\n * if TASK NAME -???\r\n */\r\nexport type TaskType =\r\n  | ''\r\n  | 'code'\r\n  | 'idea'\r\n  | 'note'\r\n  | 'todo'\r\n  | 'checklist'\r\n  | 'tree' // decision tree\r\n  | 'flowchart'\r\n  | 'task'\r\n  | 'next'\r\n  | 'job'\r\n  | 'feature'\r\n  | 'schedule'\r\n  | 'project'; // never ends, can be considered completed if all inside completed, buy maybe not\r\nexport type TaskSubtype =\r\n  | ''\r\n  | 'js'\r\n  | 'ts'\r\n  | 'html'\r\n  | 'css'\r\n  | 'sound'\r\n  | 'android'\r\n  | 'angular'\r\n  | 'nodejs'\r\n  | 'java'\r\n  | 'text'\r\n  | 'list';\r\n\r\nexport const ROOT_TASK_ID = '128';\r\nexport const ROOT_TASK_DESCRIPTION = 'Legends never die!';\r\n\r\nexport function getDefaultTask(): TaskoratorTask {\r\n  const now = Date.now(); // Current time in milliseconds\r\n  return {\r\n    taskId: '0',\r\n    name: '',\r\n    todo: '',\r\n    why: '',\r\n    timeCreated: now,\r\n    lastUpdated: now,\r\n    timeEnd: null,\r\n    duration: 0,\r\n    overlord: ROOT_TASK_ID,\r\n    repeat: 'once',\r\n    status: 'active',\r\n    stage: 'todo',\r\n    type: 'todo',\r\n    subtype: 'list',\r\n    size: 'do now',\r\n    owner: '',\r\n    priority: 5,\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: [],\r\n  };\r\n}\r\n\r\nexport function getRootTaskObject(): TaskoratorTask {\r\n  const now = Date.now(); // Current time in milliseconds\r\n  return {\r\n    taskId: ROOT_TASK_ID,\r\n    name: 'Primarch',\r\n    todo: '',\r\n    why: ROOT_TASK_DESCRIPTION,\r\n    timeCreated: now,\r\n    lastUpdated: now,\r\n    timeEnd: null,\r\n    duration: 0,\r\n    overlord: null,\r\n    repeat: 'once',\r\n    status: 'active',\r\n    stage: 'completed',\r\n    type: 'todo',\r\n    subtype: 'list',\r\n    size: 'do now',\r\n    owner: '',\r\n    priority: 5,\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: [],\r\n  };\r\n}\r\n\r\nexport const taskTableName = 'tasks_table';\r\nexport const sqlCreateTable = `CREATE TABLE ${taskTableName} (\r\n  taskId INTEGER PRIMARY KEY,\r\n  name TEXT NOT NULL,\r\n  todo TEXT NOT NULL,\r\n  why TEXT NOT NULL,\r\n  timeCreated TIMESTAMP NOT NULL,\r\n  timeEnd TIMESTAMP,\r\n  lastUpdated TIMESTAMP,\r\n  duration INTEGER NOT NULL,\r\n  overlord INTEGER,\r\n  repeat TEXT NOT NULL,\r\n  status TEXT NOT NULL,\r\n  stage TEXT NOT NULL,\r\n  type TEXT NOT NULL,\r\n  subtype TEXT NOT NULL,\r\n  size TEXT NOT NULL,\r\n  owner TEXT NOT NULL,\r\n  priority INTEGER NOT NULL,\r\n  backupLink TEXT NOT NULL,\r\n  imageUrl TEXT,\r\n  imageDataUrl TEXT,\r\n  tags TEXT NOT NULL\r\n);\r\n`;\r\n",
            "properties": [
                {
                    "name": "animationState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"highlighted\" | \"normal\" | \"removed\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "isVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "TaskoratorTask"
            ]
        },
        {
            "name": "ListPermissions",
            "id": "interface-ListPermissions-c5c065cf16b865256bd689ccdcdda0154b3e7daf1810b4117880eb2760facba113ddd56d486dae83da13fe951c283785b01fb7b9b5199ab9bcde8d80ffd89ebb",
            "file": "src/app/models/task-list-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExtendedTask, ROOT_TASK_ID } from './taskModelManager';\r\n\r\nexport interface TaskListRules {\r\n  id: string; // Unique identifier for the list\r\n  title: string; // Display name of the list\r\n  type: TaskListType; // Optional type, e.g., 'daily', 'latest'\r\n  parent: string; // Optional parent ID, for hierarchical lists\r\n  description: string; // Optional description for the list\r\n  // tasks: string[]; // Array of task IDs // we don't really want to make this list into an angular app wich its own cache and stuffs\r\n  rules: ListRules; // Optional rules for this list\r\n}\r\n\r\nexport enum TaskListType {\r\n  DAILY = 'daily',\r\n  WEEKLY = 'weekly',\r\n  MONTHLY = 'monthly',\r\n  YEARLY = 'yearly',\r\n  LATEST_UPDATED = 'latestUpdated',\r\n  LATEST_CREATED = 'latestCreated',\r\n  FOCUS = 'focus',\r\n  FROG = 'frog',\r\n  FAVORITE = 'favorite',\r\n  OVERLORD = 'overlord',\r\n  SESSION = 'session',\r\n}\r\n\r\nexport enum TaskListSubtype {\r\n  SETTINGS = 'settings',\r\n  SESSION = 'session',\r\n  REPEATING = 'repeating',\r\n  API = 'api',\r\n}\r\n\r\n// export enum TaskListKey {\r\n//   OVERLORD = 'overlord_',\r\n//   FOCUS = 'settings_focus',\r\n//   FROG = 'settings_frog',\r\n//   FAVORITE = 'settings_favorite',\r\n//   DAILY = 'repeating_daily',\r\n//   WEEKLY = 'repeating_weekly',\r\n//   MONTHLY = 'repeating_monthly',\r\n//   YEALRY = 'repeating_yearly',\r\n//   CREATED = 'latest_created',\r\n//   UPDATED = 'latest_updated',\r\n//   SESSION = 'session_',\r\n// }\r\n\r\nexport interface TaskListKey {\r\n  type: TaskListType;\r\n  data: TaskListSubtype | string; // task id, session name ...\r\n}\r\n\r\nexport interface ListRules {\r\n  filter: (task: ExtendedTask) => boolean; // A filter function for tasks\r\n  sorter: (a: ExtendedTask, b: ExtendedTask) => number; // A sort function\r\n  permissions: ListPermissions; // Permissions for actions\r\n}\r\n\r\nexport interface ListPermissions {\r\n  canAdd: boolean;\r\n  canMove: boolean;\r\n  canDelete: boolean;\r\n  canComplete: boolean;\r\n}\r\n\r\nexport function getIdFromKey(key: TaskListKey): string {\r\n  // if (key.type === TaskListType.OVERLORD || key.type === TaskListType.SESSION) {\r\n  //   return `${key.type}_${key.data}`;\r\n  // }\r\n  return `${key.type}_${key.data}`; // For static lists\r\n}\r\n\r\nexport const defaultTaskLists: TaskListRules[] = [\r\n  {\r\n    id: 'daily',\r\n    title: 'Daily Tasks',\r\n    type: TaskListType.DAILY,\r\n    description: 'Recurring daily tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'daily') {\r\n          return false;\r\n        }\r\n        const { startTime, endTime } = calculatePeriodTimes('daily');\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false, // this is loose list we can't just add tasks there (unless we allow it in future?)\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'weekly',\r\n    title: 'Weekly Tasks',\r\n    type: TaskListType.WEEKLY,\r\n    description: 'Recurring weekly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'weekly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('weekly');\r\n        // Check if the task falls outside the current daily period\r\n\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'monthly',\r\n    title: 'Monthly Tasks',\r\n    type: TaskListType.MONTHLY,\r\n    description: 'Recurring monthly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'monthly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('monthly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'yearly',\r\n    title: 'Yearly Tasks',\r\n    type: TaskListType.YEARLY,\r\n    description: 'Recurring yearly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'yearly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('yearly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'focus',\r\n    title: 'Focus Tasks',\r\n    type: TaskListType.FOCUS,\r\n    description: 'Tasks set as focus tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'frog',\r\n    title: 'Frog Tasks',\r\n    type: TaskListType.FROG,\r\n    description: 'Tasks set as \"eat the frog\" tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'favorites',\r\n    title: 'Favorite Tasks',\r\n    type: TaskListType.FAVORITE,\r\n    description: 'Tasks marked as favorites',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: true, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestCreated',\r\n    title: 'Latest Created Tasks',\r\n    type: TaskListType.LATEST_CREATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // we don't know which overlord to add it to\r\n        canMove: false, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestUpdated',\r\n    title: 'Latest Updated Tasks',\r\n    type: TaskListType.LATEST_UPDATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true, // we don't know which overlord to add it to\r\n        canMove: true, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'overlord_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Overlord Tasks',\r\n    type: TaskListType.OVERLORD,\r\n    description: 'Tasks associated with a specific overlord',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo' && task.taskId !== ROOT_TASK_ID, // Filter tasks that have an overlord\r\n      sorter: (a, b) => (b.priority || 0) - (a.priority || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true,\r\n        canMove: true,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific overlord ID when used\r\n  },\r\n  {\r\n    id: 'session_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Session Tasks',\r\n    type: TaskListType.SESSION,\r\n    description: 'Tasks specific to a particular session',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo', // Filter tasks that have a session ID\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // complex session situation, we can't really easily add, unless in future \"create task component can handle it\"\r\n        canMove: false, // don't know from where...\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific session ID when used\r\n  },\r\n];\r\n\r\nfunction filterTasks(\r\n  tasks: ExtendedTask[],\r\n  filterCompleted: boolean,\r\n  repeatInterval: string\r\n): ExtendedTask[] {\r\n  if (!filterCompleted) return tasks;\r\n\r\n  const { startTime, endTime } = calculatePeriodTimes(repeatInterval);\r\n\r\n  return tasks.filter((task) => {\r\n    const isOutsideCurrentPeriod =\r\n      task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n    return isOutsideCurrentPeriod;\r\n  });\r\n}\r\n\r\nfunction calculatePeriodTimes(repeatInterval: string): {\r\n  startTime: number;\r\n  endTime: number;\r\n} {\r\n  const BUFFER_HOURS = 12; // Adjustable buffer for tasks reappearing sooner.\r\n  const bufferMs = BUFFER_HOURS * 60 * 60 * 1000;\r\n  const currentDate = new Date();\r\n\r\n  let startTime: number;\r\n  let endTime: number;\r\n\r\n  switch (repeatInterval) {\r\n    case 'daily':\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n\r\n    case 'weekly':\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0); // Start of the week\r\n      startTime = startOfWeek.getTime();\r\n      endTime = startTime + 7 * 24 * 60 * 60 * 1000; // Start of the next week\r\n      break;\r\n\r\n    case 'monthly':\r\n      const startOfMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        1\r\n      );\r\n      startTime = startOfMonth.getTime();\r\n      const nextMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth() + 1,\r\n        1\r\n      );\r\n      endTime = nextMonth.getTime(); // Start of the next month\r\n      break;\r\n\r\n    case 'yearly':\r\n      const startOfYear = new Date(currentDate.getFullYear(), 0, 1);\r\n      startTime = startOfYear.getTime();\r\n      const nextYear = new Date(currentDate.getFullYear() + 1, 0, 1);\r\n      endTime = nextYear.getTime(); // Start of the next year\r\n      break;\r\n\r\n    default:\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n  }\r\n\r\n  // Apply buffer only to the next period\r\n  endTime += bufferMs;\r\n\r\n  return { startTime, endTime };\r\n}\r\n",
            "properties": [
                {
                    "name": "canAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "canComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "canDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "canMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListRules",
            "id": "interface-ListRules-c5c065cf16b865256bd689ccdcdda0154b3e7daf1810b4117880eb2760facba113ddd56d486dae83da13fe951c283785b01fb7b9b5199ab9bcde8d80ffd89ebb",
            "file": "src/app/models/task-list-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExtendedTask, ROOT_TASK_ID } from './taskModelManager';\r\n\r\nexport interface TaskListRules {\r\n  id: string; // Unique identifier for the list\r\n  title: string; // Display name of the list\r\n  type: TaskListType; // Optional type, e.g., 'daily', 'latest'\r\n  parent: string; // Optional parent ID, for hierarchical lists\r\n  description: string; // Optional description for the list\r\n  // tasks: string[]; // Array of task IDs // we don't really want to make this list into an angular app wich its own cache and stuffs\r\n  rules: ListRules; // Optional rules for this list\r\n}\r\n\r\nexport enum TaskListType {\r\n  DAILY = 'daily',\r\n  WEEKLY = 'weekly',\r\n  MONTHLY = 'monthly',\r\n  YEARLY = 'yearly',\r\n  LATEST_UPDATED = 'latestUpdated',\r\n  LATEST_CREATED = 'latestCreated',\r\n  FOCUS = 'focus',\r\n  FROG = 'frog',\r\n  FAVORITE = 'favorite',\r\n  OVERLORD = 'overlord',\r\n  SESSION = 'session',\r\n}\r\n\r\nexport enum TaskListSubtype {\r\n  SETTINGS = 'settings',\r\n  SESSION = 'session',\r\n  REPEATING = 'repeating',\r\n  API = 'api',\r\n}\r\n\r\n// export enum TaskListKey {\r\n//   OVERLORD = 'overlord_',\r\n//   FOCUS = 'settings_focus',\r\n//   FROG = 'settings_frog',\r\n//   FAVORITE = 'settings_favorite',\r\n//   DAILY = 'repeating_daily',\r\n//   WEEKLY = 'repeating_weekly',\r\n//   MONTHLY = 'repeating_monthly',\r\n//   YEALRY = 'repeating_yearly',\r\n//   CREATED = 'latest_created',\r\n//   UPDATED = 'latest_updated',\r\n//   SESSION = 'session_',\r\n// }\r\n\r\nexport interface TaskListKey {\r\n  type: TaskListType;\r\n  data: TaskListSubtype | string; // task id, session name ...\r\n}\r\n\r\nexport interface ListRules {\r\n  filter: (task: ExtendedTask) => boolean; // A filter function for tasks\r\n  sorter: (a: ExtendedTask, b: ExtendedTask) => number; // A sort function\r\n  permissions: ListPermissions; // Permissions for actions\r\n}\r\n\r\nexport interface ListPermissions {\r\n  canAdd: boolean;\r\n  canMove: boolean;\r\n  canDelete: boolean;\r\n  canComplete: boolean;\r\n}\r\n\r\nexport function getIdFromKey(key: TaskListKey): string {\r\n  // if (key.type === TaskListType.OVERLORD || key.type === TaskListType.SESSION) {\r\n  //   return `${key.type}_${key.data}`;\r\n  // }\r\n  return `${key.type}_${key.data}`; // For static lists\r\n}\r\n\r\nexport const defaultTaskLists: TaskListRules[] = [\r\n  {\r\n    id: 'daily',\r\n    title: 'Daily Tasks',\r\n    type: TaskListType.DAILY,\r\n    description: 'Recurring daily tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'daily') {\r\n          return false;\r\n        }\r\n        const { startTime, endTime } = calculatePeriodTimes('daily');\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false, // this is loose list we can't just add tasks there (unless we allow it in future?)\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'weekly',\r\n    title: 'Weekly Tasks',\r\n    type: TaskListType.WEEKLY,\r\n    description: 'Recurring weekly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'weekly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('weekly');\r\n        // Check if the task falls outside the current daily period\r\n\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'monthly',\r\n    title: 'Monthly Tasks',\r\n    type: TaskListType.MONTHLY,\r\n    description: 'Recurring monthly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'monthly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('monthly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'yearly',\r\n    title: 'Yearly Tasks',\r\n    type: TaskListType.YEARLY,\r\n    description: 'Recurring yearly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'yearly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('yearly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'focus',\r\n    title: 'Focus Tasks',\r\n    type: TaskListType.FOCUS,\r\n    description: 'Tasks set as focus tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'frog',\r\n    title: 'Frog Tasks',\r\n    type: TaskListType.FROG,\r\n    description: 'Tasks set as \"eat the frog\" tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'favorites',\r\n    title: 'Favorite Tasks',\r\n    type: TaskListType.FAVORITE,\r\n    description: 'Tasks marked as favorites',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: true, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestCreated',\r\n    title: 'Latest Created Tasks',\r\n    type: TaskListType.LATEST_CREATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // we don't know which overlord to add it to\r\n        canMove: false, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestUpdated',\r\n    title: 'Latest Updated Tasks',\r\n    type: TaskListType.LATEST_UPDATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true, // we don't know which overlord to add it to\r\n        canMove: true, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'overlord_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Overlord Tasks',\r\n    type: TaskListType.OVERLORD,\r\n    description: 'Tasks associated with a specific overlord',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo' && task.taskId !== ROOT_TASK_ID, // Filter tasks that have an overlord\r\n      sorter: (a, b) => (b.priority || 0) - (a.priority || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true,\r\n        canMove: true,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific overlord ID when used\r\n  },\r\n  {\r\n    id: 'session_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Session Tasks',\r\n    type: TaskListType.SESSION,\r\n    description: 'Tasks specific to a particular session',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo', // Filter tasks that have a session ID\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // complex session situation, we can't really easily add, unless in future \"create task component can handle it\"\r\n        canMove: false, // don't know from where...\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific session ID when used\r\n  },\r\n];\r\n\r\nfunction filterTasks(\r\n  tasks: ExtendedTask[],\r\n  filterCompleted: boolean,\r\n  repeatInterval: string\r\n): ExtendedTask[] {\r\n  if (!filterCompleted) return tasks;\r\n\r\n  const { startTime, endTime } = calculatePeriodTimes(repeatInterval);\r\n\r\n  return tasks.filter((task) => {\r\n    const isOutsideCurrentPeriod =\r\n      task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n    return isOutsideCurrentPeriod;\r\n  });\r\n}\r\n\r\nfunction calculatePeriodTimes(repeatInterval: string): {\r\n  startTime: number;\r\n  endTime: number;\r\n} {\r\n  const BUFFER_HOURS = 12; // Adjustable buffer for tasks reappearing sooner.\r\n  const bufferMs = BUFFER_HOURS * 60 * 60 * 1000;\r\n  const currentDate = new Date();\r\n\r\n  let startTime: number;\r\n  let endTime: number;\r\n\r\n  switch (repeatInterval) {\r\n    case 'daily':\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n\r\n    case 'weekly':\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0); // Start of the week\r\n      startTime = startOfWeek.getTime();\r\n      endTime = startTime + 7 * 24 * 60 * 60 * 1000; // Start of the next week\r\n      break;\r\n\r\n    case 'monthly':\r\n      const startOfMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        1\r\n      );\r\n      startTime = startOfMonth.getTime();\r\n      const nextMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth() + 1,\r\n        1\r\n      );\r\n      endTime = nextMonth.getTime(); // Start of the next month\r\n      break;\r\n\r\n    case 'yearly':\r\n      const startOfYear = new Date(currentDate.getFullYear(), 0, 1);\r\n      startTime = startOfYear.getTime();\r\n      const nextYear = new Date(currentDate.getFullYear() + 1, 0, 1);\r\n      endTime = nextYear.getTime(); // Start of the next year\r\n      break;\r\n\r\n    default:\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n  }\r\n\r\n  // Apply buffer only to the next period\r\n  endTime += bufferMs;\r\n\r\n  return { startTime, endTime };\r\n}\r\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListPermissions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoggedInUser",
            "id": "interface-LoggedInUser-e01af2f89852ed1c65ca4255c7cdef354bceafd9d9ac7a4117223f2e5c6e590be9aeb35b66312534fba5ee81f0bb784a833cd7a85730afce5ab10d6b53d7310d",
            "file": "src/app/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoggedInUser {\r\n  userId: string;\r\n  isNewUser: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "isNewUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OfflineUser",
            "id": "interface-OfflineUser-32257bc34aa861758df737be8ebc47b851e09fdcbf5d28aa9e5bf211e678db1083e429ff58bfa8283d84fbc621572552c4996683a91e7278db6a339f5ab77820",
            "file": "src/app/services/core/auth-offline.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport {\r\n  AuthStrategy,\r\n  AuthUser,\r\n} from '../../models/service-strategies/auth-strategy.interface';\r\nimport { OTHER_CONFIG } from '../../app.config';\r\n\r\nexport interface OfflineUser {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  emailVerified: boolean;\r\n  isAnonymous: boolean;\r\n  phoneNumber: string | null;\r\n  photoURL: string | null;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthOfflineService implements AuthStrategy {\r\n  private currentUser = new BehaviorSubject<AuthUser | null>(null);\r\n  private readonly localStorageKey = OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Initializes the service by checking local storage for an existing user.\r\n   */\r\n  initialize(): void {\r\n    const storedUser = localStorage.getItem(this.localStorageKey);\r\n    if (storedUser) {\r\n      const user: AuthUser = JSON.parse(storedUser);\r\n      this.currentUser.next(user);\r\n      console.log('Restored offline user from local storage:', user);\r\n    } else {\r\n      console.log('No offline user found in local storage.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs in as an offline user. If no user exists in local storage, creates a new one.\r\n   */\r\n  async login(): Promise<{ userId: string; isNewUser: boolean }> {\r\n    let offlineUser = this.currentUser.getValue();\r\n    const isNewUser = offlineUser === null;\r\n\r\n    if (isNewUser) {\r\n      offlineUser = {\r\n        uid: 'offline-user',\r\n        displayName: 'Offline User',\r\n        email: null,\r\n        isAnonymous: true,\r\n        emailVerified: false,\r\n        isNewUser: true,\r\n      };\r\n\r\n      this.currentUser.next(offlineUser);\r\n      localStorage.setItem(this.localStorageKey, JSON.stringify(offlineUser));\r\n      console.log('Created new offline user:', offlineUser);\r\n    } else {\r\n      console.log('Logged in as existing offline user:', offlineUser);\r\n    }\r\n\r\n    // Ensure offlineUser is not null here with a type assertion or conditional.\r\n    return {\r\n      userId: offlineUser!.uid,\r\n      isNewUser,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Logs out the current offline user.\r\n   */\r\n  async logOut(): Promise<void> {\r\n    this.currentUser.next(null);\r\n    localStorage.removeItem(this.localStorageKey);\r\n    console.log('Logged out of offline mode');\r\n  }\r\n\r\n  /**\r\n   * Deletes the current offline user.\r\n   */\r\n  deleteCurrentUser(): void {\r\n    this.logOut(); // Log out and remove user data.\r\n    console.log('Offline user deleted');\r\n  }\r\n\r\n  /**\r\n   * Updates the offline user's profile and persists it to local storage.\r\n   */\r\n  updateProfile(updatedProfile: Partial<OfflineUser>): void {\r\n    const currentUser = this.currentUser.getValue();\r\n\r\n    if (!currentUser) {\r\n      console.error('No user is logged in to update the profile.');\r\n      return;\r\n    }\r\n\r\n    const updatedUser = {\r\n      ...currentUser,\r\n      ...updatedProfile,\r\n    };\r\n\r\n    this.currentUser.next(updatedUser);\r\n    localStorage.setItem(this.localStorageKey, JSON.stringify(updatedUser));\r\n    console.log('Offline user profile updated:', updatedUser);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.currentUser.getValue();\r\n  }\r\n\r\n  getCurrentUserId(): string | undefined {\r\n    const user = this.currentUser.getValue();\r\n    return user ? user.uid : undefined;\r\n  }\r\n\r\n  getCurrentUser(): Observable<AuthUser | null> {\r\n    return this.currentUser.asObservable();\r\n  }\r\n\r\n  // Unsupported methods for offline mode\r\n  async loginWithEmailAndPassword(): Promise<void> {\r\n    throw new Error('Offline mode does not support email/password login.');\r\n  }\r\n\r\n  async loginWithGoogle(): Promise<{ userId: string; isNewUser: boolean }> {\r\n    throw new Error('Offline mode does not support Google login.');\r\n  }\r\n\r\n  async loginWithYahoo(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support Yahoo login.');\r\n  }\r\n\r\n  async loginWithFacebook(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support Facebook login.');\r\n  }\r\n\r\n  async sendSignInLinkToEmail(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support passwordless login.');\r\n  }\r\n\r\n  async confirmSignInWithEmail(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support passwordless login.');\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isAnonymous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "phoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "photoURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterUserResult",
            "id": "interface-RegisterUserResult-971d2fcf37b2595859bfafad7aadcfed3746a25a63703e2fb55af6b6742228a1cbbf5d46b2214b527fd4d3b95b93071e497591a4961b90994f2b5c2f1069d39b",
            "file": "src/app/models/register-user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RegisterUserResult {\r\n  success: boolean;\r\n  message: string;\r\n  userId?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterUserResult",
            "id": "interface-RegisterUserResult-d06e2a003a8da208803c9f745afc15f3193d3c6fc891f198cb29227f82084bf7d63081adf832e1f83a70f33fe6ca2c176da9e11ff8fb32cf6ad2ca3ab9a80229-1",
            "file": "src/app/models/service-strategies/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RegisterUserResult {\r\n  success: boolean;\r\n  message: string;\r\n  userId?: string;\r\n}\r\n\r\nexport interface TaskUserInfo {\r\n  allowedTemplates: string[];\r\n  canCreate: boolean;\r\n  canUseGpt: boolean;\r\n  role: string;\r\n  registered: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RegisterUserResult-1"
        },
        {
            "name": "RegistrationApiStrategy",
            "id": "interface-RegistrationApiStrategy-e1b9a550ad4d1955cee1e632f315accd6a6ac50fa4fd1c87b21f8fab6963ee5a2623b827c0d32dea4dab3dc2fd2cf59806d4111d740e955990171f605190f286",
            "file": "src/app/models/service-strategies/registration-strategy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Score } from '../score';\r\nimport { TaskSettings } from '../settings';\r\nimport { TaskTree } from '../taskTree';\r\nimport { RegisterUserResult, TaskUserInfo } from './user';\r\nimport { TaskoratorTask } from '../taskModelManager';\r\n\r\nexport interface RegistrationData {\r\n  initialTask: TaskoratorTask;\r\n  additionalTasks: TaskoratorTask[];\r\n  settings: TaskSettings;\r\n  score: Score;\r\n  tree: TaskTree;\r\n  userInfo: TaskUserInfo;\r\n}\r\n\r\nexport interface RegistrationApiStrategy {\r\n  generateApiKey(): void;\r\n  register(registrationData: RegistrationData): Promise<RegisterUserResult>;\r\n  deleteUser(): Promise<void>; // if registration fails, we don't want this user, we have to reset all objects...\r\n  getUserInfo(): Promise<TaskUserInfo | undefined>; // the user might not exist\r\n  createUserInfo(userInfo: TaskUserInfo): Promise<void>;\r\n  updateUserInfo(userInfo: TaskUserInfo): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | undefined>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<RegisterUserResult>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "RegistrationData",
            "id": "interface-RegistrationData-e1b9a550ad4d1955cee1e632f315accd6a6ac50fa4fd1c87b21f8fab6963ee5a2623b827c0d32dea4dab3dc2fd2cf59806d4111d740e955990171f605190f286",
            "file": "src/app/models/service-strategies/registration-strategy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Score } from '../score';\r\nimport { TaskSettings } from '../settings';\r\nimport { TaskTree } from '../taskTree';\r\nimport { RegisterUserResult, TaskUserInfo } from './user';\r\nimport { TaskoratorTask } from '../taskModelManager';\r\n\r\nexport interface RegistrationData {\r\n  initialTask: TaskoratorTask;\r\n  additionalTasks: TaskoratorTask[];\r\n  settings: TaskSettings;\r\n  score: Score;\r\n  tree: TaskTree;\r\n  userInfo: TaskUserInfo;\r\n}\r\n\r\nexport interface RegistrationApiStrategy {\r\n  generateApiKey(): void;\r\n  register(registrationData: RegistrationData): Promise<RegisterUserResult>;\r\n  deleteUser(): Promise<void>; // if registration fails, we don't want this user, we have to reset all objects...\r\n  getUserInfo(): Promise<TaskUserInfo | undefined>; // the user might not exist\r\n  createUserInfo(userInfo: TaskUserInfo): Promise<void>;\r\n  updateUserInfo(userInfo: TaskUserInfo): Promise<void>;\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "initialTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Score",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "userInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskUserInfo",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RouteMetadata",
            "id": "interface-RouteMetadata-55d35f4d17d64585484909d97c386d129e50a2b98ef6427f3a666540b98017f482d112d7c5832d8fd0cf45d4e757e7f43f3e1b9e649c94e0cd57408a1d467d19",
            "file": "src/app/app.routes-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RouteMetadata {\r\n  title: string;\r\n  altName: string;\r\n  description: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface AppRouteMap {\r\n  [key: string]: RouteMetadata;\r\n}\r\n\r\n// import { Routes } from '@angular/router';\r\n// import { citadelChildren } from './features/core/citadel/citadel-routing.module';\r\n// import { crucibleChildren } from './features/core/crucible/crucible-routing.module';\r\n// import { dreamforgeChildren } from './features/core/dreamforge/dreamforge-routing.module';\r\n// import { gatewayChildren } from './features/core/gateway/gateway-routing.module';\r\n// import { nexusChildren } from './features/core/nexus/nexus-routing.module';\r\n// import { sentinelChildren } from './features/core/sentinel/sentinel-routing.module';\r\n// import { vortexChildren } from './features/core/vortex/vortex-routing.module';\r\n// import {\r\n//   AppRoute,\r\n//   AppRouteMap,\r\n//   CORE_APP_PATHS,\r\n//   RouteMetadata,\r\n// } from './app.core-paths.module';\r\n\r\n// export function generateAngularRoutes(appRoutes: AppRouteMap): Routes {\r\n//   return Object.values(appRoutes).map((route: AppRoute) => ({\r\n//     path: route.path, // Non-null assertion here\r\n//     component: route.component,\r\n//     loadChildren: route.loadChildren,\r\n//     canActivate: route.canActivate,\r\n//     canActivateChild: route.canActivateChild,\r\n//     children: route.children\r\n//       ? generateAngularRoutes(createAppRouteMap(route.children))\r\n//       : undefined,\r\n//   }));\r\n// }\r\n\r\n// export function getRoutes(): Routes {\r\n//   return [\r\n//     {\r\n//       path: '',\r\n//       redirectTo: CORE_APP_PATHS['sentinel'].path, // Redirect to your default path\r\n//       pathMatch: 'full',\r\n//     },\r\n//     ...generateAngularRoutes(CORE_APP_PATHS),\r\n//   ];\r\n// }\r\n\r\n// // Helper function to convert an array of AppRoutes into an AppRouteMap\r\n// function createAppRouteMap(routes: AppRoute[]): AppRouteMap {\r\n//   return routes.reduce((map, route) => {\r\n//     map[route.path] = route;\r\n//     return map;\r\n//   }, {} as AppRouteMap);\r\n// }\r\n\r\n// export function generateRouteMetadataMap(appRoutes: AppRouteMap): {\r\n//   [key: string]: RouteMetadata;\r\n// } {\r\n//   const metadataMap: { [key: string]: RouteMetadata } = {};\r\n\r\n//   Object.values(appRoutes).forEach((route: AppRoute) => {\r\n//     metadataMap[route.path] = {\r\n//       title: route.title,\r\n//       altName: route.altName,\r\n//       description: route.description,\r\n//       icon: route.icon,\r\n//     };\r\n\r\n//     if (route.children) {\r\n//       Object.assign(\r\n//         metadataMap,\r\n//         generateRouteMetadataMap(createAppRouteMap(route.children))\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   return metadataMap;\r\n// }\r\n\r\n// // Use this to generate your final routes\r\n// export const CORE_ROUTES: Routes = generateAngularRoutes(CORE_APP_PATHS);\r\n\r\n// // Generate metadata map\r\n// export const CORE_METADATA_MAP = generateRouteMetadataMap(CORE_APP_PATHS);\r\n// // all metadata\r\n// // export const ALL_METADATA_MAP = generateRouteMetadataMap(ALL_APP_PATHS);\r\n\r\n// // Example of retrieving metadata for a specific route\r\n// // const metadata = getRouteMetadata('test-app');\r\n\r\n// // export function getRouteMetadata(path: string): RouteMetadata | undefined {\r\n// //   const allPaths = { ...CORE_APP_PATHS, ...ALL_APP_PATHS };\r\n\r\n// //   // Search for the path in the objects\r\n// //   for (const key in allPaths) {\r\n// //     if (allPaths[key].path === path) {\r\n// //       return allPaths[key];\r\n// //     }\r\n// //   }\r\n\r\n// //   // If no match is found, return undefined\r\n// //   return undefined;\r\n// // }\r\n\r\n// export interface PathItem {\r\n//   path: string;\r\n//   children: string[];\r\n// }\r\n\r\n// export function getPathMap(): { [key: string]: PathItem } {\r\n//   return {\r\n//     citadel: {\r\n//       path: CORE_APP_PATHS['citadel'].path,\r\n//       children: citadelChildren,\r\n//     },\r\n//     crucible: {\r\n//       path: CORE_APP_PATHS['crucible'].path,\r\n//       children: crucibleChildren,\r\n//     },\r\n//     forge: {\r\n//       path: CORE_APP_PATHS['forge'].path,\r\n//       children: dreamforgeChildren,\r\n//     },\r\n//     gateway: {\r\n//       path: CORE_APP_PATHS['gateway'].path,\r\n//       children: gatewayChildren,\r\n//     },\r\n//     nexus: {\r\n//       path: CORE_APP_PATHS['nexus'].path,\r\n//       children: nexusChildren,\r\n//     },\r\n//     sentinel: {\r\n//       path: CORE_APP_PATHS['sentinel'].path,\r\n//       children: sentinelChildren,\r\n//     },\r\n//     vortex: {\r\n//       path: CORE_APP_PATHS['vortex'].path,\r\n//       children: vortexChildren,\r\n//     },\r\n//   };\r\n// }\r\n",
            "properties": [
                {
                    "name": "altName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Score",
            "id": "interface-Score-5857999ba728bc9114d398a4c1f18a6d9a51dd71f00e0e7d2827c030117571688d1cdccaa17563762723409deb3773c2107b9d694c85e4cdf79d5a0f379797dc",
            "file": "src/app/models/score.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Score {\r\n  createdTasks: number;\r\n  // completed\r\n  // ...\r\n}\r\n\r\nexport function getDefaultScore() {\r\n  const score: Score = {\r\n    createdTasks: 1,\r\n  };\r\n  return score;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ScoreApiStrategy",
            "id": "interface-ScoreApiStrategy-f36e90aa4c5b20dac2ef3110c4b1fbae656217b16c40534d3927ba5aae49fe17e13959caacf04ad42d9a55c2577a3513b3469eadf720b7e6603f0304f63c4399",
            "file": "src/app/models/service-strategies/score-strategy.interface copy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Score } from '../score';\r\n\r\nexport interface ScoreStrategy {\r\n  createScore(score: Score): Promise<Score | null>;\r\n  getScore(): Observable<Score | null>;\r\n  updateScore(score: Score): Promise<void>;\r\n}\r\nexport interface ScoreCacheStrategy {\r\n  createScore(score: Score): void;\r\n  getScore(): Promise<Score | null> | Score | null;\r\n  updateScore(score: Score): void;\r\n}\r\nexport interface ScoreApiStrategy {\r\n  createScore(score: Score): Promise<Score | null>;\r\n  getScore(): Promise<Score | null>;\r\n  updateScore(score: Score): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "ScoreCacheStrategy",
            "id": "interface-ScoreCacheStrategy-f36e90aa4c5b20dac2ef3110c4b1fbae656217b16c40534d3927ba5aae49fe17e13959caacf04ad42d9a55c2577a3513b3469eadf720b7e6603f0304f63c4399",
            "file": "src/app/models/service-strategies/score-strategy.interface copy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Score } from '../score';\r\n\r\nexport interface ScoreStrategy {\r\n  createScore(score: Score): Promise<Score | null>;\r\n  getScore(): Observable<Score | null>;\r\n  updateScore(score: Score): Promise<void>;\r\n}\r\nexport interface ScoreCacheStrategy {\r\n  createScore(score: Score): void;\r\n  getScore(): Promise<Score | null> | Score | null;\r\n  updateScore(score: Score): void;\r\n}\r\nexport interface ScoreApiStrategy {\r\n  createScore(score: Score): Promise<Score | null>;\r\n  getScore(): Promise<Score | null>;\r\n  updateScore(score: Score): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise | Score | null",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "ScoreStrategy",
            "id": "interface-ScoreStrategy-f36e90aa4c5b20dac2ef3110c4b1fbae656217b16c40534d3927ba5aae49fe17e13959caacf04ad42d9a55c2577a3513b3469eadf720b7e6603f0304f63c4399",
            "file": "src/app/models/service-strategies/score-strategy.interface copy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Score } from '../score';\r\n\r\nexport interface ScoreStrategy {\r\n  createScore(score: Score): Promise<Score | null>;\r\n  getScore(): Observable<Score | null>;\r\n  updateScore(score: Score): Promise<void>;\r\n}\r\nexport interface ScoreCacheStrategy {\r\n  createScore(score: Score): void;\r\n  getScore(): Promise<Score | null> | Score | null;\r\n  updateScore(score: Score): void;\r\n}\r\nexport interface ScoreApiStrategy {\r\n  createScore(score: Score): Promise<Score | null>;\r\n  getScore(): Promise<Score | null>;\r\n  updateScore(score: Score): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Score | null>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "SettingsApiStrategy",
            "id": "interface-SettingsApiStrategy-b7a81f130b214fd200b44d30988a6db2df7104e35fd87dc4fe86cd170acae54daed3b6e919056a95f91eafd62a7a76b61d3448284c19970e9dc25dc235c3d5d0",
            "file": "src/app/models/service-strategies/settings-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { TaskSettings } from '../settings';\r\n\r\nexport interface SettingsStrategy {\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null>;\r\n  getSettings(): Observable<TaskSettings | null>;\r\n  updateSettings(settings: TaskSettings): Promise<void>;\r\n}\r\nexport interface SettingsCacheStrategy {\r\n  createSettings(settings: TaskSettings): void;\r\n  getSettings(): Promise<TaskSettings | null> | TaskSettings | null;\r\n  updateSettings(settings: TaskSettings): void;\r\n}\r\n\r\nexport interface SettingsApiStrategy {\r\n  getSettings(): Promise<TaskSettings | null>;\r\n  updateSettings(settings: TaskSettings): Promise<void>;\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "SettingsCacheStrategy",
            "id": "interface-SettingsCacheStrategy-b7a81f130b214fd200b44d30988a6db2df7104e35fd87dc4fe86cd170acae54daed3b6e919056a95f91eafd62a7a76b61d3448284c19970e9dc25dc235c3d5d0",
            "file": "src/app/models/service-strategies/settings-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { TaskSettings } from '../settings';\r\n\r\nexport interface SettingsStrategy {\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null>;\r\n  getSettings(): Observable<TaskSettings | null>;\r\n  updateSettings(settings: TaskSettings): Promise<void>;\r\n}\r\nexport interface SettingsCacheStrategy {\r\n  createSettings(settings: TaskSettings): void;\r\n  getSettings(): Promise<TaskSettings | null> | TaskSettings | null;\r\n  updateSettings(settings: TaskSettings): void;\r\n}\r\n\r\nexport interface SettingsApiStrategy {\r\n  getSettings(): Promise<TaskSettings | null>;\r\n  updateSettings(settings: TaskSettings): Promise<void>;\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise | TaskSettings | null",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "SettingsStrategy",
            "id": "interface-SettingsStrategy-b7a81f130b214fd200b44d30988a6db2df7104e35fd87dc4fe86cd170acae54daed3b6e919056a95f91eafd62a7a76b61d3448284c19970e9dc25dc235c3d5d0",
            "file": "src/app/models/service-strategies/settings-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { TaskSettings } from '../settings';\r\n\r\nexport interface SettingsStrategy {\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null>;\r\n  getSettings(): Observable<TaskSettings | null>;\r\n  updateSettings(settings: TaskSettings): Promise<void>;\r\n}\r\nexport interface SettingsCacheStrategy {\r\n  createSettings(settings: TaskSettings): void;\r\n  getSettings(): Promise<TaskSettings | null> | TaskSettings | null;\r\n  updateSettings(settings: TaskSettings): void;\r\n}\r\n\r\nexport interface SettingsApiStrategy {\r\n  getSettings(): Promise<TaskSettings | null>;\r\n  updateSettings(settings: TaskSettings): Promise<void>;\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "Task",
            "id": "interface-Task-22cb7ad6f499b72d2b8b2c51506422282bcdfdbb93ef30d34d4d6d70c44bb3333839ab356fbfd6ee2a148af0012b2529734a4263595f9398c6fc9f0f154699e6",
            "file": "src/app/features/ui-factory/taskorator-main/taskorator-main.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgFor } from '@angular/common';\r\nimport { Component, signal } from '@angular/core';\r\nimport { HorizontalNavigationComponent } from '../../../components/horizontal-navigation/horizontal-navigation.component';\r\n\r\ninterface Task {\r\n  id: number;\r\n  title: string;\r\n  children?: Task[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-taskorator-main',\r\n  standalone: true,\r\n  imports: [NgFor, HorizontalNavigationComponent],\r\n  templateUrl: './taskorator-main.component.html',\r\n  styleUrls: ['./taskorator-main.component.scss'], // keeps Tailwind utilities + any overrides\r\n})\r\nexport class TaskoratorMainComponent {\r\n  navModes = ['⟳ Refresh', '✎ Edit', '✔ Done', '🗑 Delete'];\r\n  currentMode = signal(this.navModes[0]);\r\n\r\n  parent: Task = { id: 0, title: 'Root objective' };\r\n  tasks: Task[] = [\r\n    { id: 1, title: 'Scaffold feature' },\r\n    { id: 2, title: 'Write tests', children: [{ id: 3, title: 'Edge cases' }] },\r\n  ];\r\n\r\n  setMode(mode: string) {\r\n    this.currentMode.set(mode);\r\n  }\r\n  actOn(task: Task) {\r\n    /* dispatch mode-specific action */\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskAction",
            "id": "interface-TaskAction-1c3d6a9fd3edea5ae6c18894b254587a51da54e8200b9df52127bfd4a2fd44eba60b3baab4446720e2ca36b88c0d9d98a5db2a2a96f8be2c7f4aa77af2c9fe53",
            "file": "src/app/services/tasks/task-action-tracker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport enum TaskActions {\r\n  SELECTED = 'selected',\r\n  MOVED = 'moved',\r\n  CREATED = 'created',\r\n  UPDATED = 'updated',\r\n  COMPLETED = 'completed',\r\n  ARCHIVED = 'archived',\r\n  DELETED = 'deleted',\r\n  RENEWED = 'renewed',\r\n  SEEN = 'seen',\r\n  ACTIVATED = 'activated',\r\n  PRIORITY_INCREASED = 'priorityIncreased',\r\n  PRIORITY_DECREASED = 'priorityDecreased',\r\n  NAME_UPDATED = 'nameUpdated',\r\n  TODO_UPDATED = 'todoUpdated',\r\n  WHY_UPDATED = 'whyUpdated',\r\n  TAG_ADDED = 'tagAdded',\r\n  TAG_REMOVED = 'tagRemoved',\r\n  IMAGE_UPDATED = 'imageUpdated',\r\n  BACKUP_LINK_UPDATED = 'backupLinkUpdated',\r\n  REPEAT_UPDATED = 'repeatUpdated',\r\n  TIME_END_UPDATED = 'timeEndUpdated',\r\n  DURATION_UPDATED = 'durationUpdated',\r\n  STATUS_UPDATED = 'statusUpdated',\r\n  TYPE_UPDATED = 'typeUpdated',\r\n  SUBTYPE_UPDATED = 'subtypeUpdated',\r\n  SIZE_UPDATED = 'sizeUpdated',\r\n}\r\n\r\nexport interface TaskAction {\r\n  taskIds: string[];\r\n  action: TaskActions; // Action performed (e.g., 'moved', 'created', etc.)\r\n  subAction?: string; // Sub-action details (e.g., 'updated type to X')\r\n  message: string; // Optional descriptive message for batch updates\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskActionTrackerService {\r\n  private lastActionSubject = new BehaviorSubject<TaskAction | null>(null);\r\n  lastAction$ = this.lastActionSubject.asObservable();\r\n\r\n  constructor() {}\r\n  /**\r\n   * Record a single task action.\r\n   * @param taskId - ID of the task.\r\n   * @param action - Action performed (e.g., 'updated', 'completed').\r\n   * @param subAction - Optional sub-action details (e.g., 'updated type to X').\r\n   */\r\n  recordAction(taskId: string, action: TaskActions, subAction?: any): void {\r\n    const actionRecord: TaskAction = {\r\n      taskIds: [taskId],\r\n      action,\r\n      subAction,\r\n      message: subAction\r\n        ? `Task ${taskId} ${action} (${subAction})`\r\n        : `Task ${taskId} ${action}`,\r\n    };\r\n    this.lastActionSubject.next(actionRecord);\r\n  }\r\n\r\n  /**\r\n   * Record a batch action.\r\n   * @param taskIds - Array of task IDs.\r\n   * @param action - Action performed (e.g., 'moved', 'updated').\r\n   * @param subAction - Optional sub-action details (e.g., 'updated type to X').\r\n   */\r\n  recordBatchAction(\r\n    taskIds: string[],\r\n    action: TaskActions,\r\n    subAction?: string\r\n  ): void {\r\n    const actionRecord: TaskAction = {\r\n      taskIds,\r\n      action,\r\n      subAction,\r\n      message: subAction\r\n        ? `${taskIds.length} tasks ${action} (${subAction})`\r\n        : `${taskIds.length} tasks ${action}`,\r\n    };\r\n    this.lastActionSubject.next(actionRecord);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the last recorded action.\r\n   * @returns The last TaskAction or null if no action was recorded.\r\n   */\r\n  getLastAction(): TaskAction | null {\r\n    return this.lastActionSubject.getValue();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskActions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "subAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "taskIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskApiStrategy",
            "id": "interface-TaskApiStrategy-18be2f08d4bf1d4c75d7235e5806d80e3f8ce8c41fd9c62235c85876953ab19f1b6c9214bebb06e285a884346217c2c4af00eeafa44ddb123112f7bb981ebe6a",
            "file": "src/app/models/service-strategies/task-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskoratorTask } from '../taskModelManager';\r\n\r\n// export interface TaskManagementStrategy {\r\n//   createTask(task: Task): Promise<Task>;\r\n//   updateTask(task: Task): Promise<void>;\r\n//   getTaskById(taskId: string): Promise<Task | undefined>;\r\n//   getLatestTaskId(): Promise<string | undefined>;\r\n//   getSuperOverlord(taskId: string): Promise<Task | undefined>;\r\n//   getOverlordChildren(overlordId: string): Promise<Task[] | undefined>;\r\n//   getTasks(): Promise<Task[]>;\r\n//   createTasks(tasks: Task[]): Promise<Task[]>;\r\n//   updateTasks(tasks: Task[]): Promise<void>;\r\n// }\r\n\r\nexport interface TaskCacheStrategy {\r\n  createTask(task: TaskoratorTask): void; // Add task to cache, no return needed\r\n  updateTask(task: TaskoratorTask): void; // Update existing task, no confirmation needed\r\n  getTaskById(\r\n    taskId: string\r\n  ): TaskoratorTask | null | Promise<TaskoratorTask | null>; // Fetch task, can be sync or async\r\n  clearCache(): void | Promise<void>; // Optional: Clear the cache, sync or async\r\n}\r\n\r\nexport interface TaskApiStrategy {\r\n  createTask(task: TaskoratorTask): Promise<TaskoratorTask | null>;\r\n  createTaskWithCustomId(\r\n    task: TaskoratorTask,\r\n    taskId: string\r\n  ): Promise<TaskoratorTask | null>;\r\n  updateTask(task: TaskoratorTask): Promise<boolean>;\r\n  getTaskById(taskId: string): Promise<TaskoratorTask | null>;\r\n  getLatestTaskId(): Promise<string | null>;\r\n  getSuperOverlord(taskId: string): Promise<TaskoratorTask | null>;\r\n  // getOverlordChildren(overlordId: string): Promise<Task[] | null>; //  TASK LIST API... not TASK API, as this is a list...\r\n  // getTasks(): Promise<Task[] | null>; //  TASK LIST API... not TASK API, as this is a list...\r\n  createTasks(tasks: TaskoratorTask[]): Promise<TaskoratorTask[] | null>; // should be in task batch but its ok...\r\n  updateTasks(tasks: TaskoratorTask[]): Promise<boolean>; // should be in task batch but its ok...\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskWithCustomId",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestTaskId",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string | null>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSuperOverlord",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "TaskCacheStrategy",
            "id": "interface-TaskCacheStrategy-18be2f08d4bf1d4c75d7235e5806d80e3f8ce8c41fd9c62235c85876953ab19f1b6c9214bebb06e285a884346217c2c4af00eeafa44ddb123112f7bb981ebe6a",
            "file": "src/app/models/service-strategies/task-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskoratorTask } from '../taskModelManager';\r\n\r\n// export interface TaskManagementStrategy {\r\n//   createTask(task: Task): Promise<Task>;\r\n//   updateTask(task: Task): Promise<void>;\r\n//   getTaskById(taskId: string): Promise<Task | undefined>;\r\n//   getLatestTaskId(): Promise<string | undefined>;\r\n//   getSuperOverlord(taskId: string): Promise<Task | undefined>;\r\n//   getOverlordChildren(overlordId: string): Promise<Task[] | undefined>;\r\n//   getTasks(): Promise<Task[]>;\r\n//   createTasks(tasks: Task[]): Promise<Task[]>;\r\n//   updateTasks(tasks: Task[]): Promise<void>;\r\n// }\r\n\r\nexport interface TaskCacheStrategy {\r\n  createTask(task: TaskoratorTask): void; // Add task to cache, no return needed\r\n  updateTask(task: TaskoratorTask): void; // Update existing task, no confirmation needed\r\n  getTaskById(\r\n    taskId: string\r\n  ): TaskoratorTask | null | Promise<TaskoratorTask | null>; // Fetch task, can be sync or async\r\n  clearCache(): void | Promise<void>; // Optional: Clear the cache, sync or async\r\n}\r\n\r\nexport interface TaskApiStrategy {\r\n  createTask(task: TaskoratorTask): Promise<TaskoratorTask | null>;\r\n  createTaskWithCustomId(\r\n    task: TaskoratorTask,\r\n    taskId: string\r\n  ): Promise<TaskoratorTask | null>;\r\n  updateTask(task: TaskoratorTask): Promise<boolean>;\r\n  getTaskById(taskId: string): Promise<TaskoratorTask | null>;\r\n  getLatestTaskId(): Promise<string | null>;\r\n  getSuperOverlord(taskId: string): Promise<TaskoratorTask | null>;\r\n  // getOverlordChildren(overlordId: string): Promise<Task[] | null>; //  TASK LIST API... not TASK API, as this is a list...\r\n  // getTasks(): Promise<Task[] | null>; //  TASK LIST API... not TASK API, as this is a list...\r\n  createTasks(tasks: TaskoratorTask[]): Promise<TaskoratorTask[] | null>; // should be in task batch but its ok...\r\n  updateTasks(tasks: TaskoratorTask[]): Promise<boolean>; // should be in task batch but its ok...\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void | Promise",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask | null | Promise",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "TaskData",
            "id": "interface-TaskData-e4b4c95465edf15a31b4e426832fa7f9aa48194299e8ce36f1f6931628b57d037095ddf4c07a9c554ee9ac00a0bc57b1299c970ba1a251ca0d1be5daa46b12a5",
            "file": "src/app/services/tasks/task-utility.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SelectedOverlordService } from './selected-overlord.service';\r\nimport { TaskService } from '../sync-api-cache/task.service';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\nimport { TreeService } from '../sync-api-cache/tree.service';\r\nimport { TaskNodeInfo } from '../../models/taskTree';\r\nimport { TaskUsage, TaskUsageService } from './task-usage.service';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\n\r\nexport interface TaskData {\r\n  task: ExtendedTask | null;\r\n  usage: TaskUsage | null;\r\n  node: TaskNodeInfo | null;\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskUtilityService {\r\n  constructor(\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskService: TaskService,\r\n    private treeService: TreeService,\r\n    private taskUsageService: TaskUsageService\r\n  ) {}\r\n\r\n  getSelectedOverlordId(): Observable<string | null> {\r\n    return this.selectedOverlordService.getSelectedOverlordObservable();\r\n  }\r\n\r\n  async getTaskData(id: string): Promise<TaskData | null> {\r\n    const usage: TaskUsage | null = this.taskUsageService.getTaskUsage(id);\r\n    const node: TaskNodeInfo | null =\r\n      this.treeService.getTaskTreeData(id) || null;\r\n    const task: ExtendedTask | null = await this.taskService.getTaskById(id);\r\n    const taskData: TaskData = { usage, node, task };\r\n    if (!usage && !node && !taskData) return null;\r\n    return taskData;\r\n  }\r\n\r\n  async getTaskById(id: string): Promise<ExtendedTask | null> {\r\n    return this.taskService.getTaskById(id);\r\n  }\r\n\r\n  getSelectedOverlord(): Observable<ExtendedTask | null> {\r\n    return this.selectedOverlordService.getSelectedOverlordObservable().pipe(\r\n      switchMap((id) => {\r\n        if (!id) {\r\n          return of(null); // Return an observable of null if no ID is present\r\n        }\r\n        return this.taskService.getTaskById(id).then((task) => task); // Convert the Promise to an Observable\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskNodeInfo | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "usage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskUsage | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskListApiStrategy",
            "id": "interface-TaskListApiStrategy-48b24b1f5a0c5d8f11d52b7dda9b9af240919fcfc79cbb77ab71cc4aa368fa1385a7e6090c318d9673b0eeb33e4d60221d9e0b3724927015238b64ac84124b48",
            "file": "src/app/models/service-strategies/task-list-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskListKey } from '../task-list-model';\r\nimport { TaskoratorTask } from '../taskModelManager';\r\nexport interface TaskListApiStrategy {\r\n  getLatestCreatedTasks(): Promise<TaskoratorTask[] | null>;\r\n  getLatestUpdatedTasks(): Promise<TaskoratorTask[] | null>;\r\n  getOverlordTasks(taskId: string): Promise<TaskoratorTask[] | null>; // same as overlord tasks but we move here for cleanliness\r\n  getSessionTasks(sessionId: string): Promise<TaskoratorTask[] | null>; // same as overlord tasks but we move here for cleanliness\r\n  getDailyTasks(): Promise<TaskoratorTask[] | null>;\r\n  getWeeklyTasks(): Promise<TaskoratorTask[] | null>;\r\n  getMonthlyTasks(): Promise<TaskoratorTask[] | null>;\r\n  getYearlyTasks(): Promise<TaskoratorTask[] | null>;\r\n  getFocusTasks(): Promise<TaskoratorTask[] | null>; // or getTasksFrom  Array(focusTasks:string[])... api allow access it maybe as we can read tree...\r\n  getFavoriteTasks(): Promise<TaskoratorTask[] | null>; // or getTasksFrom  Array(focusTasks:string[])... api allow access it maybe as we can read tree...\r\n  getFrogTasks(): Promise<TaskoratorTask[] | null>; // or getTasksFrom  Array(focusTasks:string[])... api allow access it maybe as we can read tree...\r\n  getTasksToSplit(): Promise<TaskoratorTask[] | null>; // big tasks, tasks that are not deep in tree? figure it out... to make tasks more doable to make project progress\r\n  getTasksToCrush(): Promise<TaskoratorTask[] | null>; // small tasks, tasks that are many in 1 parent use tree to find, to make lists and tasks more organized\r\n  getTasksByType(taskListType: TaskListKey): Promise<TaskoratorTask[] | null>;\r\n  getTasksFromIds(taskIds: string[]): Promise<TaskoratorTask[] | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "getDailyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFavoriteTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFocusTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFrogTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLatestCreatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLatestUpdatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOverlordTasks",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessionTasks",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByType",
                    "args": [
                        {
                            "name": "taskListType",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskListType",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksFromIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksToCrush",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTasksToSplit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWeeklyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getYearlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "TaskListCacheResult",
            "id": "interface-TaskListCacheResult-51288ec292bb8230e4718d11f5574d28e0afc0a782c93a1e3c8d82dc6d9785b95b4a4ac778b4684338c325c87582c5673cb61680185c7ae4d0bb57dd09f7f6bc",
            "file": "src/app/services/cache/task-id-cache.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskCacheService } from './task-cache.service';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\ninterface TaskListCacheResult {\r\n  tasksWithData: ExtendedTask[]; // Tasks with data in cache\r\n  taskIdsWithoutData: string[]; // Task IDs with no data in cache\r\n  hasGroupAndCachedTasks: boolean; // True if all tasks are in cache\r\n  hasGroupAndSomeCachedTasks: boolean; // True if some tasks are in cache\r\n  hasGroupAndEmptyTasks: boolean; // True if the list exists but has no tasks\r\n  hasGroupAndNotCachedTasks: boolean; // True if the list exists but has no tasks\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskIdCacheService {\r\n  private idCache = new Map<string, Set<string>>(); // Map group name -> task ID set\r\n  private taskToGroup = new Map<string, string>(); // Map task ID -> group name\r\n\r\n  constructor(private taskCacheService: TaskCacheService) {}\r\n\r\n  // when moving multiple tasks from various places\r\n  getTaskGroup(taskId: string): string | undefined {\r\n    return this.taskToGroup.get(taskId);\r\n  }\r\n\r\n  removeTaskFromGroup(groupName: string, taskId: string): void {\r\n    const groupChildren = this.idCache.get(groupName);\r\n    if (groupChildren) {\r\n      groupChildren.delete(taskId);\r\n      this.taskToGroup.delete(taskId);\r\n      if (groupChildren.size === 0) {\r\n        this.idCache.delete(groupName);\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteTask(taskId: string): void {\r\n    // Collect all groups the task belongs to\r\n    const groupsContainingTask: string[] = [];\r\n\r\n    // Find all groups containing the task\r\n    for (const [groupName, groupChildren] of this.idCache.entries()) {\r\n      if (groupChildren.has(taskId)) {\r\n        groupsContainingTask.push(groupName);\r\n      }\r\n    }\r\n\r\n    // Remove the task from all groups it belongs to\r\n    groupsContainingTask.forEach((groupName) => {\r\n      const groupChildren = this.idCache.get(groupName);\r\n      if (groupChildren) {\r\n        groupChildren.delete(taskId); // Remove task from group\r\n        if (groupChildren.size === 0) {\r\n          this.idCache.delete(groupName); // Delete group if empty\r\n        }\r\n      }\r\n    });\r\n\r\n    // Remove task-to-group mapping\r\n    this.taskToGroup.delete(taskId);\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.idCache.clear();\r\n    this.taskToGroup.clear();\r\n  }\r\n\r\n  // moveTask(taskId: string, fromGroup: string, toGroup: string): void {\r\n  //   this.removeTaskFromGroup(fromGroup, taskId);\r\n  //   this.addTaskToGroup(toGroup, taskId);\r\n  // }\r\n\r\n  moveTask(taskId: string, fromGroup: string, toGroup: string): void {\r\n    if (this.canEditGroup(fromGroup)) {\r\n      this.removeTaskFromGroup(fromGroup, taskId);\r\n    } else {\r\n      console.warn(`Cannot edit group ${fromGroup} for task removal.`);\r\n    }\r\n\r\n    if (this.canEditGroup(toGroup)) {\r\n      this.addTaskToGroup(toGroup, taskId);\r\n    } else {\r\n      console.warn(`Cannot edit group ${toGroup} for task addition.`);\r\n    }\r\n  }\r\n\r\n  getTasksByIds(taskIds: string[]): ExtendedTask[] {\r\n    return taskIds\r\n      .map((id) => this.taskCacheService.getTask(id))\r\n      .filter((task): task is ExtendedTask => !!task);\r\n  }\r\n\r\n  getListCacheState(groupName: string): TaskListCacheResult | null {\r\n    const cache = this.idCache.get(groupName);\r\n\r\n    if (!cache) return null;\r\n    const groupIds = Array.from(cache);\r\n    const tasksWithData = groupIds\r\n      .map((id) => this.taskCacheService.getTask(id))\r\n      .filter((task): task is ExtendedTask => !!task);\r\n\r\n    return {\r\n      tasksWithData,\r\n      taskIdsWithoutData: groupIds.filter(\r\n        (id) => !this.taskCacheService.hasTask(id)\r\n      ),\r\n      hasGroupAndCachedTasks: tasksWithData.length === groupIds.length,\r\n      hasGroupAndSomeCachedTasks:\r\n        tasksWithData.length > 0 && tasksWithData.length < groupIds.length,\r\n      hasGroupAndEmptyTasks: groupIds.length === 0,\r\n      hasGroupAndNotCachedTasks:\r\n        groupIds.length > 0 && tasksWithData.length === 0,\r\n    };\r\n  }\r\n\r\n  addTasksWithGroup(tasks: ExtendedTask[], groupName: string): void {\r\n    if (!this.idCache.has(groupName)) {\r\n      console.warn(\r\n        `Group ${groupName} does not exist. Skipping task association.`\r\n      );\r\n      return;\r\n    }\r\n    tasks.forEach((task) => {\r\n      this.taskCacheService.addTaskWithTime(task);\r\n      if (this.idCache.has(groupName)) {\r\n        // no point adding to group we don't have from server\r\n        this.addTaskToGroup(groupName, task.taskId);\r\n      }\r\n    });\r\n  }\r\n\r\n  canEditGroup(groupName: string): boolean {\r\n    // Returns true if the group exists in cache\r\n    return this.idCache.has(groupName);\r\n  }\r\n\r\n  createNewGroup(tasks: ExtendedTask[], groupName: string): void {\r\n    tasks.forEach((task) => {\r\n      this.taskCacheService.addTaskWithTime(task);\r\n      this.addTaskToGroup(groupName, task.taskId);\r\n    });\r\n  }\r\n\r\n  updateTasks(extendedTasks: ExtendedTask[]) {\r\n    // without group name, if we are not moving.. might aswell just update to cache\r\n    extendedTasks.forEach((t) => {\r\n      this.taskCacheService.addTask(t);\r\n    });\r\n  }\r\n\r\n  addTaskToGroup(groupName: string, taskId: string): void {\r\n    if (!this.idCache.has(groupName)) {\r\n      this.idCache.set(groupName, new Set());\r\n    }\r\n    this.idCache.get(groupName)?.add(taskId);\r\n    this.taskToGroup.set(taskId, groupName);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "hasGroupAndCachedTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "hasGroupAndEmptyTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hasGroupAndNotCachedTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hasGroupAndSomeCachedTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "taskIdsWithoutData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tasksWithData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskListKey",
            "id": "interface-TaskListKey-c5c065cf16b865256bd689ccdcdda0154b3e7daf1810b4117880eb2760facba113ddd56d486dae83da13fe951c283785b01fb7b9b5199ab9bcde8d80ffd89ebb",
            "file": "src/app/models/task-list-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExtendedTask, ROOT_TASK_ID } from './taskModelManager';\r\n\r\nexport interface TaskListRules {\r\n  id: string; // Unique identifier for the list\r\n  title: string; // Display name of the list\r\n  type: TaskListType; // Optional type, e.g., 'daily', 'latest'\r\n  parent: string; // Optional parent ID, for hierarchical lists\r\n  description: string; // Optional description for the list\r\n  // tasks: string[]; // Array of task IDs // we don't really want to make this list into an angular app wich its own cache and stuffs\r\n  rules: ListRules; // Optional rules for this list\r\n}\r\n\r\nexport enum TaskListType {\r\n  DAILY = 'daily',\r\n  WEEKLY = 'weekly',\r\n  MONTHLY = 'monthly',\r\n  YEARLY = 'yearly',\r\n  LATEST_UPDATED = 'latestUpdated',\r\n  LATEST_CREATED = 'latestCreated',\r\n  FOCUS = 'focus',\r\n  FROG = 'frog',\r\n  FAVORITE = 'favorite',\r\n  OVERLORD = 'overlord',\r\n  SESSION = 'session',\r\n}\r\n\r\nexport enum TaskListSubtype {\r\n  SETTINGS = 'settings',\r\n  SESSION = 'session',\r\n  REPEATING = 'repeating',\r\n  API = 'api',\r\n}\r\n\r\n// export enum TaskListKey {\r\n//   OVERLORD = 'overlord_',\r\n//   FOCUS = 'settings_focus',\r\n//   FROG = 'settings_frog',\r\n//   FAVORITE = 'settings_favorite',\r\n//   DAILY = 'repeating_daily',\r\n//   WEEKLY = 'repeating_weekly',\r\n//   MONTHLY = 'repeating_monthly',\r\n//   YEALRY = 'repeating_yearly',\r\n//   CREATED = 'latest_created',\r\n//   UPDATED = 'latest_updated',\r\n//   SESSION = 'session_',\r\n// }\r\n\r\nexport interface TaskListKey {\r\n  type: TaskListType;\r\n  data: TaskListSubtype | string; // task id, session name ...\r\n}\r\n\r\nexport interface ListRules {\r\n  filter: (task: ExtendedTask) => boolean; // A filter function for tasks\r\n  sorter: (a: ExtendedTask, b: ExtendedTask) => number; // A sort function\r\n  permissions: ListPermissions; // Permissions for actions\r\n}\r\n\r\nexport interface ListPermissions {\r\n  canAdd: boolean;\r\n  canMove: boolean;\r\n  canDelete: boolean;\r\n  canComplete: boolean;\r\n}\r\n\r\nexport function getIdFromKey(key: TaskListKey): string {\r\n  // if (key.type === TaskListType.OVERLORD || key.type === TaskListType.SESSION) {\r\n  //   return `${key.type}_${key.data}`;\r\n  // }\r\n  return `${key.type}_${key.data}`; // For static lists\r\n}\r\n\r\nexport const defaultTaskLists: TaskListRules[] = [\r\n  {\r\n    id: 'daily',\r\n    title: 'Daily Tasks',\r\n    type: TaskListType.DAILY,\r\n    description: 'Recurring daily tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'daily') {\r\n          return false;\r\n        }\r\n        const { startTime, endTime } = calculatePeriodTimes('daily');\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false, // this is loose list we can't just add tasks there (unless we allow it in future?)\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'weekly',\r\n    title: 'Weekly Tasks',\r\n    type: TaskListType.WEEKLY,\r\n    description: 'Recurring weekly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'weekly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('weekly');\r\n        // Check if the task falls outside the current daily period\r\n\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'monthly',\r\n    title: 'Monthly Tasks',\r\n    type: TaskListType.MONTHLY,\r\n    description: 'Recurring monthly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'monthly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('monthly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'yearly',\r\n    title: 'Yearly Tasks',\r\n    type: TaskListType.YEARLY,\r\n    description: 'Recurring yearly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'yearly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('yearly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'focus',\r\n    title: 'Focus Tasks',\r\n    type: TaskListType.FOCUS,\r\n    description: 'Tasks set as focus tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'frog',\r\n    title: 'Frog Tasks',\r\n    type: TaskListType.FROG,\r\n    description: 'Tasks set as \"eat the frog\" tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'favorites',\r\n    title: 'Favorite Tasks',\r\n    type: TaskListType.FAVORITE,\r\n    description: 'Tasks marked as favorites',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: true, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestCreated',\r\n    title: 'Latest Created Tasks',\r\n    type: TaskListType.LATEST_CREATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // we don't know which overlord to add it to\r\n        canMove: false, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestUpdated',\r\n    title: 'Latest Updated Tasks',\r\n    type: TaskListType.LATEST_UPDATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true, // we don't know which overlord to add it to\r\n        canMove: true, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'overlord_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Overlord Tasks',\r\n    type: TaskListType.OVERLORD,\r\n    description: 'Tasks associated with a specific overlord',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo' && task.taskId !== ROOT_TASK_ID, // Filter tasks that have an overlord\r\n      sorter: (a, b) => (b.priority || 0) - (a.priority || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true,\r\n        canMove: true,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific overlord ID when used\r\n  },\r\n  {\r\n    id: 'session_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Session Tasks',\r\n    type: TaskListType.SESSION,\r\n    description: 'Tasks specific to a particular session',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo', // Filter tasks that have a session ID\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // complex session situation, we can't really easily add, unless in future \"create task component can handle it\"\r\n        canMove: false, // don't know from where...\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific session ID when used\r\n  },\r\n];\r\n\r\nfunction filterTasks(\r\n  tasks: ExtendedTask[],\r\n  filterCompleted: boolean,\r\n  repeatInterval: string\r\n): ExtendedTask[] {\r\n  if (!filterCompleted) return tasks;\r\n\r\n  const { startTime, endTime } = calculatePeriodTimes(repeatInterval);\r\n\r\n  return tasks.filter((task) => {\r\n    const isOutsideCurrentPeriod =\r\n      task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n    return isOutsideCurrentPeriod;\r\n  });\r\n}\r\n\r\nfunction calculatePeriodTimes(repeatInterval: string): {\r\n  startTime: number;\r\n  endTime: number;\r\n} {\r\n  const BUFFER_HOURS = 12; // Adjustable buffer for tasks reappearing sooner.\r\n  const bufferMs = BUFFER_HOURS * 60 * 60 * 1000;\r\n  const currentDate = new Date();\r\n\r\n  let startTime: number;\r\n  let endTime: number;\r\n\r\n  switch (repeatInterval) {\r\n    case 'daily':\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n\r\n    case 'weekly':\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0); // Start of the week\r\n      startTime = startOfWeek.getTime();\r\n      endTime = startTime + 7 * 24 * 60 * 60 * 1000; // Start of the next week\r\n      break;\r\n\r\n    case 'monthly':\r\n      const startOfMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        1\r\n      );\r\n      startTime = startOfMonth.getTime();\r\n      const nextMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth() + 1,\r\n        1\r\n      );\r\n      endTime = nextMonth.getTime(); // Start of the next month\r\n      break;\r\n\r\n    case 'yearly':\r\n      const startOfYear = new Date(currentDate.getFullYear(), 0, 1);\r\n      startTime = startOfYear.getTime();\r\n      const nextYear = new Date(currentDate.getFullYear() + 1, 0, 1);\r\n      endTime = nextYear.getTime(); // Start of the next year\r\n      break;\r\n\r\n    default:\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n  }\r\n\r\n  // Apply buffer only to the next period\r\n  endTime += bufferMs;\r\n\r\n  return { startTime, endTime };\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListSubtype | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskListRules",
            "id": "interface-TaskListRules-c5c065cf16b865256bd689ccdcdda0154b3e7daf1810b4117880eb2760facba113ddd56d486dae83da13fe951c283785b01fb7b9b5199ab9bcde8d80ffd89ebb",
            "file": "src/app/models/task-list-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExtendedTask, ROOT_TASK_ID } from './taskModelManager';\r\n\r\nexport interface TaskListRules {\r\n  id: string; // Unique identifier for the list\r\n  title: string; // Display name of the list\r\n  type: TaskListType; // Optional type, e.g., 'daily', 'latest'\r\n  parent: string; // Optional parent ID, for hierarchical lists\r\n  description: string; // Optional description for the list\r\n  // tasks: string[]; // Array of task IDs // we don't really want to make this list into an angular app wich its own cache and stuffs\r\n  rules: ListRules; // Optional rules for this list\r\n}\r\n\r\nexport enum TaskListType {\r\n  DAILY = 'daily',\r\n  WEEKLY = 'weekly',\r\n  MONTHLY = 'monthly',\r\n  YEARLY = 'yearly',\r\n  LATEST_UPDATED = 'latestUpdated',\r\n  LATEST_CREATED = 'latestCreated',\r\n  FOCUS = 'focus',\r\n  FROG = 'frog',\r\n  FAVORITE = 'favorite',\r\n  OVERLORD = 'overlord',\r\n  SESSION = 'session',\r\n}\r\n\r\nexport enum TaskListSubtype {\r\n  SETTINGS = 'settings',\r\n  SESSION = 'session',\r\n  REPEATING = 'repeating',\r\n  API = 'api',\r\n}\r\n\r\n// export enum TaskListKey {\r\n//   OVERLORD = 'overlord_',\r\n//   FOCUS = 'settings_focus',\r\n//   FROG = 'settings_frog',\r\n//   FAVORITE = 'settings_favorite',\r\n//   DAILY = 'repeating_daily',\r\n//   WEEKLY = 'repeating_weekly',\r\n//   MONTHLY = 'repeating_monthly',\r\n//   YEALRY = 'repeating_yearly',\r\n//   CREATED = 'latest_created',\r\n//   UPDATED = 'latest_updated',\r\n//   SESSION = 'session_',\r\n// }\r\n\r\nexport interface TaskListKey {\r\n  type: TaskListType;\r\n  data: TaskListSubtype | string; // task id, session name ...\r\n}\r\n\r\nexport interface ListRules {\r\n  filter: (task: ExtendedTask) => boolean; // A filter function for tasks\r\n  sorter: (a: ExtendedTask, b: ExtendedTask) => number; // A sort function\r\n  permissions: ListPermissions; // Permissions for actions\r\n}\r\n\r\nexport interface ListPermissions {\r\n  canAdd: boolean;\r\n  canMove: boolean;\r\n  canDelete: boolean;\r\n  canComplete: boolean;\r\n}\r\n\r\nexport function getIdFromKey(key: TaskListKey): string {\r\n  // if (key.type === TaskListType.OVERLORD || key.type === TaskListType.SESSION) {\r\n  //   return `${key.type}_${key.data}`;\r\n  // }\r\n  return `${key.type}_${key.data}`; // For static lists\r\n}\r\n\r\nexport const defaultTaskLists: TaskListRules[] = [\r\n  {\r\n    id: 'daily',\r\n    title: 'Daily Tasks',\r\n    type: TaskListType.DAILY,\r\n    description: 'Recurring daily tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'daily') {\r\n          return false;\r\n        }\r\n        const { startTime, endTime } = calculatePeriodTimes('daily');\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false, // this is loose list we can't just add tasks there (unless we allow it in future?)\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'weekly',\r\n    title: 'Weekly Tasks',\r\n    type: TaskListType.WEEKLY,\r\n    description: 'Recurring weekly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'weekly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('weekly');\r\n        // Check if the task falls outside the current daily period\r\n\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'monthly',\r\n    title: 'Monthly Tasks',\r\n    type: TaskListType.MONTHLY,\r\n    description: 'Recurring monthly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'monthly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('monthly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'yearly',\r\n    title: 'Yearly Tasks',\r\n    type: TaskListType.YEARLY,\r\n    description: 'Recurring yearly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'yearly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('yearly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'focus',\r\n    title: 'Focus Tasks',\r\n    type: TaskListType.FOCUS,\r\n    description: 'Tasks set as focus tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'frog',\r\n    title: 'Frog Tasks',\r\n    type: TaskListType.FROG,\r\n    description: 'Tasks set as \"eat the frog\" tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'favorites',\r\n    title: 'Favorite Tasks',\r\n    type: TaskListType.FAVORITE,\r\n    description: 'Tasks marked as favorites',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: true, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestCreated',\r\n    title: 'Latest Created Tasks',\r\n    type: TaskListType.LATEST_CREATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // we don't know which overlord to add it to\r\n        canMove: false, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestUpdated',\r\n    title: 'Latest Updated Tasks',\r\n    type: TaskListType.LATEST_UPDATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true, // we don't know which overlord to add it to\r\n        canMove: true, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'overlord_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Overlord Tasks',\r\n    type: TaskListType.OVERLORD,\r\n    description: 'Tasks associated with a specific overlord',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo' && task.taskId !== ROOT_TASK_ID, // Filter tasks that have an overlord\r\n      sorter: (a, b) => (b.priority || 0) - (a.priority || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true,\r\n        canMove: true,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific overlord ID when used\r\n  },\r\n  {\r\n    id: 'session_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Session Tasks',\r\n    type: TaskListType.SESSION,\r\n    description: 'Tasks specific to a particular session',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo', // Filter tasks that have a session ID\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // complex session situation, we can't really easily add, unless in future \"create task component can handle it\"\r\n        canMove: false, // don't know from where...\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific session ID when used\r\n  },\r\n];\r\n\r\nfunction filterTasks(\r\n  tasks: ExtendedTask[],\r\n  filterCompleted: boolean,\r\n  repeatInterval: string\r\n): ExtendedTask[] {\r\n  if (!filterCompleted) return tasks;\r\n\r\n  const { startTime, endTime } = calculatePeriodTimes(repeatInterval);\r\n\r\n  return tasks.filter((task) => {\r\n    const isOutsideCurrentPeriod =\r\n      task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n    return isOutsideCurrentPeriod;\r\n  });\r\n}\r\n\r\nfunction calculatePeriodTimes(repeatInterval: string): {\r\n  startTime: number;\r\n  endTime: number;\r\n} {\r\n  const BUFFER_HOURS = 12; // Adjustable buffer for tasks reappearing sooner.\r\n  const bufferMs = BUFFER_HOURS * 60 * 60 * 1000;\r\n  const currentDate = new Date();\r\n\r\n  let startTime: number;\r\n  let endTime: number;\r\n\r\n  switch (repeatInterval) {\r\n    case 'daily':\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n\r\n    case 'weekly':\r\n      const startOfWeek = new Date(currentDate);\r\n      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\r\n      startOfWeek.setHours(0, 0, 0, 0); // Start of the week\r\n      startTime = startOfWeek.getTime();\r\n      endTime = startTime + 7 * 24 * 60 * 60 * 1000; // Start of the next week\r\n      break;\r\n\r\n    case 'monthly':\r\n      const startOfMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        1\r\n      );\r\n      startTime = startOfMonth.getTime();\r\n      const nextMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth() + 1,\r\n        1\r\n      );\r\n      endTime = nextMonth.getTime(); // Start of the next month\r\n      break;\r\n\r\n    case 'yearly':\r\n      const startOfYear = new Date(currentDate.getFullYear(), 0, 1);\r\n      startTime = startOfYear.getTime();\r\n      const nextYear = new Date(currentDate.getFullYear() + 1, 0, 1);\r\n      endTime = nextYear.getTime(); // Start of the next year\r\n      break;\r\n\r\n    default:\r\n      currentDate.setHours(0, 0, 0, 0); // Start of the day\r\n      startTime = currentDate.getTime();\r\n      endTime = startTime + 24 * 60 * 60 * 1000; // Start of the next day\r\n      break;\r\n  }\r\n\r\n  // Apply buffer only to the next period\r\n  endTime += bufferMs;\r\n\r\n  return { startTime, endTime };\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListRules",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskNodeInfo",
            "id": "interface-TaskNodeInfo-e577f84bccc5f932316ae06af2e33c7e4aae7aac70d95520313f652d71dce666e66676d7f10339540910a40ef2529e6e307e4b7a39f91cfbe9ce3300f0448720",
            "file": "src/app/models/taskTree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ROOT_TASK_ID, TaskStage } from './taskModelManager';\r\nexport interface TaskTreeNode {\r\n  taskId: string; // Unique identifier for the task\r\n  name: string; // Task name for quick identification\r\n  overlord: string | null; // Parent task ID or null for root\r\n  children: TaskTreeNode[]; // Array of child nodes\r\n  childrenCount: number; // Total number of direct children\r\n  completedChildrenCount: number; // Number of completed child tasks\r\n  connected: boolean; // Indicates if the node is connected to the tree\r\n  stage: TaskStage; // Task stage for more nuanced status tracking\r\n}\r\n\r\nexport interface TaskTree {\r\n  primarch: TaskTreeNode; // Main tree structure\r\n  abyss: TaskTreeNode[]; // Disconnected tasks\r\n  connected: boolean; // Indicates if the tree is fully connected\r\n  totalTasks: number;\r\n}\r\n\r\n// Abstracted details about a single task node\r\nexport interface TaskNodeInfo {\r\n  taskId: string; // Unique identifier for the task\r\n  stage: TaskStage; // Current stage of the task\r\n  overlord: string | null; // Parent task ID\r\n  childrenCount: number; // Total number of direct children\r\n  completedChildrenCount: number; // Number of completed children\r\n  connected: boolean; // Indicates connection to the tree\r\n}\r\n\r\nexport function getDefaultTree(): TaskTree {\r\n  const primarch: TaskTreeNode = {\r\n    taskId: ROOT_TASK_ID,\r\n    name: 'Primarch Node',\r\n    overlord: null,\r\n    children: [],\r\n    childrenCount: 0,\r\n    completedChildrenCount: 0,\r\n    connected: true,\r\n    stage: 'todo', // Default stage for the root\r\n  };\r\n\r\n  return {\r\n    primarch: primarch,\r\n    abyss: [], // Start with no disconnected tasks\r\n    connected: true, // Initially fully connected\r\n    totalTasks: 1, // root is a task...\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "childrenCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "completedChildrenCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "connected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "overlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "stage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskStage",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskoratorTask",
            "id": "interface-TaskoratorTask-20cc381878d66d015aab784b3f23d258eb1093e999f38712b533883e102c92d23141d15e5c8c92630dcf875f5537f616fe2b22932916f00b984ebd2574c255fc",
            "file": "src/app/models/taskModelManager.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TaskoratorTask {\r\n  taskId: string; // Unique identifier for the task\r\n  name: string;\r\n  todo: string;\r\n  why: string;\r\n  timeCreated: number; // UNIX timestamp in milliseconds\r\n  lastUpdated: number; // UNIX timestamp in milliseconds\r\n  timeEnd: number | null; // UNIX timestamp in milliseconds\r\n  duration: number; // Estimated time to complete the task in minutes or hours\r\n  overlord: string | null; // taskId of the parent task if it's part of a hierarchy\r\n  repeat: RepeatOptions;\r\n  status: TaskStatus; // Task status options\r\n  stage: TaskStage; // Task stage options\r\n  type: TaskType; // basically this defines size of project anyway\r\n  subtype: TaskSubtype; // good if code, we can make it pretty...\r\n  size: TaskSize; // we can delegate this to another owner or something, probably rename... its what action shall be taken ?\r\n  owner: string; // for future use of who does whose tasks\r\n  priority: number; // Task priority (1 to 10, for example)\r\n  backupLink: string; // github, file location, web link, nothing\r\n  imageUrl: string | null; // URL to the image file\r\n  imageDataUrl: string | null; // Base64 representation of the image\r\n  tags: string[]; // Array of tags associated with the task\r\n}\r\n\r\n// Utility method to generate unique IDs\r\nexport function getUniqueTaskId(): string {\r\n  return `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nexport const TASK_ACTIONS = [\r\n  'created',\r\n  'updated',\r\n  'completed',\r\n  'archived',\r\n  'deleted',\r\n  'renewed',\r\n  'seen',\r\n  'activated',\r\n  'moved',\r\n  'split',\r\n  'priorityIncreased',\r\n  'priorityDecreased',\r\n  'nameUpdated',\r\n  'todoUpdated',\r\n  'whyUpdated',\r\n  'tagAdded',\r\n  'tagRemoved',\r\n  'imageUpdated',\r\n  'backupLinkUpdated',\r\n  'repeatUpdated',\r\n  'timeEndUpdated',\r\n  'durationUpdated',\r\n  'statusUpdated',\r\n  'typeUpdated',\r\n  'subtypeUpdated',\r\n  'sizeUpdated',\r\n];\r\n\r\n// so the UI can react to task updates a bit better\r\nexport interface ExtendedTask extends TaskoratorTask {\r\n  isVisible: boolean; // For filtering visible tasks\r\n  animationState: 'highlighted' | 'normal' | 'removed'; // For UI animations\r\n}\r\n\r\nexport const maxPriority = 10;\r\nexport type TaskSize = 'do now' | 'split' | 'delegate';\r\nexport type TaskStage = 'seen' | 'completed' | 'todo' | 'archived' | 'deleted';\r\nexport type TaskStatus = 'active' | 'inactive';\r\nexport type RepeatOptions =\r\n  | 'once'\r\n  | 'never'\r\n  | 'half-hourly'\r\n  | 'hourly'\r\n  | 'half-daily'\r\n  | 'daily'\r\n  | 'weekly'\r\n  | 'half-monthly'\r\n  | 'monthly'\r\n  | 'three-monthly'\r\n  | 'half-yearly'\r\n  | 'yearly';\r\n\r\n/**\r\n * task type guesser:\r\n * if \"Task name caps\"- project\r\n * \"task name\" - todo\r\n * if TASK NAME -???\r\n */\r\nexport type TaskType =\r\n  | ''\r\n  | 'code'\r\n  | 'idea'\r\n  | 'note'\r\n  | 'todo'\r\n  | 'checklist'\r\n  | 'tree' // decision tree\r\n  | 'flowchart'\r\n  | 'task'\r\n  | 'next'\r\n  | 'job'\r\n  | 'feature'\r\n  | 'schedule'\r\n  | 'project'; // never ends, can be considered completed if all inside completed, buy maybe not\r\nexport type TaskSubtype =\r\n  | ''\r\n  | 'js'\r\n  | 'ts'\r\n  | 'html'\r\n  | 'css'\r\n  | 'sound'\r\n  | 'android'\r\n  | 'angular'\r\n  | 'nodejs'\r\n  | 'java'\r\n  | 'text'\r\n  | 'list';\r\n\r\nexport const ROOT_TASK_ID = '128';\r\nexport const ROOT_TASK_DESCRIPTION = 'Legends never die!';\r\n\r\nexport function getDefaultTask(): TaskoratorTask {\r\n  const now = Date.now(); // Current time in milliseconds\r\n  return {\r\n    taskId: '0',\r\n    name: '',\r\n    todo: '',\r\n    why: '',\r\n    timeCreated: now,\r\n    lastUpdated: now,\r\n    timeEnd: null,\r\n    duration: 0,\r\n    overlord: ROOT_TASK_ID,\r\n    repeat: 'once',\r\n    status: 'active',\r\n    stage: 'todo',\r\n    type: 'todo',\r\n    subtype: 'list',\r\n    size: 'do now',\r\n    owner: '',\r\n    priority: 5,\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: [],\r\n  };\r\n}\r\n\r\nexport function getRootTaskObject(): TaskoratorTask {\r\n  const now = Date.now(); // Current time in milliseconds\r\n  return {\r\n    taskId: ROOT_TASK_ID,\r\n    name: 'Primarch',\r\n    todo: '',\r\n    why: ROOT_TASK_DESCRIPTION,\r\n    timeCreated: now,\r\n    lastUpdated: now,\r\n    timeEnd: null,\r\n    duration: 0,\r\n    overlord: null,\r\n    repeat: 'once',\r\n    status: 'active',\r\n    stage: 'completed',\r\n    type: 'todo',\r\n    subtype: 'list',\r\n    size: 'do now',\r\n    owner: '',\r\n    priority: 5,\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: [],\r\n  };\r\n}\r\n\r\nexport const taskTableName = 'tasks_table';\r\nexport const sqlCreateTable = `CREATE TABLE ${taskTableName} (\r\n  taskId INTEGER PRIMARY KEY,\r\n  name TEXT NOT NULL,\r\n  todo TEXT NOT NULL,\r\n  why TEXT NOT NULL,\r\n  timeCreated TIMESTAMP NOT NULL,\r\n  timeEnd TIMESTAMP,\r\n  lastUpdated TIMESTAMP,\r\n  duration INTEGER NOT NULL,\r\n  overlord INTEGER,\r\n  repeat TEXT NOT NULL,\r\n  status TEXT NOT NULL,\r\n  stage TEXT NOT NULL,\r\n  type TEXT NOT NULL,\r\n  subtype TEXT NOT NULL,\r\n  size TEXT NOT NULL,\r\n  owner TEXT NOT NULL,\r\n  priority INTEGER NOT NULL,\r\n  backupLink TEXT NOT NULL,\r\n  imageUrl TEXT,\r\n  imageDataUrl TEXT,\r\n  tags TEXT NOT NULL\r\n);\r\n`;\r\n",
            "properties": [
                {
                    "name": "backupLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "imageDataUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lastUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "overlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "repeat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RepeatOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSize",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "stage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskStage",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSubtype",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "timeCreated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "timeEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "why",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskoratorUserProfile",
            "id": "interface-TaskoratorUserProfile-7881804b6fbf44ec1fbd13140884eecb3f3f7de37bd64f1cce832be78a31c852fb332058fdec1f34c0a5e388a5a8ec0129d8921d533be6a2d257e359fd54fca6",
            "file": "src/app/features/admin/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TaskoratorUserProfile {\r\n  canCreate: boolean;\r\n  allowedTemplates: string[];\r\n  canUseGpt: boolean;\r\n  role: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "allowedTemplates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "canCreate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "canUseGpt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskSession",
            "id": "interface-TaskSession-b4afbcda689f8f35c1e37d9e0b4449bef26b9d6e556594557d14b39119ed6c67acd9616ad1b0f4681317bb8a2292aa2f128bc176713184e0df437ffa903f8538",
            "file": "src/app/features/core/nexus/session/task-session.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TaskSession {\r\n  id: string;\r\n  name: string;\r\n  taskIds: string[];\r\n  duration: number; // Duration in seconds\r\n}\r\n",
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "taskIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskSessionApiStrategy",
            "id": "interface-TaskSessionApiStrategy-8c1fdda28e6af85ed7cf8ccd4da2125c18b075fe03d9ed03384f8126b2f49b95d292ae8e1be30d4accfeef1d051063b5ab7ef950e9f1eede4eef1fd864b2c291",
            "file": "src/app/models/service-strategies/session-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs/internal/Observable';\r\nimport { TaskSession } from '../../features/core/nexus/session/task-session.model';\r\n\r\nexport interface TaskSessionApiStrategy {\r\n  getSession(sessionId: string): Promise<TaskSession | null>;\r\n  getSessions(): Promise<TaskSession[]>;\r\n  updateSession(session: TaskSession): Promise<void>;\r\n  createSession(session: TaskSession): Promise<TaskSession | null>;\r\n}\r\n\r\nexport interface TaskSessionStrategy {\r\n  createSession(session: TaskSession): Promise<TaskSession | null>;\r\n  getSession(sessionId: string): Observable<TaskSession | null>;\r\n  getSessions(): Observable<TaskSession[]>;\r\n  updateSession(session: TaskSession): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession | null>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSession",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession | null>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSession[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "TaskSessionStrategy",
            "id": "interface-TaskSessionStrategy-8c1fdda28e6af85ed7cf8ccd4da2125c18b075fe03d9ed03384f8126b2f49b95d292ae8e1be30d4accfeef1d051063b5ab7ef950e9f1eede4eef1fd864b2c291",
            "file": "src/app/models/service-strategies/session-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs/internal/Observable';\r\nimport { TaskSession } from '../../features/core/nexus/session/task-session.model';\r\n\r\nexport interface TaskSessionApiStrategy {\r\n  getSession(sessionId: string): Promise<TaskSession | null>;\r\n  getSessions(): Promise<TaskSession[]>;\r\n  updateSession(session: TaskSession): Promise<void>;\r\n  createSession(session: TaskSession): Promise<TaskSession | null>;\r\n}\r\n\r\nexport interface TaskSessionStrategy {\r\n  createSession(session: TaskSession): Promise<TaskSession | null>;\r\n  getSession(sessionId: string): Observable<TaskSession | null>;\r\n  getSessions(): Observable<TaskSession[]>;\r\n  updateSession(session: TaskSession): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession | null>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSession",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskSession | null>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TaskSession[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "TaskSettings",
            "id": "interface-TaskSettings-03232c1a7d4ff154567f0c3871344b74d9a58d860d9834da5de6573a79ca9356ff75b8fce550b527dae73dfb82cc149d27349d7b4789d4d4f5b62333fc4a3f99",
            "file": "src/app/models/settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ROOT_TASK_ID } from './taskModelManager';\r\n\r\nexport interface TaskSettings {\r\n  moveTasksOnce: boolean;\r\n  isShowArchived: boolean;\r\n  isShowCompleted: boolean;\r\n  isShowSeen: boolean;\r\n  isShowDeleted: boolean;\r\n  isShowTodo: boolean; // same as below for now...\r\n  isShowMore: boolean; // task list will show tasks with more details, more than just a name\r\n  isShowCompletedRepeating: boolean; // i.e. if daily task is completed, shall we still show every day\r\n  completeButtonAction: CompleteButtonAction;\r\n  lastOverlordViewId: string;\r\n  focusTaskIds: string[];\r\n  frogTaskIds: string[];\r\n  favoriteTaskIds: string[];\r\n}\r\n\r\nexport function getDefaultTaskSettings() {\r\n  const settings: TaskSettings = {\r\n    isShowArchived: false,\r\n    isShowCompleted: false,\r\n    isShowSeen: true,\r\n    isShowDeleted: false,\r\n    isShowTodo: true,\r\n    completeButtonAction: 'completed',\r\n    lastOverlordViewId: ROOT_TASK_ID,\r\n    isShowMore: false,\r\n    focusTaskIds: [],\r\n    isShowCompletedRepeating: true,\r\n    frogTaskIds: [],\r\n    favoriteTaskIds: [],\r\n    moveTasksOnce: true,\r\n  };\r\n  return { ...settings };\r\n}\r\n\r\nexport type CompleteButtonAction =\r\n  | 'completed'\r\n  | 'seen'\r\n  | 'todo'\r\n  | 'archived'\r\n  | 'deleted'; // refresh will clear the \"removed\" status\r\n\r\nexport function getButtonTextName(actionName: CompleteButtonAction) {\r\n  switch (actionName) {\r\n    case 'completed':\r\n      return 'Complete';\r\n    case 'seen':\r\n      return 'Seen';\r\n    case 'todo':\r\n      return 'Todo';\r\n    case 'archived':\r\n      return 'Archive';\r\n    case 'deleted':\r\n      return 'Delete';\r\n    default:\r\n      return 'X';\r\n  }\r\n}\r\n\r\nexport function getButtonMatName(actionName: CompleteButtonAction): string {\r\n  switch (actionName) {\r\n    case 'completed':\r\n      return 'check'; // Represents a completed task with a checkmark inside a circle\r\n    case 'seen':\r\n      return 'visibility'; // Represents marking a task as seen\r\n    case 'todo':\r\n      return 'add_circle_outline'; // Represents adding a task to a todo list\r\n    case 'archived':\r\n      return 'archive'; // Represents archiving a task\r\n    case 'deleted':\r\n      return 'delete'; // Represents deleting a task\r\n    default:\r\n      return 'error_outline'; // Fallback icon indicating an unrecognized action\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "completeButtonAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompleteButtonAction",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "favoriteTaskIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "focusTaskIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "frogTaskIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isShowArchived",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isShowCompleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isShowCompletedRepeating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isShowDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isShowMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isShowSeen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isShowTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lastOverlordViewId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "moveTasksOnce",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskTemplate",
            "id": "interface-TaskTemplate-2694a0ca2cae6276ff6b2ed5794c168086c22dd5d4d289941a449c2a267f7238bfdc49738f72055a79fc11965d3245129b7648600cc0ac8f54542cc6ea80d9e9",
            "file": "src/app/features/admin/models/template.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskoratorTask } from '../../../models/taskModelManager';\r\n\r\nexport interface TaskTemplate {\r\n  id: string; // Unique identifier for the template\r\n  name: string; // Name of the template\r\n  authorId: string; // User ID of the template creator\r\n  authorName: string; // Name of the author, for easier display without additional queries\r\n  isPublic: boolean; // True if the template is publicly available\r\n  price?: number; // Optional price, relevant if the template is for sale\r\n  tasks: TaskoratorTask[]; // Array of tasks associated with this template\r\n}\r\n\r\nexport const getBaseTemplate = () => {\r\n  const template: TaskTemplate = {\r\n    id: '0',\r\n    name: 'base',\r\n    authorId: 'unknown',\r\n    authorName: 'anonymous',\r\n    isPublic: false,\r\n    tasks: [],\r\n  };\r\n  return { ...template };\r\n};\r\n",
            "properties": [
                {
                    "name": "authorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "authorName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskTemplate",
            "id": "interface-TaskTemplate-fce555424a387a4121314da39b292ec86db07fc87c727f8f5532e41ee6962cd1670399c02f69895654527943da49a262606910f3707682d75c264aee2457ea40-1",
            "file": "src/app/features/core/citadel/template/models/template.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TaskoratorTask } from '../../../../../models/taskModelManager';\r\n\r\nexport interface TaskTemplate {\r\n  id: string; // Unique identifier for the template\r\n  name: string; // Name of the template\r\n  authorId: string; // User ID of the template creator\r\n  authorName: string; // Name of the author, for easier display without additional queries\r\n  isPublic: boolean; // True if the template is publicly available\r\n  price?: number; // Optional price, relevant if the template is for sale\r\n  tasks: TaskoratorTask[]; // Array of tasks associated with this template\r\n}\r\n\r\nexport const getBaseTemplate = () => {\r\n  const template: TaskTemplate = {\r\n    id: '0',\r\n    name: 'base',\r\n    authorId: 'unknown',\r\n    authorName: 'anonymous',\r\n    isPublic: false,\r\n    tasks: [],\r\n  };\r\n  return { ...template };\r\n};\r\n",
            "properties": [
                {
                    "name": "authorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "authorName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TaskTemplate-1"
        },
        {
            "name": "TaskTree",
            "id": "interface-TaskTree-e577f84bccc5f932316ae06af2e33c7e4aae7aac70d95520313f652d71dce666e66676d7f10339540910a40ef2529e6e307e4b7a39f91cfbe9ce3300f0448720",
            "file": "src/app/models/taskTree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ROOT_TASK_ID, TaskStage } from './taskModelManager';\r\nexport interface TaskTreeNode {\r\n  taskId: string; // Unique identifier for the task\r\n  name: string; // Task name for quick identification\r\n  overlord: string | null; // Parent task ID or null for root\r\n  children: TaskTreeNode[]; // Array of child nodes\r\n  childrenCount: number; // Total number of direct children\r\n  completedChildrenCount: number; // Number of completed child tasks\r\n  connected: boolean; // Indicates if the node is connected to the tree\r\n  stage: TaskStage; // Task stage for more nuanced status tracking\r\n}\r\n\r\nexport interface TaskTree {\r\n  primarch: TaskTreeNode; // Main tree structure\r\n  abyss: TaskTreeNode[]; // Disconnected tasks\r\n  connected: boolean; // Indicates if the tree is fully connected\r\n  totalTasks: number;\r\n}\r\n\r\n// Abstracted details about a single task node\r\nexport interface TaskNodeInfo {\r\n  taskId: string; // Unique identifier for the task\r\n  stage: TaskStage; // Current stage of the task\r\n  overlord: string | null; // Parent task ID\r\n  childrenCount: number; // Total number of direct children\r\n  completedChildrenCount: number; // Number of completed children\r\n  connected: boolean; // Indicates connection to the tree\r\n}\r\n\r\nexport function getDefaultTree(): TaskTree {\r\n  const primarch: TaskTreeNode = {\r\n    taskId: ROOT_TASK_ID,\r\n    name: 'Primarch Node',\r\n    overlord: null,\r\n    children: [],\r\n    childrenCount: 0,\r\n    completedChildrenCount: 0,\r\n    connected: true,\r\n    stage: 'todo', // Default stage for the root\r\n  };\r\n\r\n  return {\r\n    primarch: primarch,\r\n    abyss: [], // Start with no disconnected tasks\r\n    connected: true, // Initially fully connected\r\n    totalTasks: 1, // root is a task...\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "abyss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "connected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "primarch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskTreeNode",
            "id": "interface-TaskTreeNode-e577f84bccc5f932316ae06af2e33c7e4aae7aac70d95520313f652d71dce666e66676d7f10339540910a40ef2529e6e307e4b7a39f91cfbe9ce3300f0448720",
            "file": "src/app/models/taskTree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ROOT_TASK_ID, TaskStage } from './taskModelManager';\r\nexport interface TaskTreeNode {\r\n  taskId: string; // Unique identifier for the task\r\n  name: string; // Task name for quick identification\r\n  overlord: string | null; // Parent task ID or null for root\r\n  children: TaskTreeNode[]; // Array of child nodes\r\n  childrenCount: number; // Total number of direct children\r\n  completedChildrenCount: number; // Number of completed child tasks\r\n  connected: boolean; // Indicates if the node is connected to the tree\r\n  stage: TaskStage; // Task stage for more nuanced status tracking\r\n}\r\n\r\nexport interface TaskTree {\r\n  primarch: TaskTreeNode; // Main tree structure\r\n  abyss: TaskTreeNode[]; // Disconnected tasks\r\n  connected: boolean; // Indicates if the tree is fully connected\r\n  totalTasks: number;\r\n}\r\n\r\n// Abstracted details about a single task node\r\nexport interface TaskNodeInfo {\r\n  taskId: string; // Unique identifier for the task\r\n  stage: TaskStage; // Current stage of the task\r\n  overlord: string | null; // Parent task ID\r\n  childrenCount: number; // Total number of direct children\r\n  completedChildrenCount: number; // Number of completed children\r\n  connected: boolean; // Indicates connection to the tree\r\n}\r\n\r\nexport function getDefaultTree(): TaskTree {\r\n  const primarch: TaskTreeNode = {\r\n    taskId: ROOT_TASK_ID,\r\n    name: 'Primarch Node',\r\n    overlord: null,\r\n    children: [],\r\n    childrenCount: 0,\r\n    completedChildrenCount: 0,\r\n    connected: true,\r\n    stage: 'todo', // Default stage for the root\r\n  };\r\n\r\n  return {\r\n    primarch: primarch,\r\n    abyss: [], // Start with no disconnected tasks\r\n    connected: true, // Initially fully connected\r\n    totalTasks: 1, // root is a task...\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "childrenCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "completedChildrenCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "connected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "overlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "stage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskStage",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskUsage",
            "id": "interface-TaskUsage-bf7d497a3b3d712787f9509aab452bdcd0ea30b2240d3319db026fedaa6a69969729b30bf81b52889f15ce709cd4165b92f1929c2405d408997c2fe2ad0c0e04",
            "file": "src/app/services/tasks/task-usage.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskUsageService {\r\n  private readonly storageKey = 'taskUsageData'; // Key for localStorage\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Increment the view count for a task.\r\n   * @param taskId - The ID of the task.\r\n   */\r\n  incrementTaskView(taskId: string): void {\r\n    const usageData = this.getUsageData();\r\n    const taskUsage = usageData[taskId] || { views: 0, lastViewed: 0 };\r\n\r\n    taskUsage.views++;\r\n    taskUsage.lastViewed = Date.now();\r\n\r\n    usageData[taskId] = taskUsage;\r\n    this.saveUsageData(usageData);\r\n  }\r\n\r\n  /**\r\n   * Get view count for a task.\r\n   * @param taskId - The ID of the task.\r\n   * @returns The number of views for the task.\r\n   */\r\n  getTaskViews(taskId: string): number {\r\n    const usageData = this.getUsageData();\r\n    return usageData[taskId]?.views || 0;\r\n  }\r\n\r\n  getTaskUsage(taskId: string): TaskUsage | null {\r\n    const usageData = this.getUsageData();\r\n    return usageData[taskId] || null;\r\n  }\r\n\r\n  /**\r\n   * Get all usage data.\r\n   * @returns An object mapping task IDs to usage details.\r\n   */\r\n  getAllUsageData(): { [taskId: string]: TaskUsage } {\r\n    return this.getUsageData();\r\n  }\r\n\r\n  /**\r\n   * Clear all usage data.\r\n   */\r\n  clearUsageData(): void {\r\n    localStorage.removeItem(this.storageKey);\r\n  }\r\n\r\n  /**\r\n   * Retrieve usage data from localStorage.\r\n   * @returns Parsed usage data object.\r\n   */\r\n  private getUsageData(): { [taskId: string]: TaskUsage } {\r\n    const data = localStorage.getItem(this.storageKey);\r\n    return data ? JSON.parse(data) : {};\r\n  }\r\n\r\n  /**\r\n   * Save usage data to localStorage.\r\n   * @param usageData - The usage data to save.\r\n   */\r\n  private saveUsageData(usageData: { [taskId: string]: TaskUsage }): void {\r\n    localStorage.setItem(this.storageKey, JSON.stringify(usageData));\r\n  }\r\n}\r\n\r\n/**\r\n * Interface for task usage details.\r\n */\r\nexport interface TaskUsage {\r\n  views: number; // Number of times the task was viewed\r\n  lastViewed: number; // Timestamp of the last view\r\n}\r\n",
            "properties": [
                {
                    "name": "lastViewed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for task usage details.</p>\n",
            "rawdescription": "\n\nInterface for task usage details.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskUserInfo",
            "id": "interface-TaskUserInfo-d06e2a003a8da208803c9f745afc15f3193d3c6fc891f198cb29227f82084bf7d63081adf832e1f83a70f33fe6ca2c176da9e11ff8fb32cf6ad2ca3ab9a80229",
            "file": "src/app/models/service-strategies/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RegisterUserResult {\r\n  success: boolean;\r\n  message: string;\r\n  userId?: string;\r\n}\r\n\r\nexport interface TaskUserInfo {\r\n  allowedTemplates: string[];\r\n  canCreate: boolean;\r\n  canUseGpt: boolean;\r\n  role: string;\r\n  registered: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "allowedTemplates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "canCreate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "canUseGpt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TreeApiStrategy",
            "id": "interface-TreeApiStrategy-e21fe02c19185646a3cfb433ff4bd61923bfc1b9241b355d3335f799d068e83749dab2515edc4d6f342450b3234762637aa737015ca021daeb329a529c5d8463",
            "file": "src/app/models/service-strategies/tree-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { TaskTree } from '../taskTree';\r\n\r\nexport interface TreeStrategy {\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null>;\r\n  getTree(): Observable<TaskTree | null>;\r\n  updateTree(taskTree: TaskTree): Promise<void>;\r\n}\r\nexport interface TreeCacheStrategy {\r\n  createTree(taskTree: TaskTree): void;\r\n  getTree(): Promise<TaskTree | null> | TaskTree | null;\r\n  updateTree(taskTree: TaskTree): void;\r\n}\r\nexport interface TreeApiStrategy {\r\n  getTree(): Promise<TaskTree | null>;\r\n  updateTree(taskTree: TaskTree): Promise<void>;\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "TreeCacheStrategy",
            "id": "interface-TreeCacheStrategy-e21fe02c19185646a3cfb433ff4bd61923bfc1b9241b355d3335f799d068e83749dab2515edc4d6f342450b3234762637aa737015ca021daeb329a529c5d8463",
            "file": "src/app/models/service-strategies/tree-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { TaskTree } from '../taskTree';\r\n\r\nexport interface TreeStrategy {\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null>;\r\n  getTree(): Observable<TaskTree | null>;\r\n  updateTree(taskTree: TaskTree): Promise<void>;\r\n}\r\nexport interface TreeCacheStrategy {\r\n  createTree(taskTree: TaskTree): void;\r\n  getTree(): Promise<TaskTree | null> | TaskTree | null;\r\n  updateTree(taskTree: TaskTree): void;\r\n}\r\nexport interface TreeApiStrategy {\r\n  getTree(): Promise<TaskTree | null>;\r\n  updateTree(taskTree: TaskTree): Promise<void>;\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise | TaskTree | null",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "TreeNode",
            "id": "interface-TreeNode-d79b2a4fd722e2ad9ade62a10a569ff63b0ea561ad076ac7538d4f6de051f3b0d5398771301ebad4a626095de534b9df243ed88bea01aff06a96cb5ba45d692b",
            "file": "src/app/features/core/vortex/tree-view/tree-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport * as d3 from 'd3';\r\nimport { ZoomBehavior, Selection, zoomIdentity } from 'd3';\r\nimport { TaskTreeNode, TaskTree } from '../../../../models/taskTree';\r\nimport { TreeService } from '../../../../services/sync-api-cache/tree.service';\r\n\r\ninterface TreeNode extends TaskTreeNode {\r\n  x?: number;\r\n  y?: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-tree-view',\r\n  standalone: true,\r\n  templateUrl: './tree-view.component.html',\r\n  styleUrls: ['./tree-view.component.css'],\r\n})\r\nexport class TreeViewComponent implements OnInit, OnChanges {\r\n  @Input() treeInput: TaskTree | null = null;\r\n  currentNode: TaskTreeNode | null = null;\r\n  originalNode: TaskTreeNode | null = null;\r\n\r\n  private svg: Selection<SVGGElement, unknown, HTMLElement, any> | undefined;\r\n  private treemap: d3.TreeLayout<TreeNode> | undefined;\r\n  private treeData: d3.HierarchyNode<TreeNode> | undefined;\r\n\r\n  maxTasksToShow = 5;\r\n  showFilteredTree = true;\r\n  showCompletedTasks = false;\r\n  originalTree: TaskTree | undefined;\r\n\r\n  constructor(private treeService: TreeService) {}\r\n\r\n  ngOnInit() {\r\n    if (this.treeInput) {\r\n      console.log('tree from input');\r\n      this.renderTree(this.treeInput);\r\n    } else {\r\n      this.initTree();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['treeInput']) {\r\n      const newTree = changes['treeInput'].currentValue as TaskTree | null;\r\n      if (newTree) {\r\n        console.log('tree from input');\r\n        this.renderTree(newTree);\r\n      } else {\r\n        this.initTree();\r\n      }\r\n    }\r\n  }\r\n\r\n  // ...\r\n\r\n  private renderTree(tree: TaskTree) {\r\n    this.originalNode = tree.primarch;\r\n    this.currentNode = tree.primarch;\r\n\r\n    let renderedTree: TaskTree;\r\n\r\n    // if (this.showFilteredTree) {\r\n    renderedTree = {\r\n      ...tree,\r\n      primarch: this.filterTree(tree.primarch),\r\n    };\r\n\r\n    const nodeCount = this.countNodes(renderedTree.primarch);\r\n    const margin = { top: 20, right: 220, bottom: 30, left: 220 };\r\n    const width = Math.max(960, nodeCount * 50) - margin.left - margin.right;\r\n    const height = Math.max(600, nodeCount * 30) - margin.top - margin.bottom;\r\n\r\n    this.svg = this.createSvg(margin, width, height);\r\n    this.treemap = this.createTreeMap(height, width);\r\n    this.treeData = this.createTreeData(renderedTree.primarch);\r\n\r\n    this.updateTree();\r\n  }\r\n\r\n  private zoomToNode(node: d3.HierarchyNode<TreeNode>) {\r\n    if (!this.originalTree) return;\r\n    const originalNode = this.findNodeInTree(\r\n      this.originalTree.primarch,\r\n      node.data.taskId\r\n    );\r\n    if (originalNode) {\r\n      this.originalNode = originalNode;\r\n      this.currentNode = originalNode;\r\n\r\n      const filteredNode = this.filterTree(originalNode);\r\n      this.renderTreeFromCurrentNode(filteredNode);\r\n    }\r\n  }\r\n\r\n  toggleFilteredTree() {\r\n    this.showFilteredTree = !this.showFilteredTree;\r\n    if (this.originalNode) {\r\n      // if (this.showFilteredTree) {\r\n      const filteredNode = this.filterTree(this.originalNode);\r\n      this.renderTreeFromCurrentNode(filteredNode);\r\n    }\r\n  }\r\n\r\n  toggleFilteredCompletedTree() {\r\n    this.showCompletedTasks = !this.showCompletedTasks;\r\n    if (this.originalNode) {\r\n      // if (this.showFilteredTree) {\r\n      const filteredNode = this.filterTree(this.originalNode);\r\n      this.renderTreeFromCurrentNode(filteredNode);\r\n    }\r\n  }\r\n\r\n  private findNodeInTree(node: TaskTreeNode, id: string): TaskTreeNode | null {\r\n    if (node.taskId === id) {\r\n      return node;\r\n    }\r\n\r\n    if (node.children) {\r\n      for (const child of node.children) {\r\n        const foundNode = this.findNodeInTree(child, id);\r\n        if (foundNode) {\r\n          return foundNode;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private initTree() {\r\n    this.treeService.getTree().subscribe((tree) => {\r\n      console.log(tree);\r\n      if (tree) {\r\n        this.renderTree(tree);\r\n        this.originalTree = tree;\r\n      }\r\n    });\r\n  }\r\n\r\n  filterCompletedTasks(node: TaskTreeNode): TreeNode | null {\r\n    if (node.stage === 'completed') {\r\n      return null; // Exclude this node\r\n    }\r\n\r\n    const treeNode: TreeNode = { ...node }; // Adjust this according to your actual conversion logic if necessary\r\n\r\n    if (node.children) {\r\n      // Recursively filter children, removing nulls\r\n      treeNode.children = node.children\r\n        .map(this.filterCompletedTasks)\r\n        .filter((child) => child !== null) as TreeNode[];\r\n    }\r\n\r\n    return treeNode;\r\n  }\r\n\r\n  private renderTreeFromCurrentNode(node: TaskTreeNode) {\r\n    let renderedNode: TaskTreeNode;\r\n    renderedNode = this.filterTree(node);\r\n\r\n    this.currentNode = renderedNode;\r\n\r\n    const nodeCount = this.countNodes(renderedNode);\r\n    const margin = { top: 20, right: 220, bottom: 30, left: 220 };\r\n    const width = Math.max(960, nodeCount * 50) - margin.left - margin.right;\r\n    const height = Math.max(600, nodeCount * 30) - margin.top - margin.bottom;\r\n\r\n    this.svg = this.createSvg(margin, width, height);\r\n    this.treemap = this.createTreeMap(height, width);\r\n    this.treeData = this.createTreeData(renderedNode);\r\n\r\n    this.updateTree();\r\n  }\r\n\r\n  resetTree() {\r\n    if (this.treeInput) {\r\n      this.currentNode = this.treeInput.primarch;\r\n      this.renderTreeFromCurrentNode(this.treeInput.primarch);\r\n    } else {\r\n      this.treeInput = null;\r\n      this.initTree();\r\n    }\r\n  }\r\n\r\n  private filterTree(node: TaskTreeNode): TaskTreeNode {\r\n    // Start with a copy of the current node, but clear its children to be populated later\r\n    const filteredNode: TaskTreeNode = {\r\n      ...node,\r\n      children: [],\r\n    };\r\n\r\n    if (node.children) {\r\n      // Filter children based on whether they are completed and showCompletedTasks flag\r\n      const filteredChildren = node.children.filter(\r\n        (child) => this.showCompletedTasks || child.stage !== 'completed'\r\n      );\r\n\r\n      // Recursively filter the remaining children\r\n      filteredNode.children = filteredChildren.map((child) =>\r\n        this.filterTree(child)\r\n      );\r\n\r\n      // If showing a filtered tree, limit the number of children\r\n      if (this.showFilteredTree) {\r\n        filteredNode.children = filteredNode.children.slice(\r\n          0,\r\n          this.maxTasksToShow\r\n        );\r\n      }\r\n    }\r\n\r\n    return filteredNode;\r\n  }\r\n\r\n  private countNodes(node: TaskTreeNode): number {\r\n    let count = 1;\r\n    if (node.children) {\r\n      for (const child of node.children) {\r\n        count += this.countNodes(child);\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  private createSvg(margin: any, width: number, height: number) {\r\n    d3.select('#tree-container').selectAll('svg').remove();\r\n\r\n    const svgContainer: Selection<SVGSVGElement, unknown, HTMLElement, any> = d3\r\n      .select('#tree-container')\r\n      .append('svg')\r\n      .attr(\r\n        'viewBox',\r\n        `0 0 ${width + margin.left + margin.right} ${\r\n          height - 2 * margin.top - margin.bottom\r\n        }`\r\n      )\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    const svgGroup = svgContainer\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    const zoomBehavior: ZoomBehavior<SVGSVGElement, unknown> = d3\r\n      .zoom<SVGSVGElement, unknown>()\r\n      .scaleExtent([0.3, 100])\r\n      .on('zoom', (event) => {\r\n        svgGroup.attr('transform', event.transform.toString());\r\n      });\r\n\r\n    svgContainer.call(zoomBehavior);\r\n\r\n    const initialTransform = d3.zoomIdentity.translate(width / 2, 0).scale(0.7);\r\n    svgContainer.call(zoomBehavior.transform, initialTransform);\r\n\r\n    return svgGroup;\r\n  }\r\n\r\n  private createTreeMap(height: number, width: number) {\r\n    return d3\r\n      .tree<TreeNode>()\r\n      .size([height, width])\r\n      .separation((a, b) => {\r\n        return a.parent == b.parent ? 2 : 3; // Increase the separation values\r\n      });\r\n  }\r\n\r\n  private createTreeData(root: TaskTreeNode) {\r\n    const nodes = d3.hierarchy<TreeNode>(\r\n      root as TreeNode,\r\n      (d) => d.children as TreeNode[]\r\n    );\r\n    return this.treemap!(nodes);\r\n  }\r\n\r\n  private renderLinks() {\r\n    this.svg!.selectAll('.link')\r\n      .data(this.treeData!.descendants().slice(1))\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', 'link')\r\n      .attr('d', (d: any) => {\r\n        return `M${d.parent.y},${d.parent.x}\r\n              C${(d.parent.y + d.y) / 2},${d.parent.x}\r\n               ${(d.parent.y + d.y) / 2},${d.x}\r\n               ${d.y},${d.x}`;\r\n      })\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'grey');\r\n  }\r\n  private updateTree() {\r\n    if (!this.svg) return;\r\n\r\n    const nodeCount = this.countNodes(this.treeData!.data);\r\n    const margin = { top: 20, right: 220, bottom: 30, left: 220 };\r\n    const width = Math.max(960, nodeCount * 50) - margin.left - margin.right;\r\n    const height = Math.max(600, nodeCount * 30) - margin.top - margin.bottom;\r\n\r\n    this.svg.attr(\r\n      'viewBox',\r\n      `0 0 ${width + margin.left + margin.right} ${\r\n        height - 2 * margin.top - margin.bottom\r\n      }`\r\n    );\r\n    this.treemap!.size([height, width]);\r\n\r\n    // Remove existing links and nodes\r\n    this.svg.selectAll('.link').remove();\r\n    this.svg.selectAll('.node').remove();\r\n\r\n    // Render the updated tree\r\n    this.renderLinks();\r\n    this.renderNodes();\r\n\r\n    // Reset the zoom level\r\n    const initialTransform = d3.zoomIdentity.translate(width / 2, 0).scale(0.7);\r\n    const svgContainer = d3.select<SVGSVGElement, unknown>(\r\n      '#tree-container svg'\r\n    );\r\n    svgContainer.call(\r\n      d3.zoom<SVGSVGElement, unknown>().transform,\r\n      initialTransform\r\n    );\r\n  }\r\n\r\n  private renderNodes() {\r\n    const nodes = this.svg!.selectAll('.node')\r\n      .data(this.treeData!.descendants())\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .attr('cursor', 'pointer')\r\n      .attr('transform', (d: any) => `translate(${d.y},${d.x})`);\r\n\r\n    nodes\r\n      .append('circle')\r\n      .attr('r', 5) // Increased radius for better visibility\r\n      .attr('fill', (d: any) => {\r\n        switch (d.data.stage) {\r\n          case 'todo':\r\n            return '#27ae60'; // Green\r\n          case 'completed':\r\n            return '#3498db'; // Blue\r\n          case 'deleted':\r\n            return '#95a5a6'; // Gray\r\n          default:\r\n            return '#e74c3c'; // Default red for undefined\r\n        }\r\n      })\r\n      .attr('stroke', (d: any) => {\r\n        return d.data.stage === 'deleted' ? '#7f8c8d' : '#2c3e50';\r\n      })\r\n      .attr('stroke-width', 2)\r\n      .style('stroke-dasharray', (d: any) =>\r\n        d.data.stage === 'deleted' ? '4 2' : '0'\r\n      ); // Dashed for deleted\r\n\r\n    nodes.on('click', (event: any, d: any) => {\r\n      this.zoomToNode(d);\r\n    });\r\n\r\n    nodes.each(function (d: any, i: any, nodes: any) {\r\n      const node = d3.select(nodes[i]);\r\n\r\n      const textElement = node\r\n        .append('text')\r\n        .attr('dy', '.35em')\r\n        .attr('x', (d: any) => (d.children ? -20 : 20))\r\n        .attr('text-anchor', (d: any) => (d.children ? 'end' : 'start'))\r\n        .text((d: any) => `${d.data.name} (${d.data.stage})`) // Added stage in text for clarity\r\n        .attr('font-family', 'Arial')\r\n        .attr('font-size', '14px')\r\n        .attr('fill', '#2c3e50')\r\n        .node();\r\n\r\n      if (textElement) {\r\n        const bbox = textElement.getBBox();\r\n        const padding = 6;\r\n        node\r\n          .insert('rect', 'text')\r\n          .attr('x', bbox.x - padding)\r\n          .attr('y', bbox.y - padding)\r\n          .attr('width', bbox.width + 2 * padding)\r\n          .attr('height', bbox.height + 2 * padding)\r\n          .attr('rx', 8)\r\n          .attr('ry', 8)\r\n          .attr('fill', '#f9f9f9') // Subtle background\r\n          .attr('stroke', '#d0d0d0') // Lighter border\r\n          .attr('stroke-width', 1)\r\n          .lower();\r\n      }\r\n    });\r\n\r\n    // Add tooltips for more information\r\n    nodes\r\n      .append('title')\r\n      .text((d: any) => `Task: ${d.data.name}\\nStage: ${d.data.stage}`);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "TaskTreeNode"
            ]
        },
        {
            "name": "TreeStrategy",
            "id": "interface-TreeStrategy-e21fe02c19185646a3cfb433ff4bd61923bfc1b9241b355d3335f799d068e83749dab2515edc4d6f342450b3234762637aa737015ca021daeb329a529c5d8463",
            "file": "src/app/models/service-strategies/tree-strategy.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { TaskTree } from '../taskTree';\r\n\r\nexport interface TreeStrategy {\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null>;\r\n  getTree(): Observable<TaskTree | null>;\r\n  updateTree(taskTree: TaskTree): Promise<void>;\r\n}\r\nexport interface TreeCacheStrategy {\r\n  createTree(taskTree: TaskTree): void;\r\n  getTree(): Promise<TaskTree | null> | TaskTree | null;\r\n  updateTree(taskTree: TaskTree): void;\r\n}\r\nexport interface TreeApiStrategy {\r\n  getTree(): Promise<TaskTree | null>;\r\n  updateTree(taskTree: TaskTree): Promise<void>;\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TaskTree | null>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AdminService",
            "id": "injectable-AdminService-2a6cbcfb378fd19cabb88e56dcdd678f3cc44a2f56037bfbe64f5b27c2995450d46c2db71b15450f324e16f3afabb922134f625d1b3fe775f026b02cca535934",
            "file": "src/app/features/admin/services/admin.service.ts",
            "properties": [
                {
                    "name": "userProfile",
                    "defaultValue": "{\r\n    canCreate: false,\r\n    allowedTemplates: [], // Initially empty, or predefined IDs could be listed here\r\n    canUseGpt: false,\r\n    role: 'basic',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorUserProfile",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [
                {
                    "name": "createTemplate",
                    "args": [
                        {
                            "name": "template",
                            "type": "TaskTemplate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TaskTemplate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTemplateWithTasks",
                    "args": [
                        {
                            "name": "templateData",
                            "type": "TaskTemplate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateData",
                            "type": "TaskTemplate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAllTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask[]>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": true,
                    "deprecationMessage": "do not use, delete, only use once to fix my tasks...",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "getTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTemplate | null>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserAdmin",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  doc,\r\n  updateDoc,\r\n  writeBatch,\r\n  query,\r\n  where,\r\n  limit,\r\n  orderBy,\r\n  getDoc,\r\n  setDoc,\r\n  getDocs,\r\n  runTransaction,\r\n} from '@angular/fire/firestore';\r\nimport { TaskoratorUserProfile } from '../models/user';\r\nimport { TaskTemplate } from '../models/template';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminService {\r\n  userProfile: TaskoratorUserProfile = {\r\n    canCreate: false,\r\n    allowedTemplates: [], // Initially empty, or predefined IDs could be listed here\r\n    canUseGpt: false,\r\n    role: 'basic',\r\n  };\r\n  constructor(private firestore: Firestore) {}\r\n\r\n  getUser(userId: string): unknown {\r\n    // firestore = this.firestore;\r\n    // userBaseRef = doc(firestore, `users/${userId}`);\r\n    return undefined;\r\n  }\r\n\r\n  isUserAdmin(userId: string): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @deprecated do not use, delete, only use once to fix my tasks...\r\n   */\r\n  async fetchAllTasks(): Promise<TaskoratorTask[]> {\r\n    const taskCollectionRef = collection(this.firestore, 'tasks');\r\n    const querySnapshot = await getDocs(taskCollectionRef);\r\n    return querySnapshot.docs.map((doc) => doc.data() as TaskoratorTask);\r\n  }\r\n\r\n  async createTemplate(template: TaskTemplate): Promise<void> {\r\n    const templateRef = doc(collection(this.firestore, 'templates'));\r\n    return setDoc(templateRef, template);\r\n  }\r\n\r\n  async getTemplate(templateId: string): Promise<TaskTemplate | null> {\r\n    const templateRef = doc(this.firestore, `templates/${templateId}`);\r\n    const templateSnap = await getDoc(templateRef);\r\n    return templateSnap.exists() ? (templateSnap.data() as TaskTemplate) : null;\r\n  }\r\n\r\n  async createTemplateWithTasks(templateData: TaskTemplate): Promise<void> {\r\n    const batch = writeBatch(this.firestore);\r\n    const templateRef = doc(collection(this.firestore, 'templates'));\r\n    batch.set(templateRef, { ...templateData, id: templateRef.id }); // Set template data with a new ID\r\n\r\n    // Adding tasks to the template\r\n    templateData.tasks.forEach((task) => {\r\n      const taskRef = doc(\r\n        collection(this.firestore, `templates/${templateRef.id}/tasks`)\r\n      );\r\n      batch.set(taskRef, task);\r\n    });\r\n\r\n    return await batch.commit(); // Commit the batch to save all changes in one go\r\n  }\r\n\r\n  // firebase database: tasks, test, users\r\n  // move tasks to templates with new id, which is probably created randomly\r\n  // let me get that template on demand\r\n  // create interface for such a template\r\n}\r\n\r\n// firebase templates\r\n// the actual reference to templates are not created yet\r\n// rules_version = '2';\r\n// service cloud.firestore {\r\n//   match /databases/{database}/documents {\r\n\r\n//     // Ensure all users are authenticated to interact with any collection\r\n//     match /{document=**} {\r\n//       allow read, write: if request.auth != null;\r\n//     }\r\n\r\n//     // Users collection specific rules\r\n//     match /users/{userId} {\r\n//       // Allow users to read their own profile\r\n//       allow read: if request.auth.uid == userId;\r\n\r\n//       // Allow users to update their own profile but not their role or permissions fields\r\n//       allow update: if request.auth.uid == userId &&\r\n//         !(request.resource.data.keys().hasAny(['canCreate', 'allowedTemplates', 'canUseGpt', 'role']));\r\n\r\n//       // Prevent any user from changing their role or permissions fields\r\n//       allow write: if false;\r\n//     }\r\n\r\n//     // Templates collection specific rules\r\n//     match /templates/{templateId} {\r\n//       // Allow read if the template is public or if user has the specific template ID in their 'allowedTemplates'\r\n//       allow read: if resource.data.public == true ||\r\n//         (request.auth.uid != null && templateId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.allowedTemplates);\r\n\r\n//       // Allow users to create new templates if they have the 'canCreateTemplates' permission\r\n//       allow create: if request.auth.uid != null &&\r\n//         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.canCreate == true;\r\n\r\n//       // General write permissions should still ensure that the user is authenticated\r\n//       allow write: if request.auth.uid != null;\r\n//     }\r\n//   }\r\n// }\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ApiFirebaseService",
            "id": "injectable-ApiFirebaseService-c8d03ecb7a0f8363c3eec9e80ea578dd6ad28d912374b06ebb03121811dd26f05671b1cfc248cec624834ff27cab9c87bbf6f1b8a9a2bebfb294cae6c008e514",
            "file": "src/app/services/core/api-firebase.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskWithCustomId",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDailyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFavoriteTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFocusTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFrogTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLatestCreatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLatestTaskId",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string | null>",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLatestUpdatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOverlordChildren",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlordTasks",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSessionTasks",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSuperOverlord",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTasksByType",
                    "args": [
                        {
                            "name": "taskListType",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskListType",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksFromIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksToCrush",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTasksToSplit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | undefined>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWeeklyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getYearlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<RegisterUserResult>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\nimport { Score } from '../../models/score';\r\nimport {\r\n  RegisterUserResult,\r\n  TaskUserInfo,\r\n} from '../../models/service-strategies/user';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { getUniqueTaskId, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskTree } from '../../models/taskTree';\r\nimport { TaskApiService } from '../api/task-api.service';\r\nimport { TaskSettingsApiService } from '../api/task-settings-api.service';\r\nimport { TaskScoreApiService } from '../api/task-score-api.service';\r\nimport { TaskTreeApiService } from '../api/task-tree-api.service';\r\nimport { TaskListApiService } from '../api/task-list-api.service';\r\nimport { RegisterApiService } from '../api/register-api.service';\r\nimport { KeyApiService } from '../api/key-api.service';\r\nimport { UserApiService } from '../api/user-api.service';\r\nimport { TaskListKey } from '../../models/task-list-model';\r\nimport { RegistrationData } from '../../models/service-strategies/registration-strategy';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiFirebaseService implements ApiStrategy {\r\n  constructor(\r\n    private registerService: RegisterApiService,\r\n    private taskService: TaskApiService,\r\n    private taskListService: TaskListApiService,\r\n    private settingsService: TaskSettingsApiService,\r\n    private scoreService: TaskScoreApiService,\r\n    private treeService: TaskTreeApiService\r\n  ) {}\r\n\r\n  generateApiKey(): void {\r\n    this.registerService.generateApiKey();\r\n  }\r\n\r\n  createUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    return this.registerService.createUserInfo(userInfo);\r\n  }\r\n\r\n  updateUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    return this.registerService.updateUserInfo(userInfo);\r\n  }\r\n\r\n  register(registrationData: RegistrationData): Promise<RegisterUserResult> {\r\n    return this.registerService.register(registrationData);\r\n  }\r\n\r\n  getUserInfo(): Promise<TaskUserInfo | undefined> {\r\n    return this.registerService.getUserInfo();\r\n  }\r\n\r\n  deleteUser(): Promise<void> {\r\n    return this.registerService.deleteCurrentUser();\r\n  }\r\n\r\n  getLatestCreatedTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getLatestCreatedTasks();\r\n  }\r\n\r\n  getLatestUpdatedTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getLatestUpdatedTasks();\r\n  }\r\n\r\n  getOverlordTasks(taskId: string): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getOverlordTasks(taskId);\r\n  }\r\n\r\n  getSessionTasks(sessionId: string): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getSessionTasks(sessionId);\r\n  }\r\n\r\n  getDailyTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getDailyTasks();\r\n  }\r\n\r\n  getWeeklyTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getWeeklyTasks();\r\n  }\r\n\r\n  getMonthlyTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getMonthlyTasks();\r\n  }\r\n\r\n  getYearlyTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getYearlyTasks();\r\n  }\r\n\r\n  getFocusTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getFocusTasks();\r\n  }\r\n\r\n  getFavoriteTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getFavoriteTasks();\r\n  }\r\n\r\n  getFrogTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getFrogTasks();\r\n  }\r\n\r\n  getTasksToSplit(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getTasksToSplit();\r\n  }\r\n\r\n  getTasksToCrush(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getTasksToCrush();\r\n  }\r\n\r\n  getTasksByType(taskListType: TaskListKey): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getTasksByType(taskListType);\r\n  }\r\n\r\n  getTasksFromIds(taskIds: string[]): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getTasksFromIds(taskIds);\r\n  }\r\n\r\n  createTask(task: TaskoratorTask): Promise<TaskoratorTask | null> {\r\n    // Generate a new unique task ID if not provided\r\n    if (!task.taskId) {\r\n      task.taskId = getUniqueTaskId();\r\n    }\r\n    return this.taskService.createTask(task);\r\n  }\r\n\r\n  createTaskWithCustomId(\r\n    task: TaskoratorTask,\r\n    taskId: string\r\n  ): Promise<TaskoratorTask | null> {\r\n    task.taskId = taskId;\r\n    return this.taskService.createTask(task);\r\n  }\r\n\r\n  updateTask(task: TaskoratorTask): Promise<boolean> {\r\n    return this.taskService.updateTask(task);\r\n  }\r\n\r\n  getTaskById(taskId: string): Promise<TaskoratorTask | null> {\r\n    return this.taskService.getTaskById(taskId);\r\n  }\r\n\r\n  getLatestTaskId(): Promise<string | null> {\r\n    return this.taskService.getLatestTaskId();\r\n  }\r\n\r\n  getSuperOverlord(taskId: string): Promise<TaskoratorTask | null> {\r\n    return this.taskService.getSuperOverlord(taskId);\r\n  }\r\n\r\n  getOverlordChildren(overlordId: string): Promise<TaskoratorTask[] | null> {\r\n    return this.taskListService.getOverlordTasks(overlordId);\r\n  }\r\n\r\n  getTasks(): Promise<TaskoratorTask[] | null> {\r\n    return this.taskService.getTasks();\r\n  }\r\n\r\n  createTasks(tasks: TaskoratorTask[]): Promise<TaskoratorTask[] | null> {\r\n    // Assign unique IDs to tasks without an ID\r\n    const tasksWithIds = tasks.map((task) => ({\r\n      ...task,\r\n      id: task.taskId || getUniqueTaskId(),\r\n    }));\r\n    return this.taskService.createTasks(tasksWithIds);\r\n  }\r\n\r\n  updateTasks(tasks: TaskoratorTask[]): Promise<boolean> {\r\n    return this.taskService.updateTasks(tasks);\r\n  }\r\n\r\n  getTree(): Promise<TaskTree | null> {\r\n    return this.treeService.getTree();\r\n  }\r\n\r\n  updateTree(taskTree: TaskTree): Promise<void> {\r\n    return this.treeService.updateTree(taskTree);\r\n  }\r\n\r\n  createTree(taskTree: TaskTree): Promise<TaskTree | null> {\r\n    return this.treeService.createTree(taskTree);\r\n  }\r\n\r\n  getSettings(): Promise<TaskSettings | null> {\r\n    return this.settingsService.getSettings();\r\n  }\r\n\r\n  updateSettings(settings: TaskSettings): Promise<void> {\r\n    return this.settingsService.updateSettings(settings);\r\n  }\r\n\r\n  createSettings(settings: TaskSettings): Promise<TaskSettings | null> {\r\n    return this.settingsService.createSettings(settings);\r\n  }\r\n\r\n  createScore(score: Score): Promise<Score | null> {\r\n    return this.scoreService.createScore(score);\r\n  }\r\n\r\n  getScore(): Promise<Score | null> {\r\n    return this.scoreService.getScore();\r\n  }\r\n\r\n  updateScore(score: Score): Promise<void> {\r\n    return this.scoreService.updateScore(score);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "registerService",
                        "type": "RegisterApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "TaskSettingsApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scoreService",
                        "type": "TaskScoreApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TaskTreeApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "registerService",
                        "type": "RegisterApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "TaskSettingsApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scoreService",
                        "type": "TaskScoreApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TaskTreeApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ApiOfflineService",
            "id": "injectable-ApiOfflineService-d95d2817db6fc8b3e896b738384282603349ec8305b95a46d97f7cd3473a53b9388318efde26f77481af0e42bcde85f249db3c1614c36ce7bd3dd4c5d7cd158d",
            "file": "src/app/services/core/api-offline.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskWithCustomId",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 434,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string | undefined>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getCurrentUserStorageKeys",
                    "args": [],
                    "optional": false,
                    "returnType": "Record | null",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDailyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFavoriteTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFocusTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFrogTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestCreatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestTaskId",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string | null>",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestUpdatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getMonthlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getOverlordChildren",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 378,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlordTasks",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getSessionTasks",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getStorageItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuperOverlord",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 384,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTasksByType",
                    "args": [
                        {
                            "name": "taskListType",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskListType",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksFromIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 337,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksToCrush",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTasksToSplit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 420,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | undefined>",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getWeeklyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getYearlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<RegisterUserResult>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorageItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\nimport { Score } from '../../models/score';\r\nimport {\r\n  RegisterUserResult,\r\n  TaskUserInfo,\r\n} from '../../models/service-strategies/user';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { getUniqueTaskId, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskTree } from '../../models/taskTree';\r\nimport { TaskListKey } from '../../models/task-list-model';\r\nimport { RegistrationData } from '../../models/service-strategies/registration-strategy';\r\nimport { TaskTreeNodeToolsService } from '../tree/task-tree-node-tools.service';\r\nimport { AuthOfflineService } from './auth-offline.service';\r\nimport { OTHER_CONFIG } from '../../app.config';\r\n\r\nconst getUserStorageKeys = (userId: string) => ({\r\n  TASKS: `tasks_${userId}`,\r\n  SETTINGS: `settings_${userId}`,\r\n  TREE: `tree_${userId}`,\r\n  SCORE: `score_${userId}`,\r\n  USER: `user_${userId}`,\r\n});\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiOfflineService implements ApiStrategy {\r\n  constructor(\r\n    private nodeTools: TaskTreeNodeToolsService,\r\n    private auth: AuthOfflineService\r\n  ) {}\r\n\r\n  private getStorageItem<T>(key: string): T | null {\r\n    const item = localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : null;\r\n  }\r\n\r\n  private setStorageItem(key: string, value: any): void {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n\r\n  // User methods\r\n  async generateApiKey(): Promise<string | undefined> {\r\n    return 'undefined';\r\n  }\r\n\r\n  async deleteUser(): Promise<void> {\r\n    const storageKeys = this.getCurrentUserStorageKeys();\r\n    if (!storageKeys) return;\r\n    localStorage.removeItem(storageKeys['USER']);\r\n  }\r\n\r\n  async createUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.USER, userInfo);\r\n  }\r\n\r\n  async updateUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.USER, userInfo);\r\n  }\r\n\r\n  private getCurrentUserStorageKeys(): Record<string, string> | null {\r\n    const currentUserId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    return currentUserId ? getUserStorageKeys(currentUserId) : null;\r\n  }\r\n\r\n  async register(\r\n    registrationData: RegistrationData\r\n  ): Promise<RegisterUserResult> {\r\n    console.log('Registering offline...');\r\n\r\n    try {\r\n      // User ID generation (example, customize as needed)\r\n      const userId =\r\n        this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n      const storageKeys = getUserStorageKeys(userId);\r\n\r\n      // Save user-specific settings\r\n      this.setStorageItem(storageKeys.SETTINGS, registrationData.settings);\r\n\r\n      // Save user-specific score\r\n      this.setStorageItem(storageKeys.SCORE, registrationData.score);\r\n\r\n      // Save user-specific tasks\r\n      const tasks = [\r\n        registrationData.initialTask,\r\n        ...registrationData.additionalTasks,\r\n      ];\r\n      this.setStorageItem(storageKeys.TASKS, tasks);\r\n\r\n      // Save user-specific task tree\r\n      this.setStorageItem(storageKeys.TREE, registrationData.tree);\r\n\r\n      // Save user profile\r\n      const userInfo = {\r\n        ...registrationData.userInfo,\r\n        userId,\r\n        registered: true,\r\n      };\r\n      this.setStorageItem(storageKeys.USER, userInfo);\r\n\r\n      console.log(`Offline registration successful for user ${userId}.`);\r\n      return {\r\n        success: true,\r\n        message: 'User registered successfully in offline mode.',\r\n        userId: userId,\r\n      };\r\n    } catch (error) {\r\n      console.error('Offline registration failed:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Offline registration failed.',\r\n      };\r\n    }\r\n  }\r\n\r\n  async getUserInfo(): Promise<TaskUserInfo | undefined> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    return this.getStorageItem(storageKeys.USER) || undefined;\r\n  }\r\n\r\n  // Tasks collection methods\r\n  async getLatestCreatedTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.sort(\r\n      (a, b) =>\r\n        new Date(b.timeCreated).getTime() - new Date(a.timeCreated).getTime()\r\n    );\r\n  }\r\n\r\n  async getLatestUpdatedTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.sort(\r\n      (a, b) =>\r\n        new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime()\r\n    );\r\n  }\r\n\r\n  async getDailyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.filter((task) => task.repeat === 'daily');\r\n  }\r\n\r\n  async getWeeklyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.filter((task) => task.repeat === 'weekly');\r\n  }\r\n\r\n  async getMonthlyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.filter((task) => task.repeat === 'monthly');\r\n  }\r\n\r\n  async getYearlyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.filter((task) => task.repeat === 'yearly');\r\n  }\r\n\r\n  async getFocusTasks(): Promise<TaskoratorTask[] | null> {\r\n    const settings = await this.getSettings();\r\n    if (!settings?.focusTaskIds?.length) return [];\r\n    return this.getTasksFromIds(settings.focusTaskIds);\r\n  }\r\n\r\n  async getFavoriteTasks(): Promise<TaskoratorTask[] | null> {\r\n    const settings = await this.getSettings();\r\n    if (!settings?.favoriteTaskIds?.length) return [];\r\n    return this.getTasksFromIds(settings.favoriteTaskIds);\r\n  }\r\n\r\n  async getFrogTasks(): Promise<TaskoratorTask[] | null> {\r\n    const settings = await this.getSettings();\r\n    if (!settings?.frogTaskIds?.length) return [];\r\n    return this.getTasksFromIds(settings.frogTaskIds);\r\n  }\r\n\r\n  // Individual task methods\r\n  async createTask(task: TaskoratorTask): Promise<TaskoratorTask | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    task.taskId = getUniqueTaskId();\r\n    tasks.push(task);\r\n    this.setStorageItem(storageKeys.TASKS, tasks);\r\n    return task;\r\n  }\r\n\r\n  async updateTask(task: TaskoratorTask): Promise<boolean> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    const index = tasks.findIndex((t) => t.taskId === task.taskId);\r\n    if (index !== -1) {\r\n      tasks[index] = task;\r\n      this.setStorageItem(storageKeys.TASKS, tasks);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async getTaskById(taskId: string): Promise<TaskoratorTask | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.find((task) => task.taskId === taskId) || null;\r\n  }\r\n\r\n  // Settings methods\r\n  async getSettings(): Promise<TaskSettings | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    return this.getStorageItem(storageKeys.SETTINGS);\r\n  }\r\n\r\n  async updateSettings(settings: TaskSettings): Promise<void> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.SETTINGS, settings);\r\n  }\r\n\r\n  async createSettings(settings: TaskSettings): Promise<TaskSettings | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.SETTINGS, settings);\r\n    return settings;\r\n  }\r\n\r\n  // Score methods\r\n  async createScore(score: Score): Promise<Score | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.SCORE, score);\r\n    return score;\r\n  }\r\n\r\n  async getScore(): Promise<Score | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    return this.getStorageItem(storageKeys.SCORE);\r\n  }\r\n\r\n  async updateScore(score: Score): Promise<void> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.SCORE, score);\r\n  }\r\n\r\n  // Implementing remaining required methods with basic functionality\r\n  async getOverlordTasks(taskId: string): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.filter((task) => task.overlord === taskId);\r\n  }\r\n\r\n  async getSessionTasks(sessionId: string): Promise<TaskoratorTask[] | null> {\r\n    // const tasks = this.getStorageItem<Task[]>(storageKeys.TASKS) || [];\r\n    // return tasks.filter((task) => task.session === sessionId);\r\n    throw new Error('get sessions not implemented in offline');\r\n  }\r\n\r\n  async getTasksToSplit(): Promise<TaskoratorTask[] | null> {\r\n    const tree = await this.getTree();\r\n    if (!tree) return [];\r\n\r\n    const toSplit = await this.nodeTools.getTaskIdsToSplit(tree);\r\n    const ids = toSplit?.map((n) => n.taskId);\r\n    if (!ids) return null;\r\n    return this.getTasksFromIds(ids);\r\n  }\r\n\r\n  async getTasksToCrush(): Promise<TaskoratorTask[] | null> {\r\n    const tree = await this.getTree();\r\n    if (!tree) return [];\r\n\r\n    const toSplit = await this.nodeTools.getTaskIdsToCrush(tree);\r\n    const ids = toSplit?.map((n) => n.taskId);\r\n    if (!ids) return null;\r\n    return this.getTasksFromIds(ids);\r\n  }\r\n\r\n  // Additional required methods with basic implementations\r\n  async getTasksByType(\r\n    taskListType: TaskListKey\r\n  ): Promise<TaskoratorTask[] | null> {\r\n    // Implementation would depend on your TaskListKey enum\r\n    return [];\r\n  }\r\n\r\n  async getTasksFromIds(taskIds: string[]): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    return tasks.filter((task) => taskIds.includes(task.taskId));\r\n  }\r\n\r\n  async createTaskWithCustomId(\r\n    task: TaskoratorTask,\r\n    taskId: string\r\n  ): Promise<TaskoratorTask | null> {\r\n    const taskWithCustomId = { ...task, id: taskId };\r\n    return this.createTask(taskWithCustomId);\r\n  }\r\n\r\n  async getLatestTaskId(): Promise<string | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    const sortedTasks = tasks.sort(\r\n      (a, b) =>\r\n        new Date(b.timeCreated).getTime() - new Date(a.timeCreated).getTime()\r\n    );\r\n    return sortedTasks[0]?.taskId || null;\r\n  }\r\n\r\n  async getSuperOverlord(taskId: string): Promise<TaskoratorTask | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const tasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    const task = tasks.find((t) => t.taskId === taskId);\r\n    if (!task?.overlord) return null;\r\n    return this.getTaskById(task.overlord);\r\n  }\r\n\r\n  async getOverlordChildren(\r\n    overlordId: string\r\n  ): Promise<TaskoratorTask[] | null> {\r\n    return this.getOverlordTasks(overlordId);\r\n  }\r\n\r\n  async getTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    return this.getStorageItem(storageKeys.TASKS);\r\n  }\r\n\r\n  async createTasks(tasks: TaskoratorTask[]): Promise<TaskoratorTask[] | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const existingTasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    const updatedTasks = [...existingTasks, ...tasks];\r\n    for (const t of updatedTasks) {\r\n      t.taskId = getUniqueTaskId();\r\n    }\r\n    this.setStorageItem(storageKeys.TASKS, updatedTasks);\r\n    return tasks;\r\n  }\r\n\r\n  async updateTasks(tasks: TaskoratorTask[]): Promise<boolean> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    const existingTasks =\r\n      this.getStorageItem<TaskoratorTask[]>(storageKeys.TASKS) || [];\r\n    const updatedTasks = existingTasks.map((existingTask) => {\r\n      const updatedTask = tasks.find((t) => t.taskId === existingTask.taskId);\r\n      return updatedTask || existingTask;\r\n    });\r\n    this.setStorageItem(storageKeys.TASKS, updatedTasks);\r\n    return true;\r\n  }\r\n\r\n  // Tree methods\r\n  async getTree(): Promise<TaskTree | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    return this.getStorageItem(storageKeys.TREE);\r\n  }\r\n\r\n  async updateTree(taskTree: TaskTree): Promise<void> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.TREE, taskTree);\r\n  }\r\n\r\n  async createTree(taskTree: TaskTree): Promise<TaskTree | null> {\r\n    const userId =\r\n      this.auth.getCurrentUserId() || OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n    const storageKeys = getUserStorageKeys(userId);\r\n    this.setStorageItem(storageKeys.TREE, taskTree);\r\n    return taskTree;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeTools",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthOfflineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "nodeTools",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthOfflineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ArtificerService",
            "id": "injectable-ArtificerService-600ac2cd56b9fbe0ea2457262f0185399f2b442150f785595b781aa1272ea835ca90e89d8ebfc81d13c9211e8d0efe36bc7e9e9d1705e595cf29f33d52a19ea0",
            "file": "src/app/components/artificer/artificer.service.ts",
            "properties": [
                {
                    "name": "currentAction$",
                    "defaultValue": "this.currentActionSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentActionSubject",
                    "defaultValue": "new BehaviorSubject<ArtificerDetails>(\r\n    artificerDetailList[0]\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActions",
                    "args": [],
                    "optional": false,
                    "returnType": "ArtificerDetails[]",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "ArtificerDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ArtificerDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\nimport { artificerDetailList, ArtificerDetails } from './artificer.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ArtificerService {\r\n  constructor() {}\r\n  private currentActionSubject = new BehaviorSubject<ArtificerDetails>(\r\n    artificerDetailList[0]\r\n  );\r\n  public currentAction$ = this.currentActionSubject.asObservable();\r\n\r\n  getActions(): ArtificerDetails[] {\r\n    return artificerDetailList;\r\n  }\r\n\r\n  setCurrentAction(action: ArtificerDetails): void {\r\n    this.currentActionSubject.next(action);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthOfflineService",
            "id": "injectable-AuthOfflineService-32257bc34aa861758df737be8ebc47b851e09fdcbf5d28aa9e5bf211e678db1083e429ff58bfa8283d84fbc621572552c4996683a91e7278db6a339f5ab77820",
            "file": "src/app/services/core/auth-offline.service.ts",
            "properties": [
                {
                    "name": "currentUser",
                    "defaultValue": "new BehaviorSubject<AuthUser | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localStorageKey",
                    "defaultValue": "OTHER_CONFIG.OFFLINE_USER_LOGIN_ID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirmSignInWithEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "deleteCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes the current offline user.\n",
                    "description": "<p>Deletes the current offline user.</p>\n"
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AuthUser | null>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes the service by checking local storage for an existing user.\n",
                    "description": "<p>Initializes the service by checking local storage for an existing user.</p>\n"
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogs in as an offline user. If no user exists in local storage, creates a new one.\n",
                    "description": "<p>Logs in as an offline user. If no user exists in local storage, creates a new one.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loginWithEmailAndPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loginWithFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loginWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loginWithYahoo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogs out the current offline user.\n",
                    "description": "<p>Logs out the current offline user.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "sendSignInLinkToEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateProfile",
                    "args": [
                        {
                            "name": "updatedProfile",
                            "type": "Partial<OfflineUser>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the offline user's profile and persists it to local storage.\n",
                    "description": "<p>Updates the offline user&#39;s profile and persists it to local storage.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "updatedProfile",
                            "type": "Partial<OfflineUser>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport {\r\n  AuthStrategy,\r\n  AuthUser,\r\n} from '../../models/service-strategies/auth-strategy.interface';\r\nimport { OTHER_CONFIG } from '../../app.config';\r\n\r\nexport interface OfflineUser {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  emailVerified: boolean;\r\n  isAnonymous: boolean;\r\n  phoneNumber: string | null;\r\n  photoURL: string | null;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthOfflineService implements AuthStrategy {\r\n  private currentUser = new BehaviorSubject<AuthUser | null>(null);\r\n  private readonly localStorageKey = OTHER_CONFIG.OFFLINE_USER_LOGIN_ID;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Initializes the service by checking local storage for an existing user.\r\n   */\r\n  initialize(): void {\r\n    const storedUser = localStorage.getItem(this.localStorageKey);\r\n    if (storedUser) {\r\n      const user: AuthUser = JSON.parse(storedUser);\r\n      this.currentUser.next(user);\r\n      console.log('Restored offline user from local storage:', user);\r\n    } else {\r\n      console.log('No offline user found in local storage.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs in as an offline user. If no user exists in local storage, creates a new one.\r\n   */\r\n  async login(): Promise<{ userId: string; isNewUser: boolean }> {\r\n    let offlineUser = this.currentUser.getValue();\r\n    const isNewUser = offlineUser === null;\r\n\r\n    if (isNewUser) {\r\n      offlineUser = {\r\n        uid: 'offline-user',\r\n        displayName: 'Offline User',\r\n        email: null,\r\n        isAnonymous: true,\r\n        emailVerified: false,\r\n        isNewUser: true,\r\n      };\r\n\r\n      this.currentUser.next(offlineUser);\r\n      localStorage.setItem(this.localStorageKey, JSON.stringify(offlineUser));\r\n      console.log('Created new offline user:', offlineUser);\r\n    } else {\r\n      console.log('Logged in as existing offline user:', offlineUser);\r\n    }\r\n\r\n    // Ensure offlineUser is not null here with a type assertion or conditional.\r\n    return {\r\n      userId: offlineUser!.uid,\r\n      isNewUser,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Logs out the current offline user.\r\n   */\r\n  async logOut(): Promise<void> {\r\n    this.currentUser.next(null);\r\n    localStorage.removeItem(this.localStorageKey);\r\n    console.log('Logged out of offline mode');\r\n  }\r\n\r\n  /**\r\n   * Deletes the current offline user.\r\n   */\r\n  deleteCurrentUser(): void {\r\n    this.logOut(); // Log out and remove user data.\r\n    console.log('Offline user deleted');\r\n  }\r\n\r\n  /**\r\n   * Updates the offline user's profile and persists it to local storage.\r\n   */\r\n  updateProfile(updatedProfile: Partial<OfflineUser>): void {\r\n    const currentUser = this.currentUser.getValue();\r\n\r\n    if (!currentUser) {\r\n      console.error('No user is logged in to update the profile.');\r\n      return;\r\n    }\r\n\r\n    const updatedUser = {\r\n      ...currentUser,\r\n      ...updatedProfile,\r\n    };\r\n\r\n    this.currentUser.next(updatedUser);\r\n    localStorage.setItem(this.localStorageKey, JSON.stringify(updatedUser));\r\n    console.log('Offline user profile updated:', updatedUser);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.currentUser.getValue();\r\n  }\r\n\r\n  getCurrentUserId(): string | undefined {\r\n    const user = this.currentUser.getValue();\r\n    return user ? user.uid : undefined;\r\n  }\r\n\r\n  getCurrentUser(): Observable<AuthUser | null> {\r\n    return this.currentUser.asObservable();\r\n  }\r\n\r\n  // Unsupported methods for offline mode\r\n  async loginWithEmailAndPassword(): Promise<void> {\r\n    throw new Error('Offline mode does not support email/password login.');\r\n  }\r\n\r\n  async loginWithGoogle(): Promise<{ userId: string; isNewUser: boolean }> {\r\n    throw new Error('Offline mode does not support Google login.');\r\n  }\r\n\r\n  async loginWithYahoo(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support Yahoo login.');\r\n  }\r\n\r\n  async loginWithFacebook(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support Facebook login.');\r\n  }\r\n\r\n  async sendSignInLinkToEmail(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support passwordless login.');\r\n  }\r\n\r\n  async confirmSignInWithEmail(): Promise<unknown> {\r\n    throw new Error('Offline mode does not support passwordless login.');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-4472b8eb34c841288752940ef3db8de3fdbf6074bd88911b0c04af2f87f06cef84b57f060e66d927bdb51b39af302a546600bef536393f0090dd1d8dab53cdbf",
            "file": "src/app/services/core/auth.service.ts",
            "properties": [
                {
                    "name": "currentUserSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirmSignInWithEmail",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User | null>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticatedObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithEmailAndPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginWithFacebook",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loginWithYahoo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendSignInLinkToEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>various ways to login and register with injected <code>RegistrationService</code> to help with with creation of data</p>\n",
            "rawdescription": "\n\nvarious ways to login and register with injected `RegistrationService` to help with with creation of data\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AuthStrategy } from '../../models/service-strategies/auth-strategy.interface';\r\nimport {\r\n  Auth,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  getAdditionalUserInfo,\r\n  deleteUser,\r\n  onAuthStateChanged,\r\n  User,\r\n} from '@angular/fire/auth';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\nimport { map, Observable } from 'rxjs';\r\n/**\r\n * @remarks\r\n * various ways to login and register with injected `RegistrationService` to help with with creation of data\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService implements AuthStrategy {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n\r\n  constructor(private auth: Auth) {}\r\n\r\n  initialize() {\r\n    this.currentUserSubject.next(this.auth.currentUser);\r\n\r\n    onAuthStateChanged(this.auth, (user) => {\r\n      this.currentUserSubject.next(user);\r\n      console.log(user ? `User logged in: ${user.uid}` : 'User logged out');\r\n    });\r\n  }\r\n\r\n  login(): Promise<{ userId: string; isNewUser: boolean }> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  async deleteCurrentUser(): Promise<void> {\r\n    try {\r\n      const currentUser = this.auth.currentUser;\r\n      if (currentUser) {\r\n        // Delete the user from Firebase Authentication\r\n        await deleteUser(currentUser);\r\n\r\n        console.log('User deleted successfully');\r\n      } else {\r\n        console.warn('No currently authenticated user');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async register(email: string, password: string): Promise<void> {\r\n    try {\r\n      const user = await createUserWithEmailAndPassword(\r\n        this.auth,\r\n        email,\r\n        password\r\n      );\r\n      // we do this here so to guarantee stuff is done and to not forget it\r\n      // this.registration.registerUser(user);\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async loginWithEmailAndPassword(\r\n    email: string,\r\n    password: string\r\n  ): Promise<void> {\r\n    try {\r\n      await signInWithEmailAndPassword(this.auth, email, password);\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getCurrentUserId(): string | undefined {\r\n    const user = this.auth.currentUser;\r\n    // console.log('user: ' + user?.uid);\r\n    return user ? user.uid : undefined;\r\n  }\r\n\r\n  getCurrentUser(): Observable<User | null> {\r\n    return this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const isAuthenticated = !!this.currentUserSubject.getValue();\r\n    console.log(`isAuthenticated called. Result: ${isAuthenticated}`);\r\n    return isAuthenticated;\r\n  }\r\n\r\n  isAuthenticatedObservable(): Observable<boolean> {\r\n    return this.getCurrentUser().pipe(\r\n      map((user) => !!user) // Map the user object to a boolean (true if user exists, false otherwise)\r\n    );\r\n  }\r\n\r\n  async logOut(): Promise<void> {\r\n    try {\r\n      await signOut(this.auth);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  async sendSignInLinkToEmail(email: string): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  async confirmSignInWithEmail(url: string): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  async loginWithGoogle(): Promise<{ userId: string; isNewUser: boolean }> {\r\n    if (this.isAuthenticated()) {\r\n      console.log('User already logged in, skipping Google sign-in');\r\n      const currentUser = this.auth.currentUser;\r\n      if (currentUser) {\r\n        return { userId: currentUser.uid, isNewUser: false }; // Assume false as they are already logged in\r\n      }\r\n      throw new Error('Authentication state inconsistency detected.');\r\n    }\r\n\r\n    try {\r\n      const provider = new GoogleAuthProvider();\r\n      const userCredential = await signInWithPopup(this.auth, provider);\r\n      const user = userCredential.user;\r\n\r\n      if (!user) {\r\n        throw new Error('User not found in the user credential.');\r\n      }\r\n\r\n      const additionalUserInfo = getAdditionalUserInfo(userCredential);\r\n      const isNewUser = additionalUserInfo?.isNewUser ?? false; // Default to false if undefined\r\n\r\n      if (isNewUser) {\r\n        console.log(\r\n          'Welcome aboard, space cadet! Performing first-time sign-in operations.'\r\n        );\r\n      } else {\r\n        console.log('Welcome back, astronaut! Loading your dashboard.');\r\n      }\r\n\r\n      return { userId: user.uid, isNewUser: isNewUser };\r\n    } catch (error) {\r\n      console.error('Error during sign in with Google:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  loginWithYahoo(): Promise<unknown> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  loginWithFacebook(): Promise<unknown> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "Auth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "Auth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CacheOrchestratorService",
            "id": "injectable-CacheOrchestratorService-de835bad6c84381d00fa49a3099a604dadc5bcee447efdacb285378654c7003e07066eb94981d29773ab8f81087aad14779005209753dcb1fa0656490f9b1c42",
            "file": "src/app/services/core/cache-orchestrator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Score | null",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskSettings | null",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskTree | null",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CacheStrategy } from '../../models/service-strategies/cache-strategy.interface';\r\nimport { Score } from '../../models/score';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskTree } from '../../models/taskTree';\r\nimport { TaskCacheService } from '../cache/task-cache.service';\r\nimport { TaskIdCacheService } from '../cache/task-id-cache.service';\r\nimport { SettingsCacheService } from '../cache/settings-cache.service';\r\nimport { ScoreCacheService } from '../cache/score-cache.service';\r\nimport { TreeCacheService } from '../cache/tree-cache.service';\r\nimport { TaskTransmutationService } from '../tasks/task-transmutation.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CacheOrchestratorService implements CacheStrategy {\r\n  constructor(\r\n    private taskCache: TaskCacheService,\r\n    private taskIdCache: TaskIdCacheService,\r\n    private settingsCache: SettingsCacheService,\r\n    private scoreCache: ScoreCacheService,\r\n    private treeCache: TreeCacheService,\r\n    private transmuterService: TaskTransmutationService\r\n  ) {}\r\n\r\n  getTaskById(taskId: string): TaskoratorTask | null {\r\n    return this.taskCache.getTask(taskId);\r\n  }\r\n\r\n  createTask(task: TaskoratorTask): void {\r\n    const extendedTask = this.transmuterService.toExtendedTask(task);\r\n    this.taskCache.addTask(extendedTask);\r\n\r\n    // Update the latest task ID cache\r\n    // if (task.taskId) {\r\n    //   this.taskIdCache.setLatestTaskId(task.taskId);\r\n    // }\r\n  }\r\n\r\n  updateTask(task: TaskoratorTask): void {\r\n    const extendedTask = this.transmuterService.toExtendedTask(task);\r\n    this.taskCache.addTask(extendedTask);\r\n  }\r\n\r\n  getTasks(): TaskoratorTask[] | null {\r\n    return null;\r\n  }\r\n\r\n  createTree(taskTree: TaskTree): void {\r\n    return this.treeCache.createTree(taskTree);\r\n  }\r\n\r\n  getTree(): TaskTree | null {\r\n    return this.treeCache.getTree();\r\n  }\r\n\r\n  updateTree(taskTree: TaskTree): void {\r\n    return this.treeCache.updateTree(taskTree);\r\n  }\r\n\r\n  createSettings(settings: TaskSettings): void {\r\n    return this.settingsCache.createSettings(settings);\r\n  }\r\n\r\n  getSettings(): TaskSettings | null {\r\n    return this.settingsCache.getSettings();\r\n  }\r\n\r\n  updateSettings(settings: TaskSettings): void {\r\n    return this.settingsCache.updateSettings(settings);\r\n  }\r\n\r\n  createScore(score: Score): void {\r\n    return this.scoreCache.createScore(score);\r\n  }\r\n\r\n  getScore(): Score | null {\r\n    return this.scoreCache.getScore();\r\n  }\r\n\r\n  updateScore(score: Score): void {\r\n    return this.scoreCache.updateScore(score);\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.taskCache.clearCache();\r\n    this.taskIdCache.clearCache();\r\n    this.settingsCache.clearCache();\r\n    this.scoreCache.clearCache();\r\n    this.treeCache.clearCache();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsCache",
                        "type": "SettingsCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scoreCache",
                        "type": "ScoreCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeCache",
                        "type": "TreeCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transmuterService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsCache",
                        "type": "SettingsCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scoreCache",
                        "type": "ScoreCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeCache",
                        "type": "TreeCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transmuterService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CodeToTasksService",
            "id": "injectable-CodeToTasksService-ad429cb4d3a16b1fcb8e668688eba5a2587cb3521ec0d9a4c0fcd06178b89bedeec98f69677d140ad44d5963ce8d6a1fb5f4f37d0d3d19b835b72fa5667ee902",
            "file": "src/app/features/core/crucible/input-to-tasks/services/code-to-tasks.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "extractStringNames",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExtracts all relevant names from code: classes/interfaces and functions.\n",
                    "description": "<p>Extracts all relevant names from code: classes/interfaces and functions.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClassOrInterfaceNames",
                    "args": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExtracts CamelCase identifiers (class or interface names).\n",
                    "description": "<p>Extracts CamelCase identifiers (class or interface names).</p>\n",
                    "jsdoctags": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFunctionNames",
                    "args": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExtracts lowerCamelCase function/method names.\n",
                    "description": "<p>Extracts lowerCamelCase function/method names.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CodeToTasksService {\r\n  /**\r\n   * Extracts CamelCase identifiers (class or interface names).\r\n   */\r\n  getClassOrInterfaceNames(lines: string[]): string[] {\r\n    // const camelCaseRegex = /^\\s*(class|interface)\\s+([A-Z][a-zA-Z0-9]*)/; // Match class or interface\r\n    const camelCaseRegex =\r\n      /^\\s*(?:export\\s+)?(class|interface)\\s+([A-Z][a-zA-Z0-9]*)/;\r\n\r\n    return lines\r\n      .map((line) => line.match(camelCaseRegex))\r\n      .filter((match) => match) // Only keep matches\r\n      .map((match) => match![2]); // Extract the name\r\n  }\r\n\r\n  /**\r\n   * Extracts lowerCamelCase function/method names.\r\n   */\r\n  getFunctionNames(lines: string[], isWithTypes: boolean): string[] {\r\n    const methodRegex =\r\n      /^\\s*([a-z][a-zA-Z0-9]*)\\s*\\([^)]*\\)\\s*(?::\\s*[a-zA-Z0-9<>\\[\\]]+)?\\s*\\{/;\r\n    const arrowFunctionRegex =\r\n      /^\\s*const\\s+([a-z][a-zA-Z0-9]*)\\s*=\\s*\\([^)]*\\)\\s*(?::\\s*[a-zA-Z0-9<>\\[\\]]+)?\\s*=>/;\r\n\r\n    const functions: string[] = [];\r\n\r\n    lines.forEach((line) => {\r\n      const trimmedLine = line.trim();\r\n\r\n      // Match class methods\r\n      if (\r\n        methodRegex.test(trimmedLine) &&\r\n        !trimmedLine.startsWith('constructor')\r\n      ) {\r\n        const splitter = isWithTypes ? '{' : '(';\r\n        const methodName = trimmedLine.split(splitter)[0].trim();\r\n        functions.push(methodName);\r\n      }\r\n\r\n      // Match arrow functions\r\n      const arrowMatch = trimmedLine.match(arrowFunctionRegex);\r\n      if (arrowMatch) {\r\n        functions.push(arrowMatch[1]);\r\n      }\r\n    });\r\n\r\n    return functions;\r\n  }\r\n\r\n  /**\r\n   * Extracts all relevant names from code: classes/interfaces and functions.\r\n   */\r\n  extractStringNames(code: string, isWithTypes: boolean): string[] {\r\n    const lines = code.split('\\n').map((line) => line.trim());\r\n    const classOrInterfaceNames = this.getClassOrInterfaceNames(lines);\r\n    const functionNames = this.getFunctionNames(lines, isWithTypes);\r\n    return [...classOrInterfaceNames, ...functionNames];\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorService",
            "id": "injectable-ColorService-9f8936d64f147dc0e627c1055db83f9fd66b9fec4739bdb34a327a5726f259ca07eac68d3ad55a5b9007f5d2026805c3ce4944966234b9cfa754c96d88fc71fd",
            "file": "src/app/services/utils/color.service.ts",
            "properties": [
                {
                    "name": "defaultPalette",
                    "defaultValue": "[\r\n    210, // Jan - Winter Blue\r\n    200, // Feb - Winter Blue (teal)\r\n    120, // Mar - Spring Green\r\n    140, // Apr - Spring Green (fresh)\r\n    90, // May - Spring Yellow-Green\r\n    60, // Jun - Summer Yellow\r\n    50, // Jul - Summer Yellow (warm sun)\r\n    30, // Aug - Late Summer Orange\r\n    15, // Sep - Autumn Orange-Red\r\n    10, // Oct - Autumn Red-Brown\r\n    5, // Nov - Deep Autumn Red\r\n    180, // Dec - Winter Cyan\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "MAX_AGE_MS",
                    "defaultValue": "30 * 24 * 60 * 60 * 1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAgeColor",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxAgeMs",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "365 * 24 * 60 * 60 * 1000"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSimple linear interpolation between green and gray based on age.\n",
                    "description": "<p>Simple linear interpolation between green and gray based on age.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxAgeMs",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "365 * 24 * 60 * 60 * 1000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateBasedColor",
                    "args": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "palette",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.defaultPalette"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns HSL color string based on task creation date and age fading.\n",
                    "description": "<p>Returns HSL color string based on task creation date and age fading.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "palette",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.defaultPalette",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressPercent",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskNodeInfo | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates progress % from TaskNodeInfo\n",
                    "description": "<p>Calculates progress % from TaskNodeInfo</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskNodeInfo | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskNodeInfo } from '../../models/taskTree';\r\n\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ColorService {\r\n  readonly defaultPalette = [\r\n    210, // Jan - Winter Blue\r\n    200, // Feb - Winter Blue (teal)\r\n    120, // Mar - Spring Green\r\n    140, // Apr - Spring Green (fresh)\r\n    90, // May - Spring Yellow-Green\r\n    60, // Jun - Summer Yellow\r\n    50, // Jul - Summer Yellow (warm sun)\r\n    30, // Aug - Late Summer Orange\r\n    15, // Sep - Autumn Orange-Red\r\n    10, // Oct - Autumn Red-Brown\r\n    5, // Nov - Deep Autumn Red\r\n    180, // Dec - Winter Cyan\r\n  ];\r\n\r\n  readonly MAX_AGE_MS = 30 * 24 * 60 * 60 * 1000; // 30 days cap\r\n\r\n  /**\r\n   * Returns HSL color string based on task creation date and age fading.\r\n   */\r\n  getDateBasedColor(timestamp: number, palette = this.defaultPalette): string {\r\n    const now = Date.now();\r\n    const ageMs = now - timestamp;\r\n    const ageRatio = Math.min(ageMs / this.MAX_AGE_MS, 1);\r\n\r\n    const date = new Date(timestamp);\r\n    const month = date.getMonth();\r\n    const hue = palette[month];\r\n\r\n    const saturation = +(80 - ageRatio * 50).toFixed(2);\r\n    const lightness = +(35 + ageRatio * 40).toFixed(2);\r\n\r\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n  }\r\n\r\n  /**\r\n   * Simple linear interpolation between green and gray based on age.\r\n   */\r\n  getAgeColor(\r\n    task: TaskoratorTask,\r\n    maxAgeMs = 365 * 24 * 60 * 60 * 1000\r\n  ): string {\r\n    const green = { r: 76, g: 175, b: 80 };\r\n    const gray = { r: 153, g: 153, b: 153 };\r\n\r\n    const ageMs = Date.now() - task.timeCreated;\r\n    const ageRatio = Math.min(ageMs / maxAgeMs, 1);\r\n\r\n    const r = Math.round(green.r + ageRatio * (gray.r - green.r));\r\n    const g = Math.round(green.g + ageRatio * (gray.g - green.g));\r\n    const b = Math.round(green.b + ageRatio * (gray.b - green.b));\r\n\r\n    return `rgb(${r},${g},${b})`;\r\n  }\r\n\r\n  /**\r\n   * Calculates progress % from TaskNodeInfo\r\n   */\r\n  getProgressPercent(node: TaskNodeInfo | null): number {\r\n    if (!node || node.childrenCount === 0) return 0;\r\n    return (node.completedChildrenCount / node.childrenCount) * 100;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CsvToTasksService",
            "id": "injectable-CsvToTasksService-116d87875fb8085492bcc1926f2ed2addb80db42a91031eb04e3989fd4acdff7c4f5cba6a2594e1ac06d21ff7b2ba71f3519cb9023dfb1c8f37b38d0de4e8ece",
            "file": "src/app/features/core/crucible/input-to-tasks/services/csv-to-tasks.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCsvToTaskLikeObjects",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeparator",
                    "args": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTaskLikeObject",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "splitCsvLine",
                    "args": [
                        {
                            "name": "line",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { getDefaultTask } from '../../../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CsvToTasksService {\r\n  getCsvToTaskLikeObjects(text: string) {\r\n    const lines = text.trim().split('\\n');\r\n    const separator = this.getSeparator(lines);\r\n    // const headers = this.splitCsvLine(lines[0], separator);\r\n    const objs = [];\r\n\r\n    for (let i = 1; i < lines.length; i++) {\r\n      const rowValues = this.splitCsvLine(lines[i], separator);\r\n      // const rowData: any = {};\r\n\r\n      // TODO: using headers might be too complicated (csv to tasks)\r\n      // for (let j = 0; j < headers.length; j++) {\r\n      //   rowData[headers[j]] = rowValues[j];\r\n      // }\r\n\r\n      const taskObject = this.loadTaskLikeObject(rowValues, separator);\r\n      objs.push(taskObject);\r\n    }\r\n\r\n    return objs;\r\n  }\r\n\r\n  getSeparator(lines: string[]) {\r\n    let separator = ',';\r\n    for (let i = 0; i < 3; i++) {\r\n      if (lines[i]) {\r\n        const commas = this.splitCsvLine(lines[i], ',').length;\r\n        const tabs = this.splitCsvLine(lines[i], '\\t').length;\r\n        if (tabs > commas) {\r\n          separator = '\\t';\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return separator;\r\n  }\r\n\r\n  splitCsvLine(line: string, separator: string): string[] {\r\n    const result: string[] = [];\r\n    // const cursor = 0;\r\n    let insideQuote = false;\r\n    let token = '';\r\n\r\n    for (let i = 0; i < line.length; i++) {\r\n      const char = line[i];\r\n\r\n      if (char === '\"') insideQuote = !insideQuote;\r\n\r\n      if (char === separator && !insideQuote) {\r\n        result.push(token);\r\n        token = '';\r\n      } else {\r\n        token += char;\r\n      }\r\n    }\r\n\r\n    if (token) result.push(token);\r\n\r\n    return result;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  loadTaskLikeObject(rowData: any, separator: any) {\r\n    const t = { ...getDefaultTask() };\r\n    t.name = rowData[0];\r\n    t.todo = rowData.join(separator);\r\n    // t.why = rowData.why + ' ' + rowData.idea;\r\n    // t.overlord = rowData['parent or goal'] ? rowData['parent or goal'] : '';\r\n    // t.type = rowData.type ? rowData.type : '';\r\n    // t.tags = rowData?.tags ? rowData.tags.split(',') : '';\r\n    return t;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CurrentInputService",
            "id": "injectable-CurrentInputService-c2bcc3d804d0989ea78679541ea477d61d4c86203477844d7f073354b344767d5c8ccfc3f4f566d9cd600da0f652c4dfb322cca3b20dcdc73a148607e41c1425",
            "file": "src/app/services/current-input.service.ts",
            "properties": [
                {
                    "name": "currentInput",
                    "defaultValue": "new BehaviorSubject<string>(\r\n    ''\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentInput",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCurrentInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CurrentInputService {\r\n  private currentInput: BehaviorSubject<string> = new BehaviorSubject<string>(\r\n    ''\r\n  );\r\n\r\n  constructor() {}\r\n\r\n  updateCurrentInput(input: string) {\r\n    this.currentInput.next(input);\r\n  }\r\n\r\n  getCurrentInput() {\r\n    return this.currentInput.asObservable();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-51dadaf877a49f1349ce03fd0af685fb752d4f01076890a87a8b2a5971e4ae511b72dbf7839e3c931319327a8b2e0c263846badb10c863834301ce70c9f20230",
            "file": "src/app/services/core/error.service.ts",
            "properties": [
                {
                    "name": "ERROR_NOT_LOGGED_IN",
                    "defaultValue": "'Login first please.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ERROR_NOT_VALID_TASK",
                    "defaultValue": "'Problem with task. Maybe wrong parent or bad name.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "feedbackSubject",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "popup",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ErrorHandlingStrategy } from '../../models/service-strategies/error-handling-strategy.interface';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorService implements ErrorHandlingStrategy {\n  private feedbackSubject = new BehaviorSubject<string | null>(null);\n\n  ERROR_NOT_LOGGED_IN = 'Login first please.';\n  ERROR_NOT_VALID_TASK = 'Problem with task. Maybe wrong parent or bad name.';\n\n  constructor(private snackBar: MatSnackBar) {}\n  error(error: unknown): void {\n    console.log(error);\n  }\n\n  warn(error: string) {\n    console.log(error);\n    this.snackBar.open(error, 'Close');\n  }\n\n  getFeedback(): Observable<string | null> {\n    return this.feedbackSubject.asObservable();\n  }\n\n  log(error: unknown): void {\n    console.log(error);\n  }\n\n  popup(msg: string): void {\n    console.log(msg);\n    this.snackBar.open(msg, 'Close', {\n      duration: 2000,\n    });\n  }\n\n  feedback(msg: string): void {\n    console.log(msg);\n    this.feedbackSubject.next(msg);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EventBusService",
            "id": "injectable-EventBusService-d6bc72cf9cb72f98ba6255732448a7247d6d1fe8c1dd8014dfab71176dd2611816a070f04ce90cc068f03305a041c627ee645b2dba774a9c073d78a4e153df29",
            "file": "src/app/services/core/event-bus.service.ts",
            "properties": [
                {
                    "name": "listeners",
                    "defaultValue": "new Map<string, Function[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subjects",
                    "defaultValue": "new Map<string, Subject<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTasks",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emit",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestTaskId",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlordChildren",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuperOverlord",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "on",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "listener",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>must pass task object or else task tree will not be able to add tasks with names...</p>\n",
            "rawdescription": "\n\nmust pass task object or else task tree will not be able to add tasks with names...\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ExtendedTask, TaskoratorTask } from '../../models/taskModelManager';\nimport { TaskListKey } from '../../models/task-list-model';\n\n/**\n * must pass task object or else task tree will not be able to add tasks with names...\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventBusService {\n  private listeners = new Map<string, Function[]>();\n  private subjects = new Map<string, Subject<any>>();\n\n  constructor() {\n    const events = [\n      'createTask',\n      'updateTask',\n      'getTaskById',\n      'getLatestTaskId',\n      'getSuperOverlord',\n      'getOverlordChildren',\n      'getTasks',\n      'createTasks',\n      'updateTasks',\n    ];\n    events.forEach((event) => this.subjects.set(event, new Subject<any>()));\n  }\n\n  emit(event: string, payload: any): void {\n    this.listeners.get(event)?.forEach((listener) => listener(payload));\n    this.subjects.get(event)?.next(payload);\n  }\n\n  on(event: string, listener: Function): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)?.push(listener);\n  }\n\n  onEvent<T>(event: string): Observable<T> {\n    return this.subjects.get(event)?.asObservable() ?? new Observable();\n  }\n\n  getTaskById(taskId: ExtendedTask): void {\n    this.emit('getTaskById', taskId);\n  }\n\n  getLatestTaskId(taskId: ExtendedTask): void {\n    this.emit('getLatestTaskId', taskId);\n  }\n\n  getSuperOverlord(taskId: ExtendedTask): void {\n    this.emit('getSuperOverlord', taskId);\n  }\n\n  getOverlordChildren(taskIds: ExtendedTask[]): void {\n    this.emit('getOverlordChildren', taskIds);\n  }\n\n  getTasks(tasks: ExtendedTask[], taskListKey: TaskListKey): void {\n    const tasksObject = { tasks, taskListKey };\n    this.emit('getTasks', tasksObject);\n  }\n\n  // Emit just IDs or arrays of IDs instead of full objects\n  createTask(taskId: ExtendedTask): void {\n    this.emit('createTask', taskId);\n  }\n\n  updateTask(taskId: ExtendedTask): void {\n    this.emit('updateTask', taskId);\n  }\n\n  createTasks(taskIds: ExtendedTask[]): void {\n    this.emit('createTasks', taskIds);\n  }\n\n  updateTasks(taskIds: ExtendedTask[]): void {\n    this.emit('updateTasks', taskIds);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GeneralApiService",
            "id": "injectable-GeneralApiService-538b0405c38770713a26dd87a8d2a360eac77325041f42a62f6af63cb030ff057d69c5cd95b85f3324871318092042788592bd2810f795216b0e01bdb338a52e",
            "file": "src/app/services/api/general-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDocument",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "docName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocument",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "docName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any | null>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Firestore, doc, getDoc, setDoc } from '@angular/fire/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GeneralApiService {\r\n  constructor(private firestore: Firestore) {}\r\n\r\n  async createDocument(userId: string, docName: string, obj: any) {\r\n    const firestore = this.firestore;\r\n    if (!userId) {\r\n      throw new Error('No user id in user credentials @registerUser()');\r\n    }\r\n    const url = `users/${userId}/${docName}/${userId}`;\r\n    const ref = doc(firestore, url);\r\n    await setDoc(ref, obj);\r\n  }\r\n\r\n  async getDocument(userId: string, docName: string): Promise<any | null> {\r\n    const url = `users/${userId}/${docName}/${userId}`;\r\n    const treeDocRef = doc(this.firestore, url);\r\n    try {\r\n      const docSnap = await getDoc(treeDocRef);\r\n      if (docSnap.exists()) {\r\n        return docSnap.data();\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get tree:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GptRequestService",
            "id": "injectable-GptRequestService-281c80d203f3d7d7a3914f06096acfcc6fc3c4da807d0145638023b788a3c76443cca3c622775618597ed3d0b401a1f5167818297b02575a243283142a5fe353",
            "file": "src/app/features/gpt/services/gpt-request.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "SENSITIVE_CONFIG.gptServiceUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "makeGptRequest",
                    "args": [
                        {
                            "name": "userInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { SENSITIVE_CONFIG } from '../../../app.config';\r\nimport { AuthService } from '../../../services/core/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GptRequestService {\r\n  private apiUrl = SENSITIVE_CONFIG.gptServiceUrl;\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async makeGptRequest(userInput: string): Promise<any> {\r\n    const userId = this.getUserId();\r\n    const requestData = { userInput };\r\n    const headers = { 'user-id': userId };\r\n\r\n    // Use firstValueFrom to convert Observable to Promise\r\n    return firstValueFrom(\r\n      this.http.post<any>(`${this.apiUrl}/gpt-request`, requestData, {\r\n        headers,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GptSuggestService",
            "id": "injectable-GptSuggestService-6bed3d26accb5dbf7d92604090af72f0d99af444b753a956b9dcd7e0b506c8204412e709415cb90e549ccaa78eb66fa2d665b58ceab431898464f0af1386533f",
            "file": "src/app/features/gpt/services/gpt-suggest.service.ts",
            "properties": [
                {
                    "name": "mainPrompt",
                    "defaultValue": "'Please give me a list of tasks each on a new line. Try to suggest useful ideas without just mentioning what is in the request. Here is additional information for context:'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addGeneratedTasksToGptService",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskFromResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateGptRequest",
                    "args": [
                        {
                            "name": "treePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "relatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "treePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRelatedTasks",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask[]>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "suggestTasksForTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { GptTasksService } from './gpt-tasks.service';\r\nimport { GptRequestService } from './gpt-request.service';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { TaskListService } from '../../../services/sync-api-cache/task-list.service';\r\nimport { TreeService } from '../../../services/sync-api-cache/tree.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GptSuggestService {\r\n  private mainPrompt =\r\n    'Please give me a list of tasks each on a new line. Try to suggest useful ideas without just mentioning what is in the request. Here is additional information for context:';\r\n\r\n  constructor(\r\n    private treeService: TreeService,\r\n    private taskListService: TaskListService,\r\n    private gptService: GptRequestService,\r\n    private gptTasksService: GptTasksService\r\n  ) {}\r\n\r\n  async suggestTasksForTask(task: TaskoratorTask): Promise<string[]> {\r\n    // if (!taskId || !taskTree) throw new Error('Task ID or Task Tree missing.');\r\n\r\n    // const task = await this.taskService.getTaskById(taskId);\r\n    // if (!task) throw new Error('Task not found.');\r\n\r\n    const treePath = await this.treeService.findPathStringToTask(task.taskId);\r\n    const relatedTasks = await this.getRelatedTasks(task);\r\n    const request = this.generateGptRequest(treePath, relatedTasks, '', task);\r\n\r\n    const response = await this.gptService.makeGptRequest(request);\r\n    const taskList = response.text.split('\\n');\r\n    this.addGeneratedTasksToGptService(taskList, task);\r\n\r\n    return taskList;\r\n    // return ['taskList'];\r\n  }\r\n\r\n  private async getRelatedTasks(\r\n    task: TaskoratorTask\r\n  ): Promise<TaskoratorTask[]> {\r\n    if (!task.overlord) return [];\r\n    const tasks = await this.taskListService.getOverlordTasks(task.overlord);\r\n    return tasks?.filter((t) => t.stage !== 'completed') || [];\r\n  }\r\n\r\n  private generateGptRequest(\r\n    treePath: string,\r\n    relatedTasks: TaskoratorTask[],\r\n    userInput: string,\r\n    task: TaskoratorTask\r\n  ): string {\r\n    const parts: string[] = [this.mainPrompt];\r\n\r\n    if (userInput) parts.push(`Current user input: ${userInput}`);\r\n    if (treePath) parts.push(`Tree chain to current task: ${treePath}`);\r\n    if (task.name) parts.push(`Task name: ${task.name}`);\r\n    if (task.why) parts.push(`Task purpose: ${task.why}`);\r\n\r\n    if (relatedTasks.length > 0) {\r\n      const taskNames = relatedTasks.map((t) => t.name).join(', ');\r\n      parts.push(`Related tasks already present: ${taskNames}`);\r\n    }\r\n\r\n    return parts.join('. ');\r\n  }\r\n\r\n  private addGeneratedTasksToGptService(\r\n    taskList: string[],\r\n    parentTask: TaskoratorTask\r\n  ) {\r\n    taskList.forEach((taskString) => {\r\n      const newTask = this.createTaskFromResponse(taskString, parentTask);\r\n      this.gptTasksService.addTask(newTask);\r\n    });\r\n  }\r\n\r\n  private createTaskFromResponse(\r\n    response: string,\r\n    parentTask: TaskoratorTask\r\n  ): TaskoratorTask {\r\n    const task = { ...parentTask };\r\n    const cleanInput = response.replace(/^\\d+\\.\\s*/, '').trim();\r\n    const splitIndex = cleanInput.indexOf(':');\r\n\r\n    if (splitIndex !== -1) {\r\n      task.name = cleanInput.substring(0, splitIndex).trim();\r\n      task.todo = cleanInput.substring(splitIndex + 1).trim();\r\n    } else {\r\n      task.name = cleanInput;\r\n      task.todo = '';\r\n    }\r\n\r\n    task.overlord = parentTask.taskId;\r\n    return task;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gptService",
                        "type": "GptRequestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gptTasksService",
                        "type": "GptTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gptService",
                        "type": "GptRequestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gptTasksService",
                        "type": "GptTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GptTasksService",
            "id": "injectable-GptTasksService-dd68004d2d4a6ddc7c9ed1e97de05e82d67d1ff8842dfb088859228a805a0a9c75f55d37d66b658c80e0c5f4452fd904068c7b9dfeedf925a19de6badae69c4d",
            "file": "src/app/features/gpt/services/gpt-tasks.service.ts",
            "properties": [
                {
                    "name": "tasks",
                    "defaultValue": "new BehaviorSubject<\r\n    TaskoratorTask[]\r\n  >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TaskoratorTask[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateUniqueId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GptTasksService {\r\n  private tasks: BehaviorSubject<TaskoratorTask[]> = new BehaviorSubject<\r\n    TaskoratorTask[]\r\n  >([]);\r\n\r\n  constructor() {}\r\n\r\n  getTasks() {\r\n    return this.tasks.asObservable();\r\n  }\r\n\r\n  addTask(task: TaskoratorTask) {\r\n    const currentTasks = this.tasks.getValue();\r\n    if (task.taskId === '0') {\r\n      task.taskId = this.generateUniqueId(); // Ensure each task has a unique ID\r\n    }\r\n    this.tasks.next([...currentTasks, task]);\r\n  }\r\n\r\n  private generateUniqueId(): string {\r\n    // Simple unique ID generation: This is for demonstration; use a more robust method in production!\r\n    return Math.random().toString(36).substring(2, 9);\r\n  }\r\n\r\n  removeTask(taskId: string) {\r\n    console.log('Attempting to remove task with ID:', taskId);\r\n    const currentTasks = this.tasks.getValue();\r\n    console.log('Current tasks before removal:', currentTasks);\r\n\r\n    const updatedTasks = currentTasks.filter((task) => task.taskId !== taskId);\r\n    console.log('Tasks after attempted removal:', updatedTasks);\r\n\r\n    this.tasks.next(updatedTasks);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "InputToTasksService",
            "id": "injectable-InputToTasksService-4dc583bc88d73bfe3cb2ead22a0904a900362c0e46a593f8cd42e44cb46cc2d4103bc8b23d7f0d29eb1978cc8b18ec297bf5ec548af6c2cef70f2926fcba4b39",
            "file": "src/app/features/core/crucible/input-to-tasks/services/input-to-tasks.service.ts",
            "properties": [
                {
                    "name": "currentInput",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextType | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the parsed tasks.\n",
                    "description": "<p>Gets the parsed tasks.</p>\n"
                },
                {
                    "name": "getTaskSummary",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets summary information for the current tasks.\n",
                    "description": "<p>Gets summary information for the current tasks.</p>\n"
                },
                {
                    "name": "parseTasks",
                    "args": [
                        {
                            "name": "isFunctionsWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isLongNamesShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParses tasks based on the current input type.\n",
                    "description": "<p>Parses tasks based on the current input type.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isFunctionsWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isLongNamesShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAutoParse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isFunctionsWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isLongNamesShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the input and reparses tasks.\n",
                    "description": "<p>Sets the input and reparses tasks.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 880,
                                "end": 885,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "input"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 874,
                                "end": 879,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The text input to parse.</li>\n</ul>\n"
                        },
                        {
                            "name": "isAutoParse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isFunctionsWithTypes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isLongNamesShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CodeToTasksService } from './code-to-tasks.service';\r\nimport { CsvToTasksService } from './csv-to-tasks.service';\r\nimport { TextToTasksService } from './text-to-tasks.service';\r\nimport {\r\n  TextType,\r\n  TextTypeDetectorService,\r\n} from './text-type-detector.service';\r\nimport { TaskoratorTask } from '../../../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class InputToTasksService {\r\n  private currentInput: string = '';\r\n  private inputType: TextType | null = null;\r\n  private tasks: TaskoratorTask[] = [];\r\n\r\n  constructor(\r\n    private textTypeService: TextTypeDetectorService,\r\n    private csvService: CsvToTasksService,\r\n    private textService: TextToTasksService,\r\n    private codeService: CodeToTasksService\r\n  ) {}\r\n\r\n  /**\r\n   * Sets the input and reparses tasks.\r\n   * @param input - The text input to parse.\r\n   */\r\n  setInput(\r\n    input: string,\r\n    isAutoParse: boolean,\r\n    isFunctionsWithTypes: boolean,\r\n    isLongNamesShortened: boolean\r\n  ): void {\r\n    this.currentInput = input.trim();\r\n    this.inputType = this.textTypeService.getType(this.currentInput);\r\n    if (isAutoParse)\r\n      this.tasks = this.parseTasks(isFunctionsWithTypes, isLongNamesShortened);\r\n  }\r\n\r\n  /**\r\n   * Gets the parsed tasks.\r\n   */\r\n  getTasks(): TaskoratorTask[] {\r\n    return this.tasks;\r\n  }\r\n\r\n  /**\r\n   * Gets summary information for the current tasks.\r\n   */\r\n  getTaskSummary(): {\r\n    taskCount: number;\r\n    uniqueTaskCount: number;\r\n    inputType: TextType | null;\r\n  } {\r\n    const uniqueTasks = new Set(this.tasks.map((task) => task.name));\r\n    return {\r\n      taskCount: this.tasks.length,\r\n      uniqueTaskCount: uniqueTasks.size,\r\n      inputType: this.inputType,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parses tasks based on the current input type.\r\n   */\r\n  parseTasks(\r\n    isFunctionsWithTypes: boolean,\r\n    isLongNamesShortened: boolean\r\n  ): TaskoratorTask[] {\r\n    if (!this.currentInput || !this.inputType) {\r\n      console.warn('No input set or invalid input type');\r\n      return [];\r\n    }\r\n    let t: TaskoratorTask[] = [];\r\n    switch (this.inputType) {\r\n      case TextType.CSV:\r\n        t = this.csvService.getCsvToTaskLikeObjects(this.currentInput);\r\n        return t;\r\n      case TextType.CSV_LIKE_TASKS:\r\n        console.warn('not implemented csv tasks to tasks');\r\n        return [];\r\n\r\n      case TextType.CODE:\r\n        const strings = this.codeService.extractStringNames(\r\n          this.currentInput,\r\n          isFunctionsWithTypes\r\n        );\r\n        console.warn('not implemented code tasks to tasks');\r\n        console.log(strings.join('\\n'));\r\n        return [];\r\n\r\n      case TextType.JSON_LIKE_TASKS:\r\n        try {\r\n          const jsonTasks = JSON.parse(this.currentInput);\r\n          // test if they are indeed tasks?\r\n          return jsonTasks;\r\n        } catch (error) {\r\n          console.error('Invalid JSON format', error);\r\n          return [];\r\n        }\r\n\r\n      case TextType.LIST:\r\n        t = this.textService.getLinesToTaskLikeObjects(\r\n          this.currentInput,\r\n          isLongNamesShortened\r\n        );\r\n        return t;\r\n\r\n      default:\r\n        console.warn('Unrecognized input type');\r\n        return [];\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "textTypeService",
                        "type": "TextTypeDetectorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "csvService",
                        "type": "CsvToTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "textService",
                        "type": "TextToTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "codeService",
                        "type": "CodeToTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "textTypeService",
                        "type": "TextTypeDetectorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "csvService",
                        "type": "CsvToTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "textService",
                        "type": "TextToTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "codeService",
                        "type": "CodeToTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "KeyApiService",
            "id": "injectable-KeyApiService-56114db9890fdc19abce9e571d732431e438d61f3eb077d1427165551c891699ff53d445531f3375a097490c8f4377f3afe421efcd3db1de6cde5f391b04e02d",
            "file": "src/app/services/api/key-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nbeware this will only be used by our separate API not angular\nAPI server should check if \"key\" allowed... not just if key exists...\n",
                    "description": "<p>beware this will only be used by our separate API not angular\nAPI server should check if &quot;key&quot; allowed... not just if key exists...</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "generateUniqueApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\nimport { AuthService } from '../core/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class KeyApiService {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  /**\r\n   * beware this will only be used by our separate API not angular\r\n   * API server should check if \"key\" allowed... not just if key exists...\r\n   */\r\n  async generateApiKey(): Promise<void> {\r\n    try {\r\n      // Generate a unique API key (you can use any method to generate a key)\r\n      const userId = this.getUserId();\r\n\r\n      const apiKey = this.generateUniqueApiKey();\r\n\r\n      // Store the API key in a separate collection \"apiKeys\" indexed by user ID\r\n      const apiKeyDocRef = doc(this.firestore, 'apiKeys', userId);\r\n      await setDoc(apiKeyDocRef, { apiKey });\r\n    } catch (error) {\r\n      console.error('Error generating API key:', error);\r\n    }\r\n  }\r\n\r\n  private generateUniqueApiKey(): string {\r\n    // Implement your logic to generate a unique API key here\r\n    // Example: Generate a random alphanumeric string\r\n    const characters =\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    const apiKeyLength = 32; // Adjust the length as needed\r\n    let apiKey = '';\r\n    for (let i = 0; i < apiKeyLength; i++) {\r\n      apiKey += characters.charAt(\r\n        Math.floor(Math.random() * characters.length)\r\n      );\r\n    }\r\n    return apiKey;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocalSqliteService",
            "id": "injectable-LocalSqliteService-64a9b6d6e733bdd7631648aef3a73e545cc6b0fd24c345fdd96307396d1f3d4122640b2d1fdb3201eef352560573c3429a675e2eb9f9f1b8b8e46d0bae3ee171",
            "file": "src/app/features/admin/services/local-sqlite.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTaskData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TaskoratorTask[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "postData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LocalSqliteService {\r\n  private baseUrl = 'http://localhost:3000';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Example method to fetch data from the database\r\n\r\n  getTaskData(): Observable<TaskoratorTask[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/tasks`).pipe(\r\n      map((tasks) => {\r\n        // Ensure taskId and overlord are consistently returned as strings\r\n        tasks.forEach((task) => {\r\n          task.taskId = String(task.taskId); // Convert taskId to string\r\n          task.overlord = String(task.overlord); // Convert overlord to string\r\n        });\r\n        return tasks;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Example method to post data to the database\r\n  postData(data: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/tasks`, data);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NavigationBuilderService",
            "id": "injectable-NavigationBuilderService-e43fd8cd77009ff5a4e16a4f5b7d520b3ebb1675a17a0326d06ac792f94a5e87523c0bbab50918b16845d29fe5126a732412ee64c739c5498b988be76b6c4a69",
            "file": "src/app/services/navigation-builder.service.ts",
            "properties": [
                {
                    "name": "allMetaData",
                    "defaultValue": "{\r\n    ...CORE_APP_METADATA,\r\n    ...citadelRouteMetadata,\r\n    ...crucibleRouteMetadata,\r\n    ...dreamforgeRouteMetadata,\r\n    ...gatewayRouteMetadata,\r\n    ...nexusRouteMetadata,\r\n    ...sentinelRouteMetadata,\r\n    ...vortexRouteMetadata,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "childMap",
                    "defaultValue": "{\r\n    citadel: citadelChildPaths.filter((s) => s !== ''), // Remove \"\" paths\r\n    crucible: crucibleChildPaths.filter((s) => s !== ''),\r\n    dreamforge: dreamforgeChildPaths.filter((s) => s !== ''),\r\n    gateway: gatewayChildPaths.filter((s) => s !== ''),\r\n    nexus: nexusChildPaths.filter((s) => s !== ''),\r\n    sentinel: sentinelChildPaths.filter((s) => s !== ''),\r\n    vortex: vortexChildPaths.filter((s) => s !== ''),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getChildrenPaths",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve child paths for a given feature.\n",
                    "description": "<p>Retrieve child paths for a given feature.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2161,
                                "end": 2165,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2155,
                                "end": 2160,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The core feature path.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2198,
                                "end": 2205,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Array of child paths.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRouteMetadata",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve metadata for a specific route path.\n",
                    "description": "<p>Retrieve metadata for a specific route path.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2398,
                                "end": 2402,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2392,
                                "end": 2397,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The route path to fetch metadata for.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2450,
                                "end": 2457,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Metadata object or a fallback default.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTopLevelFeatures",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve top-level navigation items.\n",
                    "description": "<p>Retrieve top-level navigation items.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1869,
                                "end": 1876,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Array of objects with paths and metadata for core features.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CORE_APP_METADATA } from '../app.routes-metadata';\r\nimport { AppRouteMap } from '../app.routes-models';\r\nimport {\r\n  citadelChildPaths,\r\n  citadelRouteMetadata,\r\n} from '../features/core/citadel/citadel-routes';\r\nimport {\r\n  crucibleChildPaths,\r\n  crucibleRouteMetadata,\r\n} from '../features/core/crucible/crucible-routes';\r\nimport {\r\n  dreamforgeChildPaths,\r\n  dreamforgeRouteMetadata,\r\n} from '../features/core/dreamforge/dreamforge-routes';\r\nimport {\r\n  gatewayChildPaths,\r\n  gatewayRouteMetadata,\r\n} from '../features/core/gateway/gateway-routes';\r\nimport {\r\n  nexusChildPaths,\r\n  nexusRouteMetadata,\r\n} from '../features/core/nexus/nexus-routes';\r\nimport {\r\n  sentinelChildPaths,\r\n  sentinelRouteMetadata,\r\n} from '../features/core/sentinel/sentinel-routes';\r\nimport {\r\n  vortexChildPaths,\r\n  vortexRouteMetadata,\r\n} from '../features/core/vortex/vortex-routes';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NavigationBuilderService {\r\n  constructor() {}\r\n  private readonly childMap: Record<string, string[]> = {\r\n    citadel: citadelChildPaths.filter((s) => s !== ''), // Remove \"\" paths\r\n    crucible: crucibleChildPaths.filter((s) => s !== ''),\r\n    dreamforge: dreamforgeChildPaths.filter((s) => s !== ''),\r\n    gateway: gatewayChildPaths.filter((s) => s !== ''),\r\n    nexus: nexusChildPaths.filter((s) => s !== ''),\r\n    sentinel: sentinelChildPaths.filter((s) => s !== ''),\r\n    vortex: vortexChildPaths.filter((s) => s !== ''),\r\n  };\r\n\r\n  private readonly allMetaData: AppRouteMap = {\r\n    ...CORE_APP_METADATA,\r\n    ...citadelRouteMetadata,\r\n    ...crucibleRouteMetadata,\r\n    ...dreamforgeRouteMetadata,\r\n    ...gatewayRouteMetadata,\r\n    ...nexusRouteMetadata,\r\n    ...sentinelRouteMetadata,\r\n    ...vortexRouteMetadata,\r\n  };\r\n\r\n  /**\r\n   * Retrieve top-level navigation items.\r\n   * @returns Array of objects with paths and metadata for core features.\r\n   */\r\n  getTopLevelFeatures() {\r\n    return Object.entries(CORE_APP_METADATA).map(([path, metadata]) => ({\r\n      path,\r\n      metadata,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Retrieve child paths for a given feature.\r\n   * @param path - The core feature path.\r\n   * @returns Array of child paths.\r\n   */\r\n  getChildrenPaths(path: string): string[] {\r\n    return this.childMap[path] || [];\r\n  }\r\n\r\n  /**\r\n   * Retrieve metadata for a specific route path.\r\n   * @param path - The route path to fetch metadata for.\r\n   * @returns Metadata object or a fallback default.\r\n   */\r\n  getRouteMetadata(path: string) {\r\n    return (\r\n      this.allMetaData[path] || {\r\n        title: 'Unnamed Route',\r\n        description: '',\r\n        icon: 'extension',\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-adcbf8ae28900dd9688b21178eae871da3191ec63423aece7c7444cf231dcc95320b27d43e004a1cb21a69d4344afb9fadff3b206658258839ce98d8d71361f1",
            "file": "src/app/services/navigation.service.ts",
            "properties": [
                {
                    "name": "currentChild$",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentFeature$",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "redirectUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearRedirectUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the redirect URL after redirection.\n",
                    "description": "<p>Clear the redirect URL after redirection.</p>\n"
                },
                {
                    "name": "getChildrenPaths",
                    "args": [
                        {
                            "name": "featurePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve child paths for a feature.\n",
                    "description": "<p>Retrieve child paths for a feature.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4541,
                                "end": 4552,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "featurePath"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4535,
                                "end": 4540,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Path of the feature.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "getCurrentChild",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current child as an observable.\n",
                    "description": "<p>Get the current child as an observable.</p>\n"
                },
                {
                    "name": "getCurrentFeature",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current feature as an observable.\n",
                    "description": "<p>Get the current feature as an observable.</p>\n"
                },
                {
                    "name": "getRedirectUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string | null>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the saved redirect URL.\n",
                    "description": "<p>Retrieve the saved redirect URL.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getRouteMetadata",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RouteMetadata",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve metadata for a route.\n",
                    "description": "<p>Retrieve metadata for a route.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4314,
                                "end": 4318,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4308,
                                "end": 4313,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Route path to fetch metadata for.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "getSettingsPaths",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTopLevelFeatures",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRedirectUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave the intended URL for redirection after login.\n",
                    "description": "<p>Save the intended URL for redirection after login.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncNavigationState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSynchronize navigation state based on the final resolved URL.\n",
                    "description": "<p>Synchronize navigation state based on the final resolved URL.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { BehaviorSubject, filter } from 'rxjs';\r\nimport { RouteMetadata } from '../app.routes-models';\r\nimport { NavigationBuilderService } from './navigation-builder.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NavigationService {\r\n  private currentFeature$ = new BehaviorSubject<string | null>(null);\r\n  private currentChild$ = new BehaviorSubject<string | null>(null);\r\n  private redirectUrl: string | null = null;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private navigationBuilder: NavigationBuilderService\r\n  ) {\r\n    // Listen for navigation changes\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .subscribe(() => {\r\n        this.syncNavigationState();\r\n      });\r\n  }\r\n\r\n  getSettingsPaths(): { path: string; metadata: RouteMetadata }[] {\r\n    // Define admin-only links\r\n    // const adminOnlyPaths = [\r\n    //   {\r\n    //     path: 'admin-dashboard',\r\n    //     metadata: {\r\n    //       title: 'Admin Dashboard',\r\n    //       altName: 'Admin Panel',\r\n    //       description: 'Access administrative tools and settings.',\r\n    //       icon: 'admin_panel_settings',\r\n    //     },\r\n    //   },\r\n    //   {\r\n    //     path: 'user-management',\r\n    //     metadata: {\r\n    //       title: 'User Management',\r\n    //       altName: 'Manage Users',\r\n    //       description: 'Add, edit, or remove user accounts.',\r\n    //       icon: 'group',\r\n    //     },\r\n    //   },\r\n    // ];\r\n\r\n    // Define general settings paths\r\n    const generalPaths = [\r\n      // {\r\n      //   path: 'profile',\r\n      //   metadata: {\r\n      //     title: 'Profile',\r\n      //     altName: 'User Profile',\r\n      //     description: 'Edit your personal information and settings.',\r\n      //     icon: 'person',\r\n      //   },\r\n      // },\r\n      // {\r\n      //   path: 'preferences',\r\n      //   metadata: {\r\n      //     title: 'Preferences',\r\n      //     altName: 'User Preferences',\r\n      //     description: 'Customize your application settings.',\r\n      //     icon: 'settings',\r\n      //   },\r\n      // },\r\n      {\r\n        path: 'next',\r\n        metadata: {\r\n          title: 'Next Task',\r\n          altName: 'Create Task',\r\n          description: 'Create a task not assigned to any feature.',\r\n          icon: 'add_task',\r\n        },\r\n      },\r\n    ];\r\n\r\n    // Combine paths and return\r\n    return [...generalPaths];\r\n    // return [...generalPaths, ...adminOnlyPaths];\r\n  }\r\n  // }\r\n\r\n  /**\r\n   * Save the intended URL for redirection after login.\r\n   */\r\n  setRedirectUrl(url: string) {\r\n    this.redirectUrl = url;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the saved redirect URL.\r\n   */\r\n  async getRedirectUrl(): Promise<string | null> {\r\n    return this.redirectUrl;\r\n  }\r\n\r\n  /**\r\n   * Clear the redirect URL after redirection.\r\n   */\r\n  clearRedirectUrl() {\r\n    this.redirectUrl = null;\r\n  }\r\n\r\n  /**\r\n   * Get the current feature as an observable.\r\n   */\r\n  getCurrentFeature() {\r\n    return this.currentFeature$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Get the current child as an observable.\r\n   */\r\n  getCurrentChild() {\r\n    return this.currentChild$.asObservable();\r\n  }\r\n\r\n  getTopLevelFeatures() {\r\n    return this.navigationBuilder.getTopLevelFeatures();\r\n  }\r\n\r\n  /**\r\n   * Synchronize navigation state based on the final resolved URL.\r\n   */\r\n  private syncNavigationState() {\r\n    const currentUrl = this.router.url;\r\n\r\n    // Determine the top-level feature\r\n    const feature = this.navigationBuilder\r\n      .getTopLevelFeatures()\r\n      .find((f) => currentUrl.startsWith(`/${f.path}`));\r\n\r\n    if (feature) {\r\n      this.currentFeature$.next(feature.path);\r\n\r\n      // Check for matching child paths\r\n      const childMatch = this.navigationBuilder\r\n        .getChildrenPaths(feature.path)\r\n        .find((childPath) =>\r\n          currentUrl.startsWith(`/${feature.path}/${childPath}`)\r\n        );\r\n\r\n      if (childMatch) {\r\n        this.currentChild$.next(`/${feature.path}/${childMatch}`);\r\n      } else {\r\n        this.currentChild$.next(null);\r\n      }\r\n    } else {\r\n      this.currentFeature$.next(null);\r\n      this.currentChild$.next(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve metadata for a route.\r\n   * @param path - Route path to fetch metadata for.\r\n   */\r\n  getRouteMetadata(path: string): RouteMetadata {\r\n    return this.navigationBuilder.getRouteMetadata(path);\r\n  }\r\n\r\n  /**\r\n   * Retrieve child paths for a feature.\r\n   * @param featurePath - Path of the feature.\r\n   */\r\n  getChildrenPaths(featurePath: string): string[] {\r\n    return this.navigationBuilder.getChildrenPaths(featurePath);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationBuilder",
                        "type": "NavigationBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationBuilder",
                        "type": "NavigationBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegisterApiService",
            "id": "injectable-RegisterApiService-f5013637c1d065e88c5f074ed05a70b8b540086b88b9bcb236dcc196c25eadb56959a8071a9cd52fbd89433cf6b13042eebe67f86426399cb225ba56e8cb9dab",
            "file": "src/app/services/api/register-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScoreLocation",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingsLocation",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksLocation",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTreeLocation",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | undefined>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserInfoLocation",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<RegisterUserResult>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "registrationData",
                            "type": "RegistrationData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  doc,\r\n  runTransaction,\r\n} from '@angular/fire/firestore';\r\nimport { Score } from '../../models/score';\r\nimport {\r\n  RegisterUserResult,\r\n  TaskUserInfo,\r\n} from '../../models/service-strategies/user';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskTree } from '../../models/taskTree';\r\nimport { AuthService } from '../core/auth.service';\r\nimport {\r\n  RegistrationApiStrategy,\r\n  RegistrationData,\r\n} from '../../models/service-strategies/registration-strategy';\r\nimport { KeyApiService } from './key-api.service';\r\nimport { UserApiService } from './user-api.service';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RegisterApiService implements RegistrationApiStrategy {\r\n  constructor(\r\n    private firestore: Firestore,\r\n    private authService: AuthService,\r\n    private apiKeyService: KeyApiService,\r\n    private userService: UserApiService\r\n  ) {}\r\n\r\n  async register(\r\n    registrationData: RegistrationData\r\n  ): Promise<RegisterUserResult> {\r\n    const firestore = this.firestore;\r\n    const userId = this.getUserId();\r\n\r\n    try {\r\n      await runTransaction(firestore, async (transaction) => {\r\n        doc(firestore, `users/${userId}`);\r\n        const userProfile: TaskUserInfo = registrationData.userInfo;\r\n\r\n        // Handling task creation within the transaction\r\n        const userTaskCollectionRef = collection(\r\n          firestore,\r\n          this.getTasksLocation(userId)\r\n        );\r\n        const initialTaskDocRef = doc(\r\n          userTaskCollectionRef,\r\n          registrationData.initialTask.taskId\r\n        );\r\n        transaction.set(initialTaskDocRef, registrationData.initialTask);\r\n        registrationData.additionalTasks.forEach((task) => {\r\n          const taskDocRef = doc(userTaskCollectionRef, task.taskId);\r\n          transaction.set(taskDocRef, task);\r\n        });\r\n\r\n        // Settings, Score, and TaskTree\r\n        const userInfoDocRef = doc(firestore, this.getUserInfoLocation(userId));\r\n        transaction.set(userInfoDocRef, userProfile);\r\n        // Settings, Score, and TaskTree\r\n        const settingsDocRef = doc(firestore, this.getSettingsLocation(userId));\r\n        transaction.set(settingsDocRef, registrationData.settings);\r\n        const scoreDocRef = doc(firestore, this.getScoreLocation(userId));\r\n        transaction.set(scoreDocRef, registrationData.score);\r\n        const treeDocRef = doc(firestore, this.getTreeLocation(userId));\r\n        transaction.set(treeDocRef, registrationData.tree);\r\n      });\r\n\r\n      // api key generated when user logs in 2nd time\r\n      // we check if user \"can use gpt\"\r\n      // but we still have to check on server for \"allowed keys\"\r\n      // this.generateApiKey(); // we allow certain api keys on the API, thats it...\r\n      return {\r\n        success: true,\r\n        message: 'User registration successful',\r\n        userId: userId,\r\n      };\r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      throw {\r\n        success: false,\r\n        message: 'User registration failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  generateApiKey(): void {\r\n    this.apiKeyService.generateApiKey().then();\r\n  }\r\n\r\n  deleteUser(): Promise<void> {\r\n    return this.deleteCurrentUser();\r\n  }\r\n\r\n  getUserInfo(): Promise<TaskUserInfo | undefined> {\r\n    return this.userService.getUserInfo();\r\n  }\r\n\r\n  createUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    return this.userService.createUserInfo(userInfo);\r\n  }\r\n\r\n  updateUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    return this.userService.updateUserInfo(userInfo);\r\n  }\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async deleteCurrentUser(): Promise<void> {\r\n    return await this.authService.deleteCurrentUser();\r\n  }\r\n\r\n  // async register(\r\n  //   initialTask: Task,\r\n  //   additionalTasks: Task[],\r\n  //   settings: TaskSettings,\r\n  //   score: Score,\r\n  //   tree: TaskTree\r\n  // ): Promise<RegisterUserResult> {\r\n  //   const firestore = this.firestore;\r\n  //   const userId = this.getUserId();\r\n\r\n  //   try {\r\n  //     await runTransaction(firestore, async (transaction) => {\r\n  //       doc(firestore, `users/${userId}`);\r\n  //       const userProfile: TaskUserInfo = {\r\n  //         canCreate: false,\r\n  //         allowedTemplates: [], // Initially empty, or predefined IDs could be listed here\r\n  //         canUseGpt: false,\r\n  //         role: 'basic',\r\n  //         registered: true,\r\n  //       };\r\n\r\n  //       // Handling task creation within the transaction\r\n  //       const userTaskCollectionRef = collection(\r\n  //         firestore,\r\n  //         this.getTasksLocation(userId)\r\n  //       );\r\n  //       const initialTaskDocRef = doc(\r\n  //         userTaskCollectionRef,\r\n  //         initialTask.taskId\r\n  //       );\r\n  //       transaction.set(initialTaskDocRef, initialTask);\r\n  //       additionalTasks.forEach((task) => {\r\n  //         const taskDocRef = doc(userTaskCollectionRef, task.taskId);\r\n  //         transaction.set(taskDocRef, task);\r\n  //       });\r\n\r\n  //       // Settings, Score, and TaskTree\r\n  //       const userInfoDocRef = doc(firestore, this.getUserInfoLocation(userId));\r\n  //       transaction.set(userInfoDocRef, userProfile);\r\n  //       // Settings, Score, and TaskTree\r\n  //       const settingsDocRef = doc(firestore, this.getSettingsLocation(userId));\r\n  //       transaction.set(settingsDocRef, settings);\r\n  //       const scoreDocRef = doc(firestore, this.getScoreLocation(userId));\r\n  //       transaction.set(scoreDocRef, score);\r\n  //       const treeDocRef = doc(firestore, this.getTreeLocation(userId));\r\n  //       transaction.set(treeDocRef, tree);\r\n  //     });\r\n\r\n  //     return {\r\n  //       success: true,\r\n  //       message: 'User registration successful',\r\n  //       userId: userId,\r\n  //     };\r\n  //   } catch (error) {\r\n  //     console.error('Registration failed:', error);\r\n  //     throw {\r\n  //       success: false,\r\n  //       message: 'User registration failed',\r\n  //     };\r\n  //   }\r\n  // }\r\n\r\n  private getUserInfoLocation(userId: string) {\r\n    return `users/${userId}/userInfos/${userId}`;\r\n  }\r\n\r\n  private getScoreLocation(userId: string) {\r\n    return `users/${userId}/scores/${userId}`;\r\n  }\r\n\r\n  private getSettingsLocation(userId: string) {\r\n    return `users/${userId}/settings/${userId}`;\r\n  }\r\n\r\n  private getTasksLocation(userId: string) {\r\n    return `users/${userId}/tasks`;\r\n  }\r\n\r\n  private getTreeLocation(userId: string) {\r\n    return `users/${userId}/taskTrees/${userId}`;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKeyService",
                        "type": "KeyApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKeyService",
                        "type": "KeyApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegistrationService",
            "id": "injectable-RegistrationService-499bb0f0208c8c425b6517713183bb2b4236fade8532113208ddd67ac5a750b5441f3942e04355f3d2259df97c4945c9c649a00211f62fca86cf8ae97a78968a",
            "file": "src/app/services/core/registration.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "initialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "delay",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHelper method to introduce a delay.\n",
                    "description": "<p>Helper method to introduce a delay.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ensureApiService",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiStrategy",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAdditionalTasks",
                    "args": [
                        {
                            "name": "parent",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseScore",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getBaseSettings",
                    "args": [
                        {
                            "name": "initialTaskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskSettings",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialTaskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseTree",
                    "args": [
                        {
                            "name": "initialTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTree",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInitialTask",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | undefined>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleFailedRegistration",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInitialized",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | null>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "registerUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | null>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Registration additional service</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">const r = inject(RegistrationService);\nr.registerUser(user: UserCredential);</code></pre></div><p>Sets up all the data associated with user when registering</p>\n",
            "rawdescription": "\n\nRegistration additional service\n```html\nconst r = inject(RegistrationService);\nr.registerUser(user: UserCredential);\n```\nSets up all the data associated with user when registering\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TreeNodeService } from '../tree/tree-node.service';\r\nimport { getDefaultScore } from '../../models/score';\r\nimport { getDefaultTaskSettings, TaskSettings } from '../../models/settings';\r\nimport {\r\n  TaskoratorTask,\r\n  getRootTaskObject,\r\n  ROOT_TASK_ID,\r\n  getDefaultTask,\r\n} from '../../models/taskModelManager';\r\nimport { TaskTree, getDefaultTree } from '../../models/taskTree';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\nimport { CacheOrchestratorService } from './cache-orchestrator.service';\r\nimport { RegistrationData } from '../../models/service-strategies/registration-strategy';\r\nimport { TaskUserInfo } from '../../models/service-strategies/user';\r\n\r\n/**\r\n * Registration additional service\r\n * @example\r\n * const r = inject(RegistrationService);\r\n * r.registerUser(user: UserCredential);\r\n *\r\n * @remarks\r\n * Sets up all the data associated with user when registering\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class RegistrationService {\r\n  apiService: ApiStrategy | null = null;\r\n  initialized: boolean = false;\r\n  initialize(apiStrategy: ApiStrategy): void {\r\n    this.apiService = apiStrategy;\r\n    console.log('RegistrationService initialized with API strategy');\r\n    this.initialized = true;\r\n  }\r\n  isInitialized() {\r\n    return this.initialized;\r\n  }\r\n  private ensureApiService(): ApiStrategy {\r\n    if (!this.apiService) {\r\n      throw new Error('API service is not initialized.');\r\n    }\r\n    return this.apiService;\r\n  }\r\n\r\n  constructor(\r\n    private treeNodeService: TreeNodeService,\r\n    private cacheService: CacheOrchestratorService\r\n  ) {}\r\n\r\n  generateApiKey() {\r\n    this.ensureApiService().generateApiKey();\r\n  }\r\n\r\n  getUserInfo(): Promise<TaskUserInfo | undefined> {\r\n    return this.ensureApiService().getUserInfo();\r\n  }\r\n\r\n  updateUser(userInfo: TaskUserInfo) {\r\n    return this.ensureApiService().updateUserInfo(userInfo);\r\n  }\r\n\r\n  async registerNewUser(): Promise<TaskUserInfo | null> {\r\n    console.log('Attempting to register a new user...');\r\n    let success = false;\r\n    let attempts = 0;\r\n    const maxRetries = 3;\r\n    const retryDelay = 1000; // 1 second delay\r\n    let data: TaskUserInfo | null = null;\r\n\r\n    while (!success && attempts < maxRetries) {\r\n      try {\r\n        console.log(`Register attempt ${attempts + 1} of ${maxRetries}`);\r\n        data = await this.registerUser();\r\n        if (data) {\r\n          success = true;\r\n          console.log('User registered successfully.');\r\n        } else {\r\n          console.warn('Registration returned null. Retrying...');\r\n          attempts++;\r\n          if (attempts < maxRetries) {\r\n            console.log(`Retrying in ${retryDelay}ms...`);\r\n            await this.delay(retryDelay);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        attempts++;\r\n        console.error(\r\n          `Unexpected error during registration (attempt ${attempts}):`,\r\n          error\r\n        );\r\n        if (attempts < maxRetries) {\r\n          console.log(`Retrying in ${retryDelay}ms...`);\r\n          await this.delay(retryDelay);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!success) {\r\n      console.error(\r\n        `All ${attempts} registration attempts failed. Deleting user.`\r\n      );\r\n      await this.deleteUser();\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Helper method to introduce a delay.\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async deleteUser(): Promise<void> {\r\n    if (!this.apiService) return;\r\n    return this.apiService.deleteUser();\r\n  }\r\n\r\n  async handleFailedRegistration(): Promise<void> {\r\n    console.error('Deleting user due to failed registration.');\r\n    await this.ensureApiService().deleteUser();\r\n    throw new Error('Registration failed and user has been deleted.');\r\n  }\r\n\r\n  async registerUser(): Promise<TaskUserInfo | null> {\r\n    const initialTask = this.getInitialTask();\r\n    const additionalTasks = this.getAdditionalTasks(initialTask);\r\n    const settings = this.getBaseSettings(initialTask.taskId);\r\n    const score = this.getBaseScore();\r\n    const tree = this.getBaseTree(initialTask);\r\n    const userInfo: TaskUserInfo = {\r\n      allowedTemplates: [],\r\n      canCreate: false,\r\n      canUseGpt: false,\r\n      role: '',\r\n      registered: false,\r\n    };\r\n\r\n    this.treeNodeService.createTasks(tree, additionalTasks);\r\n\r\n    try {\r\n      const registrationData: RegistrationData = {\r\n        initialTask,\r\n        additionalTasks,\r\n        settings,\r\n        score,\r\n        tree,\r\n        userInfo,\r\n      };\r\n\r\n      const registrationResult = await this.ensureApiService().register(\r\n        registrationData\r\n      );\r\n\r\n      if (registrationResult.success) {\r\n        await this.cacheService.createTask(initialTask);\r\n        await Promise.all(\r\n          additionalTasks.map((task) => this.cacheService.createTask(task))\r\n        );\r\n        await this.cacheService.createSettings(settings);\r\n        await this.cacheService.createScore(score);\r\n        await this.cacheService.createTree(tree);\r\n\r\n        return userInfo; // Registration successful\r\n      } else {\r\n        console.warn('Registration failed:', registrationResult);\r\n        return null; // Registration failed\r\n      }\r\n    } catch (error) {\r\n      console.error('Unexpected error during registration:', error);\r\n      return null; // Registration failed\r\n    }\r\n  }\r\n\r\n  private getInitialTask(): TaskoratorTask {\r\n    const task = getRootTaskObject();\r\n    task.taskId = ROOT_TASK_ID;\r\n    return task;\r\n  }\r\n\r\n  private getAdditionalTasks(parent: TaskoratorTask): TaskoratorTask[] {\r\n    const additionalTasks: TaskoratorTask[] = [\r\n      getDefaultTask(),\r\n      getDefaultTask(),\r\n      getDefaultTask(),\r\n    ];\r\n\r\n    additionalTasks[0].name = 'Complete first task';\r\n    additionalTasks[1].name = 'Try creating task';\r\n    additionalTasks[2].name = 'Try moving task into subtask';\r\n\r\n    // must create id for initial tasks, because it is easier to add it all and not wait API to return new ids,\r\n    // in  the api we just create these ids too, and later we just use API ids\r\n    additionalTasks[0].taskId = '121212';\r\n    additionalTasks[1].taskId = '212121';\r\n    additionalTasks[2].taskId = '313131';\r\n\r\n    additionalTasks.forEach((t: TaskoratorTask) => {\r\n      t.overlord = parent.taskId;\r\n    });\r\n\r\n    return additionalTasks;\r\n  }\r\n\r\n  private getBaseSettings(initialTaskId: string): TaskSettings {\r\n    const baseSettings = getDefaultTaskSettings();\r\n    baseSettings.lastOverlordViewId = initialTaskId;\r\n\r\n    return baseSettings;\r\n  }\r\n\r\n  private getBaseScore() {\r\n    return getDefaultScore();\r\n  }\r\n\r\n  private getBaseTree(initialTask: TaskoratorTask): TaskTree {\r\n    const baseTree: TaskTree = getDefaultTree();\r\n    baseTree.primarch.taskId = initialTask.taskId;\r\n    baseTree.primarch.name = initialTask.name;\r\n    return baseTree;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ScoreCacheService",
            "id": "injectable-ScoreCacheService-ccf0db2985c0d65d789feb550a95d27984f17eaa9f3371f60458e85c1718cfd7a046d50ac63438b6aa597309c60a8eaec3a3d9c621f10317ba50f0fb2cb7bf93",
            "file": "src/app/services/cache/score-cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a score to the cache with a timestamp.\n",
                    "description": "<p>Add a score to the cache with a timestamp.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the cached score.\n",
                    "description": "<p>Clear the cached score.</p>\n"
                },
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Score | null",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the score from the cache, removing it if expired.\n",
                    "description": "<p>Retrieve the score from the cache, removing it if expired.</p>\n"
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the score in the cache.\n",
                    "description": "<p>Update the score in the cache.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TASK_CONFIG } from '../../app.config';\r\nimport { Score } from '../../models/score';\r\nimport { ScoreCacheStrategy } from '../../models/service-strategies/score-strategy.interface copy';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScoreCacheService implements ScoreCacheStrategy {\r\n  private cache: { score: Score; timestamp: number } | null = null;\r\n\r\n  createScore(score: Score): void {\r\n    const timestamp = Date.now();\r\n    this.cache = { score, timestamp };\r\n  }\r\n\r\n  /**\r\n   * Add a score to the cache with a timestamp.\r\n   */\r\n  private addScore(score: Score): void {\r\n    const timestamp = Date.now();\r\n    this.cache = { score, timestamp };\r\n  }\r\n\r\n  /**\r\n   * Retrieve the score from the cache, removing it if expired.\r\n   */\r\n  getScore(): Score | null {\r\n    if (this.cache) {\r\n      const isExpired =\r\n        Date.now() - this.cache.timestamp > TASK_CONFIG.CACHE_EXPIRATION_MS;\r\n      if (isExpired) {\r\n        this.cache = null; // Clear expired cache\r\n        return null;\r\n      }\r\n      return this.cache.score;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update the score in the cache.\r\n   */\r\n  updateScore(score: Score): void {\r\n    this.addScore(score);\r\n  }\r\n\r\n  /**\r\n   * Clear the cached score.\r\n   */\r\n  clearCache(): void {\r\n    this.cache = null;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ScoreService",
            "id": "injectable-ScoreService-11b976330c0f3cc2e66a4c45198e0f880198cbf5b5c469c3ee9d580fdd8c983f397cc2dd607c48568f2a66790aeb07ccdf2faf6af758aea3df8c567e18258703",
            "file": "src/app/services/sync-api-cache/score.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "scoreSubject",
                    "defaultValue": "new BehaviorSubject<Score | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Score | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Score>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ensureApiService",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiStrategy",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<Score | null>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": true,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ScoreStrategy } from '../../models/service-strategies/score-strategy.interface copy';\nimport { BehaviorSubject } from 'rxjs';\nimport { Score, getDefaultScore } from '../../models/score';\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\nimport { CacheOrchestratorService } from '../core/cache-orchestrator.service';\nimport { ErrorService } from '../core/error.service';\n/**\n * @deprecated\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScoreService implements ScoreStrategy {\n  private scoreSubject: BehaviorSubject<Score | null> =\n    new BehaviorSubject<Score | null>(null);\n\n  apiService: ApiStrategy | null = null;\n  initialize(apiStrategy: ApiStrategy): void {\n    this.apiService = apiStrategy;\n    console.log('ScoreService initialized with API strategy');\n  }\n  private ensureApiService(): ApiStrategy {\n    if (!this.apiService) {\n      throw new Error('API service is not initialized.');\n    }\n    return this.apiService;\n  }\n\n  constructor(\n    private cacheService: CacheOrchestratorService,\n    private errorService: ErrorService\n  ) {}\n\n  async createScore(score: Score): Promise<Score> {\n    try {\n      await this.ensureApiService().createScore(score);\n      this.cacheService.createScore(score);\n      this.scoreSubject.next(score);\n      return score;\n    } catch (error) {\n      this.error(error);\n      throw error;\n    }\n  }\n\n  getScore(): BehaviorSubject<Score | null> {\n    if (this.scoreSubject.value === null) {\n      this.fetchScore();\n    }\n    return this.scoreSubject;\n  }\n\n  async fetchScore(): Promise<void> {\n    try {\n      let score = await this.cacheService.getScore();\n      if (!score) {\n        score = await this.ensureApiService().getScore();\n        if (!score) {\n          // Assume a default score; create it as appropriate for your application\n          const defaultScore = getDefaultScore(); // Assuming default score is 0, adjust as necessary\n          await this.createScore(defaultScore); // Assuming createScore method exists\n          score = defaultScore;\n        }\n        this.cacheService.updateScore(score);\n      }\n      this.scoreSubject.next(score);\n    } catch (error) {\n      this.error(error);\n      throw error;\n    }\n  }\n\n  async updateScore(score: Score): Promise<void> {\n    try {\n      await this.ensureApiService().updateScore(score);\n      this.cacheService.updateScore(score);\n      this.scoreSubject.next(score);\n    } catch (error) {\n      this.error(error);\n      throw error;\n    }\n  }\n\n  private error(msg: unknown) {\n    this.errorService.error(msg);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SearchTasksService",
            "id": "injectable-SearchTasksService-a0d2d737b6c5c0205eb122fba6f3b5fa9af69b66f655537a1a2ec2f67c5d672f452a7477be0e6c8526d3737e0d49fa6a46c70392cc920b43ebcf04b8b620b185",
            "file": "src/app/services/tasks/search-tasks.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "searchTasks",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskTreeNode[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSearch tasks in the tree based on a query.\n",
                    "description": "<p>Search tasks in the tree based on a query.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 624,
                                "end": 629,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "query"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 618,
                                "end": 623,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The search string to filter tasks by.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 677,
                                "end": 684,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable of filtered task nodes.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, of, map } from 'rxjs';\r\nimport { TaskTreeNode } from '../../models/taskTree';\r\nimport { TreeNodeService } from '../tree/tree-node.service';\r\nimport { TreeService } from '../sync-api-cache/tree.service';\r\nimport { TaskTreeNodeToolsService } from '../tree/task-tree-node-tools.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchTasksService {\r\n  constructor(\r\n    private treeService: TreeService,\r\n    private treeNodeToolsService: TaskTreeNodeToolsService\r\n  ) {}\r\n\r\n  /**\r\n   * Search tasks in the tree based on a query.\r\n   * @param query - The search string to filter tasks by.\r\n   * @returns An observable of filtered task nodes.\r\n   */\r\n  searchTasks(query: string): Observable<TaskTreeNode[]> {\r\n    console.log('Searching tasks for query:', query);\r\n    if (!query.trim()) {\r\n      // Return an empty array if the query is empty\r\n      return of([]);\r\n    }\r\n\r\n    return this.treeService.getTree().pipe(\r\n      map((tree) => {\r\n        if (!tree) {\r\n          console.warn('Task tree is not available.');\r\n          return [];\r\n        }\r\n\r\n        // Flatten the tree to make it searchable\r\n        const flattenedTasks = this.treeNodeToolsService.getFlattened(tree);\r\n        // Filter tasks based on the search query\r\n        const lowerCaseQuery = query.toLowerCase();\r\n        return flattenedTasks.filter((task) =>\r\n          task.name?.toLowerCase().includes(lowerCaseQuery)\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SelectedListService",
            "id": "injectable-SelectedListService-7d4d0ae75e4c6feb837633b8c25c69e51478f0bb691d3346b6e5bfe62347d066f8793a559dc49ba8882d47719b2ed0a382b881883533e666e618379980a14d13",
            "file": "src/app/services/tasks/selected-list.service.ts",
            "properties": [
                {
                    "name": "selectedListKey$",
                    "defaultValue": "this.selectedListKeySubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedListKeySubject",
                    "defaultValue": "new BehaviorSubject<TaskListKey | null>(\r\n    null\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearSelectedListKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the selected list key.\n",
                    "description": "<p>Clear the selected list key.</p>\n"
                },
                {
                    "name": "getSelectedListKey",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskListKey | null",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the currently selected list key.\n",
                    "description": "<p>Get the currently selected list key.</p>\n"
                },
                {
                    "name": "setSelectedListKey",
                    "args": [
                        {
                            "name": "listKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the currently selected list key.\n",
                    "description": "<p>Set the currently selected list key.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 607,
                                "end": 614,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "listKey"
                            },
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 601,
                                "end": 606,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The key of the task list to select.</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { TaskListKey } from '../../models/task-list-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SelectedListService {\r\n  private selectedListKeySubject = new BehaviorSubject<TaskListKey | null>(\r\n    null\r\n  );\r\n  selectedListKey$ = this.selectedListKeySubject.asObservable();\r\n\r\n  /**\r\n   * Get the currently selected list key.\r\n   */\r\n  getSelectedListKey(): TaskListKey | null {\r\n    return this.selectedListKeySubject.value;\r\n  }\r\n\r\n  /**\r\n   * Set the currently selected list key.\r\n   * @param listKey - The key of the task list to select.\r\n   */\r\n  setSelectedListKey(listKey: TaskListKey): void {\r\n    this.selectedListKeySubject.next(listKey);\r\n  }\r\n\r\n  /**\r\n   * Clear the selected list key.\r\n   */\r\n  clearSelectedListKey(): void {\r\n    this.selectedListKeySubject.next(null);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SelectedMultipleService",
            "id": "injectable-SelectedMultipleService-57ad54500659e51c64662e777d82f201616967e9e8788a7333d84505a67c5e5c5854a9e9f95af96b617c0fda0bd1d460420f455884c82a19f7b4ce6f58a14c1e",
            "file": "src/app/services/tasks/selected-multiple.service.ts",
            "properties": [
                {
                    "name": "selectedTasks",
                    "defaultValue": "new Set<TaskoratorTask>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedTasksUpdated",
                    "defaultValue": "new BehaviorSubject<TaskoratorTask[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addRemoveSelectedTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSelectedTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a task to the selected set and notify subscribers\n",
                    "description": "<p>Add a task to the selected set and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 604,
                                "end": 608,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "task"
                            },
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 598,
                                "end": 603,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TaskoratorTask[]>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet an observable for clients to subscribe to selected task updates\n",
                    "description": "<p>Get an observable for clients to subscribe to selected task updates</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1717,
                                "end": 1724,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable&lt;Set<Task>&gt; of selected tasks</p>\n"
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeSelectedTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove a task from the selected set and notify subscribers\n",
                    "description": "<p>Remove a task from the selected set and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1445,
                                "end": 1449,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "task"
                            },
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1439,
                                "end": 1444,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task to remove</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TaskoratorTask } from '../../models/taskModelManager';\n\n/**\n * @fix @warn use ExtendedTask for ui... or extend task to have \"selected\" property\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectedMultipleService {\n  private selectedTasks = new Set<TaskoratorTask>();\n\n  // A Subject to emit whenever tasks are selected or deselected\n  private selectedTasksUpdated = new BehaviorSubject<TaskoratorTask[]>([]);\n\n  /**\n   * Add a task to the selected set and notify subscribers\n   * @param task Task to add\n   */\n  addSelectedTask(task: TaskoratorTask): void {\n    this.selectedTasks.add(task);\n    this.selectedTasksUpdated.next(Array.from(this.selectedTasks));\n  }\n\n  clear() {\n    this.selectedTasks.clear();\n    this.selectedTasksUpdated.next([]);\n  }\n\n  addRemoveSelectedTask(task: TaskoratorTask): void {\n    if (this.selectedTasks.has(task)) {\n      // If the task is already in the set, remove it\n      this.selectedTasks.delete(task);\n    } else {\n      // If the task is not in the set, add it\n      this.selectedTasks.add(task);\n    }\n    // Emit the updated list of tasks\n    this.selectedTasksUpdated.next(Array.from(this.selectedTasks));\n  }\n\n  isSelected(task: TaskoratorTask): boolean {\n    return this.selectedTasks.has(task);\n  }\n\n  /**\n   * Remove a task from the selected set and notify subscribers\n   * @param task Task to remove\n   */\n  removeSelectedTask(task: TaskoratorTask): void {\n    this.selectedTasks.delete(task);\n    this.selectedTasksUpdated.next(Array.from(this.selectedTasks));\n  }\n\n  /**\n   * Get an observable for clients to subscribe to selected task updates\n   * @returns Observable<Set<Task>> of selected tasks\n   */\n  getSelectedTasks(): Observable<TaskoratorTask[]> {\n    return this.selectedTasksUpdated.asObservable();\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SelectedOverlordService",
            "id": "injectable-SelectedOverlordService-f66ce7106c2cd08e91e15fccd0a1ef2c2c5300706bae9406f0674188c97a6aa2241a9dcd236e0bf08636832b15cae241ab277ca427135da0e58043545c115671",
            "file": "src/app/services/tasks/selected-overlord.service.ts",
            "properties": [
                {
                    "name": "selectedOverlord",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSelectedOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedOverlordObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedOverlord",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SelectedOverlordService {\r\n  private selectedOverlord = new BehaviorSubject<string | null>(null);\r\n\r\n  getSelectedOverlordObservable(): Observable<string | null> {\r\n    return this.selectedOverlord.asObservable();\r\n  }\r\n\r\n  getSelectedOverlord(): string | null {\r\n    return this.selectedOverlord.value;\r\n  }\r\n\r\n  setSelectedOverlord(taskId: string) {\r\n    this.selectedOverlord.next(taskId);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SelectedTaskService",
            "id": "injectable-SelectedTaskService-c6aa77d2d69d1b72038b09381fedd0290beaab1bbe3ab222331db92052589f4ca277c33cef97486ab3761c66dafee645fdea75f4a43b4ac3890206f625c1f7b8",
            "file": "src/app/services/tasks/selected-task.service.ts",
            "properties": [
                {
                    "name": "selectedTask",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedTaskObservable",
                    "defaultValue": "this.selectedTaskSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TaskoratorTask | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectedTaskSubject",
                    "defaultValue": "new BehaviorSubject<TaskoratorTask | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TaskoratorTask | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSelectedTask",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskoratorTask | null",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": true,
            "deprecationMessage": "use SelectedMultipleService and just get last selected task or not?",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\n/**\r\n * @fix @deprecated use SelectedMultipleService and just get last selected task or not?\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SelectedTaskService {\r\n  private selectedTask: TaskoratorTask | null = null;\r\n  private selectedTaskSubject: BehaviorSubject<TaskoratorTask | null> =\r\n    new BehaviorSubject<TaskoratorTask | null>(null);\r\n  selectedTaskObservable: Observable<TaskoratorTask | null> =\r\n    this.selectedTaskSubject.asObservable();\r\n\r\n  setSelectedTask(task: TaskoratorTask) {\r\n    this.selectedTask = task;\r\n    this.selectedTaskSubject.next(task);\r\n  }\r\n\r\n  getSelectedTask(): TaskoratorTask | null {\r\n    return this.selectedTask;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SessionManagerService",
            "id": "injectable-SessionManagerService-ffc3d174010ca9b5abf6c044a39a6b1b24c48a1d48ca409eef19464409a74d086eec507ee8ce26f6cb9a606b1aa8ada50801e563cdf14a37dc051bca04611c0a",
            "file": "src/app/services/session-manager.service.ts",
            "properties": [
                {
                    "name": "apiStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthStrategy",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializationComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resolveInitialization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessionType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"online\" | \"offline\" | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthUser | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [
                {
                    "name": "getApiStrategy",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiStrategy",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAuthStrategy",
                    "args": [],
                    "optional": false,
                    "returnType": "AuthStrategy",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSessionType",
                    "args": [],
                    "optional": false,
                    "returnType": "\"online\" | \"offline\" | null",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 5438,
                                "end": 5445,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether we are using online or offline version of app. useful if we want to tell user</p>\n"
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "mode",
                            "type": "\"online\" | \"offline\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwaits for auth service to login\nwaits for services like task, tree, score to initiate with online or offline api\n",
                    "description": "<p>waits for auth service to login\nwaits for services like task, tree, score to initiate with online or offline api</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2515,
                                "end": 2519,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "mode"
                            },
                            "type": "\"online\" | \"offline\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2509,
                                "end": 2514,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>online offline</p>\n"
                        }
                    ]
                },
                {
                    "name": "initializeServices",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "waitForInitialization",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "waitForLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<AuthUser | null>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiStrategy } from '../models/service-strategies/api-strategy.interface';\r\nimport {\r\n  AuthStrategy,\r\n  AuthUser,\r\n} from '../models/service-strategies/auth-strategy.interface';\r\nimport { AuthService } from './core/auth.service';\r\nimport { ApiFirebaseService } from './core/api-firebase.service';\r\nimport { ApiOfflineService } from './core/api-offline.service';\r\nimport { AuthOfflineService } from './core/auth-offline.service';\r\nimport { TaskService } from './sync-api-cache/task.service';\r\nimport { TaskListService } from './sync-api-cache/task-list.service';\r\nimport { TreeService } from './sync-api-cache/tree.service';\r\nimport { TaskTreeAutoupdaterService } from './tree/task-tree-autoupdater.service';\r\nimport { SettingsService } from './sync-api-cache/settings.service';\r\nimport { ScoreService } from './sync-api-cache/score.service';\r\nimport { RegistrationService } from './core/registration.service';\r\nimport { TaskTreeHealService } from './tree/task-tree-heal.service';\r\nimport { TaskBatchService } from './sync-api-cache/task-batch.service';\r\nimport { NavigationService } from './navigation.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SessionManagerService {\r\n  private sessionType: 'online' | 'offline' | null = null;\r\n  private apiStrategy!: ApiStrategy;\r\n  private authStrategy!: AuthStrategy;\r\n  user: AuthUser | null = null;\r\n  private isInitialized = false;\r\n  private initializationComplete: Promise<void>;\r\n  private resolveInitialization!: () => void;\r\n\r\n  constructor(\r\n    private firebaseAuth: AuthService,\r\n    private offlineAuth: AuthOfflineService,\r\n    private firebaseApi: ApiFirebaseService,\r\n    private localStorageApi: ApiOfflineService,\r\n    private taskService: TaskService,\r\n    private taskListService: TaskListService,\r\n    private treeService: TreeService,\r\n    private taskBatch: TaskBatchService,\r\n    private treeUpdaterService: TaskTreeAutoupdaterService,\r\n    private treeHealService: TaskTreeHealService,\r\n    private settingsService: SettingsService,\r\n    private scoreService: ScoreService,\r\n    private registrationService: RegistrationService,\r\n    private navigationService: NavigationService\r\n  ) {\r\n    this.initializationComplete = new Promise((resolve) => {\r\n      this.resolveInitialization = resolve;\r\n    });\r\n    console.log(this);\r\n  }\r\n\r\n  /**\r\n   * waits for auth service to login\r\n   * waits for services like task, tree, score to initiate with online or offline api\r\n   * @param mode online offline\r\n   */\r\n  async initialize(mode: 'online' | 'offline'): Promise<void> {\r\n    if (this.isInitialized) return;\r\n\r\n    if (mode === 'online') {\r\n      this.authStrategy = this.firebaseAuth;\r\n      this.apiStrategy = this.firebaseApi;\r\n      this.firebaseAuth.initialize(); // init here, so we don't login by accident\r\n\r\n      // Wait for login state\r\n      this.user = await this.waitForLogin();\r\n      if (!this.user) {\r\n        throw new Error('Login failed or user not authenticated.');\r\n      } else {\r\n        console.log('log: ' + this.user);\r\n        console.log(`\"log: \" + this.user`);\r\n      }\r\n    } else if (mode === 'offline') {\r\n      this.authStrategy = this.offlineAuth;\r\n      this.apiStrategy = this.localStorageApi;\r\n      this.offlineAuth.initialize(); // init here, so we don't login by accident\r\n      this.user = await this.waitForLogin();\r\n\r\n      if (!this.user) {\r\n        throw new Error('Login failed or user not authenticated.');\r\n      } else {\r\n        console.log('log: ' + this.user);\r\n        console.log(`\"log: \" + this.user`);\r\n      }\r\n    }\r\n\r\n    this.sessionType = mode;\r\n    console.log(`Session initialized: ${mode}`);\r\n\r\n    if (!this.authStrategy.isAuthenticated()) {\r\n      throw new Error('Login failed or user not authenticated.');\r\n    }\r\n\r\n    await this.initializeServices();\r\n    this.isInitialized = true;\r\n    this.resolveInitialization(); // Signal completion\r\n  }\r\n\r\n  async waitForInitialization(): Promise<boolean> {\r\n    await this.initializationComplete;\r\n    return true;\r\n  }\r\n\r\n  private initializeServices(): void {\r\n    // TaskService\r\n    this.taskService.initialize(this.apiStrategy);\r\n    // SettingsService\r\n    this.settingsService.initialize(this.apiStrategy);\r\n    // ScoreService\r\n    this.scoreService.initialize(this.apiStrategy);\r\n    // TaskListService\r\n    this.taskListService.initialize(this.apiStrategy);\r\n    // TreeService\r\n    this.treeService.initialize(this.apiStrategy);\r\n    // RegistrationService\r\n    this.registrationService.initialize(this.apiStrategy);\r\n    // TaskBatchService\r\n    this.taskBatch.initialize(this.apiStrategy);\r\n  }\r\n\r\n  private waitForLogin(): Promise<AuthUser | null> {\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => reject('Login timed out'), 10000); // 10 seconds timeout.\r\n\r\n      this.authStrategy.getCurrentUser().subscribe((user) => {\r\n        if (user) {\r\n          clearTimeout(timeout);\r\n          resolve(user);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  getApiStrategy(): ApiStrategy {\r\n    if (!this.apiStrategy) {\r\n      throw new Error('Session not initialized. Call initialize() first.');\r\n    }\r\n    return this.apiStrategy;\r\n  }\r\n\r\n  getAuthStrategy(): AuthStrategy {\r\n    if (!this.authStrategy) {\r\n      throw new Error('Session not initialized. Call initialize() first.');\r\n    }\r\n    return this.authStrategy;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns whether we are using online or offline version of app. useful if we want to tell user\r\n   */\r\n  getSessionType(): 'online' | 'offline' | null {\r\n    return this.sessionType;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.authStrategy.isAuthenticated();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firebaseAuth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "offlineAuth",
                        "type": "AuthOfflineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firebaseApi",
                        "type": "ApiFirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageApi",
                        "type": "ApiOfflineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskBatch",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeUpdaterService",
                        "type": "TaskTreeAutoupdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeHealService",
                        "type": "TaskTreeHealService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scoreService",
                        "type": "ScoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registrationService",
                        "type": "RegistrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "firebaseAuth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "offlineAuth",
                        "type": "AuthOfflineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firebaseApi",
                        "type": "ApiFirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageApi",
                        "type": "ApiOfflineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskBatch",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeUpdaterService",
                        "type": "TaskTreeAutoupdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeHealService",
                        "type": "TaskTreeHealService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scoreService",
                        "type": "ScoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registrationService",
                        "type": "RegistrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SettingsCacheService",
            "id": "injectable-SettingsCacheService-dc64196833690665206391e6ac2df3cbde71f789b26513af1a6069884927d5938aea3af5cc35aaf48e0615c9791863f3082b9bf7bed388de4ea5d8ac6edbba83",
            "file": "src/app/services/cache/settings-cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd settings to the cache with a timestamp.\n",
                    "description": "<p>Add settings to the cache with a timestamp.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the cached settings.\n",
                    "description": "<p>Clear the cached settings.</p>\n"
                },
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskSettings | null",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the settings from the cache, removing them if expired.\n",
                    "description": "<p>Retrieve the settings from the cache, removing them if expired.</p>\n"
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the settings in the cache.\n",
                    "description": "<p>Update the settings in the cache.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TASK_CONFIG } from '../../app.config';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { SettingsCacheStrategy } from '../../models/service-strategies/settings-strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsCacheService implements SettingsCacheStrategy {\r\n  private cache: { settings: TaskSettings; timestamp: number } | null = null;\r\n\r\n  createSettings(settings: TaskSettings): void {\r\n    this.addSettings(settings);\r\n  }\r\n  /**\r\n   * Add settings to the cache with a timestamp.\r\n   */\r\n  private addSettings(settings: TaskSettings): void {\r\n    const timestamp = Date.now();\r\n    this.cache = { settings, timestamp };\r\n  }\r\n\r\n  /**\r\n   * Retrieve the settings from the cache, removing them if expired.\r\n   */\r\n  getSettings(): TaskSettings | null {\r\n    if (this.cache) {\r\n      const isExpired =\r\n        Date.now() - this.cache.timestamp > TASK_CONFIG.CACHE_EXPIRATION_MS;\r\n      if (isExpired) {\r\n        this.cache = null; // Clear expired cache\r\n        return null;\r\n      }\r\n      return this.cache.settings;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update the settings in the cache.\r\n   */\r\n  updateSettings(settings: TaskSettings): void {\r\n    this.addSettings(settings);\r\n  }\r\n\r\n  /**\r\n   * Clear the cached settings.\r\n   */\r\n  clearCache(): void {\r\n    this.cache = null;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-f0294dcbbeb6620b40dc52676dd5c4c04f84fbd0501648f176902509a1e551a7845e9623ab7137c84a5f3bda0fe2f35a3eeed7e32b6a9b970214b9cfbd8eb331",
            "file": "src/app/services/sync-api-cache/settings.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "settingsSubject",
                    "defaultValue": "new BehaviorSubject<TaskSettings | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TaskSettings | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ensureApiService",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiStrategy",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSettingsOnce",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": true,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SettingsStrategy } from '../../models/service-strategies/settings-strategy.interface';\nimport { BehaviorSubject } from 'rxjs';\nimport { TaskSettings, getDefaultTaskSettings } from '../../models/settings';\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\nimport { CacheOrchestratorService } from '../core/cache-orchestrator.service';\nimport { ErrorService } from '../core/error.service';\n/**\n * @deprecated\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService implements SettingsStrategy {\n  private settingsSubject: BehaviorSubject<TaskSettings | null> =\n    new BehaviorSubject<TaskSettings | null>(null);\n  apiService: ApiStrategy | null = null;\n\n  initialize(apiStrategy: ApiStrategy): void {\n    this.apiService = apiStrategy;\n    console.log('SettingsService initialized with API strategy');\n  }\n\n  private ensureApiService(): ApiStrategy {\n    if (!this.apiService) {\n      throw new Error('API service is not initialized.');\n    }\n    return this.apiService;\n  }\n\n  constructor(\n    private cacheService: CacheOrchestratorService,\n    private errorService: ErrorService\n  ) {}\n\n  async createSettings(settings: TaskSettings): Promise<TaskSettings> {\n    try {\n      await this.ensureApiService().createSettings(settings);\n      await this.cacheService.createSettings(settings);\n      this.settingsSubject.next(settings);\n      return settings;\n    } catch (error) {\n      this.error(error);\n      throw error;\n    }\n  }\n\n  getSettings(): BehaviorSubject<TaskSettings | null> {\n    if (this.settingsSubject.value === null) {\n      this.fetchSettings();\n    }\n    return this.settingsSubject;\n  }\n\n  async fetchSettings(): Promise<void> {\n    try {\n      let settings = await this.cacheService.getSettings();\n      if (!settings) {\n        settings = await this.ensureApiService().getSettings();\n        if (!settings) {\n          // Settings not found or error occurred\n          const defaultSettings = getDefaultTaskSettings(); // Assume some default settings exist\n\n          await this.createSettings(defaultSettings);\n          settings = defaultSettings;\n        }\n      }\n      this.cacheService.updateSettings(settings);\n      this.settingsSubject.next(settings);\n    } catch (error) {\n      this.error(error);\n      throw error;\n    }\n  }\n\n  async updateSettings(settings: TaskSettings): Promise<void> {\n    try {\n      await this.ensureApiService().updateSettings(settings);\n      this.cacheService.updateSettings(settings);\n      this.settingsSubject.next(settings);\n    } catch (error) {\n      this.error(error);\n      throw error;\n    }\n  }\n\n  // New method to get settings once from cache or API\n  async getSettingsOnce(): Promise<TaskSettings | null> {\n    try {\n      let settings = await this.cacheService.getSettings();\n      if (!settings) {\n        settings = await this.ensureApiService().getSettings();\n        if (!settings) return null;\n\n        // Optionally update the cache with the fetched settings\n        await this.cacheService.updateSettings(settings);\n      }\n      return settings;\n    } catch (error) {\n      this.error(error);\n      return null;\n    }\n  }\n\n  error(msg: unknown) {\n    this.errorService.error(msg);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskActionTrackerService",
            "id": "injectable-TaskActionTrackerService-1c3d6a9fd3edea5ae6c18894b254587a51da54e8200b9df52127bfd4a2fd44eba60b3baab4446720e2ca36b88c0d9d98a5db2a2a96f8be2c7f4aa77af2c9fe53",
            "file": "src/app/services/tasks/task-action-tracker.service.ts",
            "properties": [
                {
                    "name": "lastAction$",
                    "defaultValue": "this.lastActionSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "lastActionSubject",
                    "defaultValue": "new BehaviorSubject<TaskAction | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLastAction",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskAction | null",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the last recorded action.\n",
                    "description": "<p>Retrieve the last recorded action.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2747,
                                "end": 2754,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The last TaskAction or null if no action was recorded.</p>\n"
                        }
                    ]
                },
                {
                    "name": "recordAction",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRecord a single task action.\n",
                    "description": "<p>Record a single task action.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1518,
                                "end": 1524,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1512,
                                "end": 1517,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>ID of the task.</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 1556,
                                "end": 1562,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "action"
                            },
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1550,
                                "end": 1555,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Action performed (e.g., &#39;updated&#39;, &#39;completed&#39;).</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 1627,
                                "end": 1636,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "subAction"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1621,
                                "end": 1626,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Optional sub-action details (e.g., &#39;updated type to X&#39;).</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "recordBatchAction",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subAction",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRecord a batch action.\n",
                    "description": "<p>Record a batch action.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2110,
                                "end": 2117,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "taskIds"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2104,
                                "end": 2109,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Array of task IDs.</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 2152,
                                "end": 2158,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "action"
                            },
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2146,
                                "end": 2151,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Action performed (e.g., &#39;moved&#39;, &#39;updated&#39;).</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 2219,
                                "end": 2228,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "subAction"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2213,
                                "end": 2218,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Optional sub-action details (e.g., &#39;updated type to X&#39;).</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport enum TaskActions {\r\n  SELECTED = 'selected',\r\n  MOVED = 'moved',\r\n  CREATED = 'created',\r\n  UPDATED = 'updated',\r\n  COMPLETED = 'completed',\r\n  ARCHIVED = 'archived',\r\n  DELETED = 'deleted',\r\n  RENEWED = 'renewed',\r\n  SEEN = 'seen',\r\n  ACTIVATED = 'activated',\r\n  PRIORITY_INCREASED = 'priorityIncreased',\r\n  PRIORITY_DECREASED = 'priorityDecreased',\r\n  NAME_UPDATED = 'nameUpdated',\r\n  TODO_UPDATED = 'todoUpdated',\r\n  WHY_UPDATED = 'whyUpdated',\r\n  TAG_ADDED = 'tagAdded',\r\n  TAG_REMOVED = 'tagRemoved',\r\n  IMAGE_UPDATED = 'imageUpdated',\r\n  BACKUP_LINK_UPDATED = 'backupLinkUpdated',\r\n  REPEAT_UPDATED = 'repeatUpdated',\r\n  TIME_END_UPDATED = 'timeEndUpdated',\r\n  DURATION_UPDATED = 'durationUpdated',\r\n  STATUS_UPDATED = 'statusUpdated',\r\n  TYPE_UPDATED = 'typeUpdated',\r\n  SUBTYPE_UPDATED = 'subtypeUpdated',\r\n  SIZE_UPDATED = 'sizeUpdated',\r\n}\r\n\r\nexport interface TaskAction {\r\n  taskIds: string[];\r\n  action: TaskActions; // Action performed (e.g., 'moved', 'created', etc.)\r\n  subAction?: string; // Sub-action details (e.g., 'updated type to X')\r\n  message: string; // Optional descriptive message for batch updates\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskActionTrackerService {\r\n  private lastActionSubject = new BehaviorSubject<TaskAction | null>(null);\r\n  lastAction$ = this.lastActionSubject.asObservable();\r\n\r\n  constructor() {}\r\n  /**\r\n   * Record a single task action.\r\n   * @param taskId - ID of the task.\r\n   * @param action - Action performed (e.g., 'updated', 'completed').\r\n   * @param subAction - Optional sub-action details (e.g., 'updated type to X').\r\n   */\r\n  recordAction(taskId: string, action: TaskActions, subAction?: any): void {\r\n    const actionRecord: TaskAction = {\r\n      taskIds: [taskId],\r\n      action,\r\n      subAction,\r\n      message: subAction\r\n        ? `Task ${taskId} ${action} (${subAction})`\r\n        : `Task ${taskId} ${action}`,\r\n    };\r\n    this.lastActionSubject.next(actionRecord);\r\n  }\r\n\r\n  /**\r\n   * Record a batch action.\r\n   * @param taskIds - Array of task IDs.\r\n   * @param action - Action performed (e.g., 'moved', 'updated').\r\n   * @param subAction - Optional sub-action details (e.g., 'updated type to X').\r\n   */\r\n  recordBatchAction(\r\n    taskIds: string[],\r\n    action: TaskActions,\r\n    subAction?: string\r\n  ): void {\r\n    const actionRecord: TaskAction = {\r\n      taskIds,\r\n      action,\r\n      subAction,\r\n      message: subAction\r\n        ? `${taskIds.length} tasks ${action} (${subAction})`\r\n        : `${taskIds.length} tasks ${action}`,\r\n    };\r\n    this.lastActionSubject.next(actionRecord);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the last recorded action.\r\n   * @returns The last TaskAction or null if no action was recorded.\r\n   */\r\n  getLastAction(): TaskAction | null {\r\n    return this.lastActionSubject.getValue();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskApiService",
            "id": "injectable-TaskApiService-376dfb84376d73d98ff28bcb14bb9f234cac88376b51262d0101f56b69cecbddeac63f19d2463f5ec119ee5db8a822122a6d80e2644d6e2610bb4e93d4631ad8",
            "file": "src/app/services/api/task-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskWithCustomId",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ensureOverlord",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestTaskId",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string | null>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getSuperOverlord",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6826,
                                "end": 6836,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "overlordId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6820,
                                "end": 6825,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 6844,
                                "end": 6851,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>super overlord if we pass task.overlord or overlord if we pass task.taskId</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask | null>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskCollection",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Task API service for Firestore.\nBEWARE task 128 is the root task. It should never be deleted.</p>\n",
            "rawdescription": "\n\nTask API service for Firestore.\nBEWARE task 128 is the root task. It should never be deleted.\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  doc,\r\n  updateDoc,\r\n  writeBatch,\r\n  getDoc,\r\n  setDoc,\r\n  getDocs,\r\n  query,\r\n  limit,\r\n  orderBy,\r\n  deleteDoc,\r\n} from '@angular/fire/firestore';\r\nimport {\r\n  ROOT_TASK_ID,\r\n  TaskoratorTask,\r\n  getDefaultTask,\r\n} from '../../models/taskModelManager';\r\nimport { TaskApiStrategy } from '../../models/service-strategies/task-strategy.interface';\r\nimport { AuthService } from '../core/auth.service';\r\n/**\r\n * Task API service for Firestore.\r\n * BEWARE task 128 is the root task. It should never be deleted.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskApiService implements TaskApiStrategy {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async getTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n    throw new Error(\r\n      'Can not just get tasks as non admin. Not implemented yet anyway.'\r\n    );\r\n  }\r\n\r\n  private getTaskCollection(userId: string) {\r\n    return collection(this.firestore, `users/${userId}/tasks`);\r\n  }\r\n\r\n  private handleError(method: string, error: unknown): void {\r\n    console.warn(`TaskApiService.${method}:`, error);\r\n  }\r\n\r\n  private ensureOverlord(task: TaskoratorTask): TaskoratorTask {\r\n    return { ...task, overlord: task.overlord ?? getDefaultTask().overlord };\r\n  }\r\n\r\n  async createTask(task: TaskoratorTask): Promise<TaskoratorTask | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const taskCollection = this.getTaskCollection(userId);\r\n    const taskDocRef = doc(taskCollection);\r\n    const newTask = { ...this.ensureOverlord(task), taskId: taskDocRef.id };\r\n\r\n    try {\r\n      await setDoc(taskDocRef, newTask);\r\n      return newTask;\r\n    } catch (error) {\r\n      this.handleError('createTask', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async createTaskWithCustomId(\r\n    task: TaskoratorTask,\r\n    taskId: string\r\n  ): Promise<TaskoratorTask | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const taskCollection = this.getTaskCollection(userId);\r\n    const taskDocRef = doc(taskCollection, taskId);\r\n    const newTask = { ...this.ensureOverlord(task), taskId };\r\n\r\n    try {\r\n      await setDoc(taskDocRef, newTask);\r\n      return newTask;\r\n    } catch (error) {\r\n      this.handleError('createTaskWithCustomId', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async updateTask(task: TaskoratorTask): Promise<boolean> {\r\n    const userId = this.getUserId();\r\n\r\n    if (!task.taskId) {\r\n      console.warn('TaskApiService.updateTask: Missing task ID for update');\r\n      return false;\r\n    }\r\n\r\n    const taskDocRef = doc(this.getTaskCollection(userId), task.taskId);\r\n    const updatedTask = this.ensureOverlord(task);\r\n\r\n    try {\r\n      if (task.stage === 'deleted') {\r\n        if (task.taskId === ROOT_TASK_ID) {\r\n          this.handleError('updateTask', \"can't delete root task!\");\r\n          return false;\r\n        }\r\n        await deleteDoc(taskDocRef);\r\n        console.log(`Deleted task: ${task.taskId}`);\r\n      } else {\r\n        await updateDoc(taskDocRef, { ...updatedTask });\r\n      }\r\n      if (task.taskId === ROOT_TASK_ID) {\r\n        if (task.stage !== 'completed') {\r\n          console.warn(\r\n            'TaskApiService.updateTask: Safety: Root task must always be completed'\r\n          );\r\n          this.handleError('updateTask', \"can't delete root task!\");\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      this.handleError('updateTask', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getTaskById(taskId: string): Promise<TaskoratorTask | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const taskDocRef = doc(this.getTaskCollection(userId), taskId);\r\n\r\n    try {\r\n      const snapshot = await getDoc(taskDocRef);\r\n      if (snapshot.exists()) {\r\n        return { taskId: snapshot.id, ...snapshot.data() } as TaskoratorTask;\r\n      } else {\r\n        console.warn(`TaskApiService.getTaskById: Task ${taskId} not found`);\r\n        // this is custom repair mechanism if task 128 deleted, which is root...\r\n        // const t = getBaseTask();\r\n        // this.createTaskWithCustomId(userId, t, '128');\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      this.handleError('getTaskById', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getLatestTaskId(): Promise<string | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const taskCollection = this.getTaskCollection(userId);\r\n    const latestTaskQuery = query(\r\n      taskCollection,\r\n      orderBy('timeCreated', 'desc'),\r\n      limit(1)\r\n    );\r\n\r\n    try {\r\n      const querySnapshot = await getDocs(latestTaskQuery);\r\n      if (!querySnapshot.empty) {\r\n        return querySnapshot.docs[0].id;\r\n      }\r\n      console.warn('TaskApiService.getLatestTaskId: No tasks found');\r\n      return null;\r\n    } catch (error) {\r\n      this.handleError('getLatestTaskId', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async createTasks(tasks: TaskoratorTask[]): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const batch = writeBatch(this.firestore);\r\n    const taskCollection = this.getTaskCollection(userId);\r\n    const newTasks: TaskoratorTask[] = [];\r\n\r\n    try {\r\n      tasks.forEach((task) => {\r\n        const taskDocRef = doc(taskCollection, task.taskId || undefined);\r\n        const newTask = { ...this.ensureOverlord(task), taskId: taskDocRef.id };\r\n        batch.set(taskDocRef, newTask);\r\n        newTasks.push(newTask);\r\n      });\r\n\r\n      await batch.commit();\r\n      return newTasks;\r\n    } catch (error) {\r\n      this.handleError('createTasks', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async updateTasks(tasks: TaskoratorTask[]): Promise<boolean> {\r\n    const userId = this.getUserId();\r\n\r\n    const batch = writeBatch(this.firestore);\r\n    const taskCollection = this.getTaskCollection(userId);\r\n\r\n    try {\r\n      tasks.forEach((task) => {\r\n        if (!task.taskId) {\r\n          console.warn(`TaskApiService.updateTasks: Missing task ID for task`);\r\n          return;\r\n        }\r\n        if (task.taskId === ROOT_TASK_ID) {\r\n          console.warn(\r\n            `TaskApiService.updateTasks: Safety: Can't mass update with root task`\r\n          );\r\n          return;\r\n        }\r\n        const taskDocRef = doc(taskCollection, task.taskId);\r\n        batch.update(taskDocRef, { ...this.ensureOverlord(task) });\r\n      });\r\n\r\n      await batch.commit();\r\n      return true;\r\n    } catch (error) {\r\n      this.handleError('updateTasks', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param userId\r\n   * @param overlordId\r\n   * @returns super overlord if we pass task.overlord or overlord if we pass task.taskId\r\n   */\r\n  async getSuperOverlord(overlordId: string): Promise<TaskoratorTask | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const overlordDocRef = doc(this.getTaskCollection(userId), overlordId);\r\n\r\n    try {\r\n      const overlordSnapshot = await getDoc(overlordDocRef);\r\n      if (!overlordSnapshot.exists()) {\r\n        console.warn(\r\n          `TaskApiService.getSuperOverlord: Overlord ${overlordId} not found`\r\n        );\r\n        return null;\r\n      }\r\n\r\n      const overlord = overlordSnapshot.data() as TaskoratorTask;\r\n      if (!overlord.overlord) {\r\n        console.warn(\r\n          `TaskApiService.getSuperOverlord: Overlord ${overlordId} has no parent`\r\n        );\r\n        return null;\r\n      }\r\n\r\n      const superOverlordDocRef = doc(\r\n        this.getTaskCollection(userId),\r\n        overlord.overlord\r\n      );\r\n      const superOverlordSnapshot = await getDoc(superOverlordDocRef);\r\n\r\n      return superOverlordSnapshot.exists()\r\n        ? ({\r\n            taskId: superOverlordSnapshot.id,\r\n            ...superOverlordSnapshot.data(),\r\n          } as TaskoratorTask)\r\n        : null;\r\n    } catch (error) {\r\n      this.handleError('getSuperOverlord', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskBatchService",
            "id": "injectable-TaskBatchService-fe4a0fc21b2c81aa5ce8b898914f554d042a43757963625f80fa1625577cb28ac2c86af2a82823a777bab1210088244ca6b92b4efa4ea4c2b2a03bb9c560a8ac",
            "file": "src/app/services/sync-api-cache/task-batch.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "createTaskBatch",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate a batch of tasks, update the cache, and cache their IDs.\n",
                    "description": "<p>Create a batch of tasks, update the cache, and cache their IDs.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ensureApiService",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiStrategy",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskBatch",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate a batch of tasks, refresh cache, and notify listeners.\n",
                    "description": "<p>Update a batch of tasks, refresh cache, and notify listeners.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ExtendedTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskIdCacheService } from '../cache/task-id-cache.service';\r\nimport { EventBusService } from '../core/event-bus.service';\r\nimport { TaskTransmutationService } from '../tasks/task-transmutation.service';\r\nimport {\r\n  TaskActions,\r\n  TaskActionTrackerService,\r\n} from '../tasks/task-action-tracker.service';\r\nimport { ErrorService } from '../core/error.service';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskBatchService {\r\n  apiService: ApiStrategy | null = null;\r\n\r\n  initialize(apiStrategy: ApiStrategy): void {\r\n    this.apiService = apiStrategy;\r\n    console.log('TaskService initialized with API strategy');\r\n  }\r\n\r\n  private ensureApiService(): ApiStrategy {\r\n    if (!this.apiService) {\r\n      throw new Error('API service is not initialized.');\r\n    }\r\n    return this.apiService;\r\n  }\r\n\r\n  constructor(\r\n    private taskIdCache: TaskIdCacheService,\r\n    private eventBusService: EventBusService,\r\n    private transmutatorService: TaskTransmutationService,\r\n    private taskActionService: TaskActionTrackerService,\r\n    private errorService: ErrorService\r\n  ) {}\r\n\r\n  /**\r\n   * Create a batch of tasks, update the cache, and cache their IDs.\r\n   */\r\n  async createTaskBatch(\r\n    tasks: TaskoratorTask[],\r\n    overlordId: string\r\n  ): Promise<ExtendedTask[] | null> {\r\n    try {\r\n      // if (!this.validatorService.isTaskValid(task)) {\r\n      //   throw new Error('Invalid task, probably because it is empty');\r\n      // }\r\n\r\n      // Create tasks via API\r\n      const createdTasks: TaskoratorTask[] | null =\r\n        await this.ensureApiService().createTasks(tasks);\r\n      if (!createdTasks) {\r\n        console.warn('No tasks were created.');\r\n        return null;\r\n      }\r\n\r\n      // Convert and cache created tasks\r\n      const extendedTasks =\r\n        this.transmutatorService.toExtendedTasks(createdTasks);\r\n\r\n      const groupName = 'overlord_' + overlordId;\r\n      this.taskIdCache.addTasksWithGroup(extendedTasks, groupName); // Notify TaskIdCache of addition\r\n      const ids = this.transmutatorService.getIds(extendedTasks);\r\n\r\n      // Notify other services\r\n      this.eventBusService.createTasks(extendedTasks);\r\n      this.taskActionService.recordBatchAction(ids, TaskActions.CREATED);\r\n      this.errorService.feedback(\r\n        'Batch ' +\r\n          TaskActions.CREATED +\r\n          ' ' +\r\n          createdTasks.map((t) => t.name).join(',')\r\n      );\r\n\r\n      return extendedTasks;\r\n    } catch (error) {\r\n      console.error('Failed to create task batch:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a batch of tasks, refresh cache, and notify listeners.\r\n   */\r\n  async updateTaskBatch(\r\n    tasks: TaskoratorTask[],\r\n    action: TaskActions,\r\n    subAction?: any\r\n  ): Promise<void> {\r\n    try {\r\n      // if (!this.validatorService.isTaskValid(task)) {\r\n      //   throw new Error('Invalid task, probably because it is empty');\r\n      // }\r\n\r\n      // Update tasks via API\r\n      await this.ensureApiService().updateTasks(tasks);\r\n\r\n      // Refresh cache with updated tasks\r\n      const extendedTasks = this.transmutatorService.toExtendedTasks(tasks);\r\n\r\n      // Notify TaskIdCache based on action\r\n      switch (action) {\r\n        case TaskActions.MOVED:\r\n          extendedTasks.forEach((task) => {\r\n            const currentGroup = this.taskIdCache.getTaskGroup(task.taskId);\r\n            if (currentGroup) {\r\n              // THE ISSUE WAS wrong overlord key... but we need to still allow other keys...\r\n              // we assume subAction will be overlord.taskId the new owner of the tasks...\r\n              // what if it is not? well i guess we save it to a list we can never access? somewhere in memory :D\r\n              // do not worry as API will just have tasks with new overlord... and later we can just get them from that overlord\r\n              // if we know which overlord now owns them :D\r\n              // what if we forget? search in a tree?\r\n              this.taskIdCache.moveTask(\r\n                task.taskId,\r\n                currentGroup,\r\n                'overlord_' + subAction || 'default'\r\n              );\r\n            }\r\n          });\r\n\r\n          break;\r\n        case TaskActions.DELETED:\r\n          extendedTasks.forEach((task) => {\r\n            const groupName = this.taskIdCache.getTaskGroup(task.taskId);\r\n            if (groupName) {\r\n              this.taskIdCache.deleteTask(task.taskId);\r\n            }\r\n          });\r\n          break;\r\n        case TaskActions.UPDATED:\r\n          this.taskIdCache.updateTasks(extendedTasks); // Just refresh cache with updated tasks\r\n          break;\r\n      }\r\n\r\n      const ids = this.transmutatorService.getIds(extendedTasks);\r\n\r\n      // Notify other services\r\n      this.eventBusService.updateTasks(extendedTasks);\r\n      this.taskActionService.recordBatchAction(ids, action, subAction);\r\n    } catch (error) {\r\n      console.error('Failed to update task batch:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transmutatorService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskActionService",
                        "type": "TaskActionTrackerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transmutatorService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskActionService",
                        "type": "TaskActionTrackerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskCacheService",
            "id": "injectable-TaskCacheService-0762f7891823db1a4b6fac225185f5dc6502eecbc7bc77cebebe8152ee076aaf7080ed9a7731e7fcb52b65580a92676261b27d6bafd44e447d4ae0932b5f21ce",
            "file": "src/app/services/cache/task-cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "specialKeys",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a task to the cache.\n",
                    "description": "<p>Add a task to the cache.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTaskWithTime",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the entire cache.\n",
                    "description": "<p>Clear the entire cache.</p>\n"
                },
                {
                    "name": "getAllTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMissingTaskIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFind IDs of tasks that are missing in the cache.\n",
                    "description": "<p>Find IDs of tasks that are missing in the cache.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask | null",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve a task by ID.\n",
                    "description": "<p>Retrieve a task by ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskBySpecialKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask | null",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve a task using a special key.\n",
                    "description": "<p>Retrieve a task using a special key.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve multiple tasks by IDs.\n",
                    "description": "<p>Retrieve multiple tasks by IDs.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a task exists and is not expired.\n",
                    "description": "<p>Check if a task exists and is not expired.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTask",
                    "args": [
                        {
                            "name": "extendedTask",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "extendedTask",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSpecialKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a special key to reference a specific task.\n",
                    "description": "<p>Add a special key to reference a specific task.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TASK_CONFIG } from '../../app.config';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskCacheService {\r\n  private cache: Map<string, { task: ExtendedTask; timestamp: number }> =\r\n    new Map();\r\n  private specialKeys: Map<string, string> = new Map(); // Special key -> taskId mapping\r\n\r\n  getAllTasks(): ExtendedTask[] {\r\n    return Array.from(this.cache.values()).map((entry) => entry.task);\r\n  }\r\n\r\n  addTaskWithTime(task: ExtendedTask) {\r\n    const timestamp = Date.now();\r\n    const data = { task, timestamp };\r\n    this.cache.set(task.taskId, data);\r\n  }\r\n  /**\r\n   * Add a task to the cache.\r\n   */\r\n  addTask(task: ExtendedTask): void {\r\n    this.addTaskWithTime(task);\r\n  }\r\n\r\n  removeTask(extendedTask: ExtendedTask) {\r\n    this.cache.delete(extendedTask.taskId);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a task by ID.\r\n   */\r\n  getTask(taskId: string): ExtendedTask | null {\r\n    const cached = this.cache.get(taskId);\r\n    if (cached) {\r\n      const isExpired =\r\n        Date.now() - cached.timestamp > TASK_CONFIG.CACHE_EXPIRATION_MS;\r\n      if (isExpired) {\r\n        this.cache.delete(taskId);\r\n        return null;\r\n      }\r\n      return cached.task;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Add a special key to reference a specific task.\r\n   */\r\n  setSpecialKey(key: string, taskId: string): void {\r\n    this.specialKeys.set(key, taskId);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a task using a special key.\r\n   */\r\n  getTaskBySpecialKey(key: string): ExtendedTask | null {\r\n    const taskId = this.specialKeys.get(key);\r\n    if (!taskId) {\r\n      return null;\r\n    }\r\n    return this.getTask(taskId);\r\n  }\r\n\r\n  /**\r\n   * Clear the entire cache.\r\n   */\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n    this.specialKeys.clear();\r\n  }\r\n\r\n  /**\r\n   * Retrieve multiple tasks by IDs.\r\n   */\r\n  getTasksByIds(taskIds: string[]): ExtendedTask[] {\r\n    return taskIds\r\n      .map((id) => this.cache.get(id)?.task)\r\n      .filter((task): task is ExtendedTask => task !== null);\r\n  }\r\n\r\n  /**\r\n   * Check if a task exists and is not expired.\r\n   */\r\n  hasTask(taskId: string): boolean {\r\n    const cachedTask = this.cache.get(taskId);\r\n    if (!cachedTask) return false;\r\n\r\n    if (Date.now() - cachedTask.timestamp > TASK_CONFIG.CACHE_EXPIRATION_MS) {\r\n      this.cache.delete(taskId); // Remove expired task\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Find IDs of tasks that are missing in the cache.\r\n   */\r\n  getMissingTaskIds(taskIds: string[]): string[] {\r\n    return taskIds.filter((id) => !this.cache.has(id));\r\n  }\r\n\r\n  // getTasks(): ExtendedTask[] {\r\n  //   return this.cache.entries().map((v) => v.task);\r\n  // }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskIdCacheService",
            "id": "injectable-TaskIdCacheService-51288ec292bb8230e4718d11f5574d28e0afc0a782c93a1e3c8d82dc6d9785b95b4a4ac778b4684338c325c87582c5673cb61680185c7ae4d0bb57dd09f7f6bc",
            "file": "src/app/services/cache/task-id-cache.service.ts",
            "properties": [
                {
                    "name": "idCache",
                    "defaultValue": "new Map<string, Set<string>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "taskToGroup",
                    "defaultValue": "new Map<string, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTasksWithGroup",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTaskToGroup",
                    "args": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canEditGroup",
                    "args": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createNewGroup",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListCacheState",
                    "args": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskListCacheResult | null",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskGroup",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fromGroup",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toGroup",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromGroup",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toGroup",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTaskFromGroup",
                    "args": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "extendedTasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "extendedTasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskCacheService } from './task-cache.service';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\ninterface TaskListCacheResult {\r\n  tasksWithData: ExtendedTask[]; // Tasks with data in cache\r\n  taskIdsWithoutData: string[]; // Task IDs with no data in cache\r\n  hasGroupAndCachedTasks: boolean; // True if all tasks are in cache\r\n  hasGroupAndSomeCachedTasks: boolean; // True if some tasks are in cache\r\n  hasGroupAndEmptyTasks: boolean; // True if the list exists but has no tasks\r\n  hasGroupAndNotCachedTasks: boolean; // True if the list exists but has no tasks\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskIdCacheService {\r\n  private idCache = new Map<string, Set<string>>(); // Map group name -> task ID set\r\n  private taskToGroup = new Map<string, string>(); // Map task ID -> group name\r\n\r\n  constructor(private taskCacheService: TaskCacheService) {}\r\n\r\n  // when moving multiple tasks from various places\r\n  getTaskGroup(taskId: string): string | undefined {\r\n    return this.taskToGroup.get(taskId);\r\n  }\r\n\r\n  removeTaskFromGroup(groupName: string, taskId: string): void {\r\n    const groupChildren = this.idCache.get(groupName);\r\n    if (groupChildren) {\r\n      groupChildren.delete(taskId);\r\n      this.taskToGroup.delete(taskId);\r\n      if (groupChildren.size === 0) {\r\n        this.idCache.delete(groupName);\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteTask(taskId: string): void {\r\n    // Collect all groups the task belongs to\r\n    const groupsContainingTask: string[] = [];\r\n\r\n    // Find all groups containing the task\r\n    for (const [groupName, groupChildren] of this.idCache.entries()) {\r\n      if (groupChildren.has(taskId)) {\r\n        groupsContainingTask.push(groupName);\r\n      }\r\n    }\r\n\r\n    // Remove the task from all groups it belongs to\r\n    groupsContainingTask.forEach((groupName) => {\r\n      const groupChildren = this.idCache.get(groupName);\r\n      if (groupChildren) {\r\n        groupChildren.delete(taskId); // Remove task from group\r\n        if (groupChildren.size === 0) {\r\n          this.idCache.delete(groupName); // Delete group if empty\r\n        }\r\n      }\r\n    });\r\n\r\n    // Remove task-to-group mapping\r\n    this.taskToGroup.delete(taskId);\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.idCache.clear();\r\n    this.taskToGroup.clear();\r\n  }\r\n\r\n  // moveTask(taskId: string, fromGroup: string, toGroup: string): void {\r\n  //   this.removeTaskFromGroup(fromGroup, taskId);\r\n  //   this.addTaskToGroup(toGroup, taskId);\r\n  // }\r\n\r\n  moveTask(taskId: string, fromGroup: string, toGroup: string): void {\r\n    if (this.canEditGroup(fromGroup)) {\r\n      this.removeTaskFromGroup(fromGroup, taskId);\r\n    } else {\r\n      console.warn(`Cannot edit group ${fromGroup} for task removal.`);\r\n    }\r\n\r\n    if (this.canEditGroup(toGroup)) {\r\n      this.addTaskToGroup(toGroup, taskId);\r\n    } else {\r\n      console.warn(`Cannot edit group ${toGroup} for task addition.`);\r\n    }\r\n  }\r\n\r\n  getTasksByIds(taskIds: string[]): ExtendedTask[] {\r\n    return taskIds\r\n      .map((id) => this.taskCacheService.getTask(id))\r\n      .filter((task): task is ExtendedTask => !!task);\r\n  }\r\n\r\n  getListCacheState(groupName: string): TaskListCacheResult | null {\r\n    const cache = this.idCache.get(groupName);\r\n\r\n    if (!cache) return null;\r\n    const groupIds = Array.from(cache);\r\n    const tasksWithData = groupIds\r\n      .map((id) => this.taskCacheService.getTask(id))\r\n      .filter((task): task is ExtendedTask => !!task);\r\n\r\n    return {\r\n      tasksWithData,\r\n      taskIdsWithoutData: groupIds.filter(\r\n        (id) => !this.taskCacheService.hasTask(id)\r\n      ),\r\n      hasGroupAndCachedTasks: tasksWithData.length === groupIds.length,\r\n      hasGroupAndSomeCachedTasks:\r\n        tasksWithData.length > 0 && tasksWithData.length < groupIds.length,\r\n      hasGroupAndEmptyTasks: groupIds.length === 0,\r\n      hasGroupAndNotCachedTasks:\r\n        groupIds.length > 0 && tasksWithData.length === 0,\r\n    };\r\n  }\r\n\r\n  addTasksWithGroup(tasks: ExtendedTask[], groupName: string): void {\r\n    if (!this.idCache.has(groupName)) {\r\n      console.warn(\r\n        `Group ${groupName} does not exist. Skipping task association.`\r\n      );\r\n      return;\r\n    }\r\n    tasks.forEach((task) => {\r\n      this.taskCacheService.addTaskWithTime(task);\r\n      if (this.idCache.has(groupName)) {\r\n        // no point adding to group we don't have from server\r\n        this.addTaskToGroup(groupName, task.taskId);\r\n      }\r\n    });\r\n  }\r\n\r\n  canEditGroup(groupName: string): boolean {\r\n    // Returns true if the group exists in cache\r\n    return this.idCache.has(groupName);\r\n  }\r\n\r\n  createNewGroup(tasks: ExtendedTask[], groupName: string): void {\r\n    tasks.forEach((task) => {\r\n      this.taskCacheService.addTaskWithTime(task);\r\n      this.addTaskToGroup(groupName, task.taskId);\r\n    });\r\n  }\r\n\r\n  updateTasks(extendedTasks: ExtendedTask[]) {\r\n    // without group name, if we are not moving.. might aswell just update to cache\r\n    extendedTasks.forEach((t) => {\r\n      this.taskCacheService.addTask(t);\r\n    });\r\n  }\r\n\r\n  addTaskToGroup(groupName: string, taskId: string): void {\r\n    if (!this.idCache.has(groupName)) {\r\n      this.idCache.set(groupName, new Set());\r\n    }\r\n    this.idCache.get(groupName)?.add(taskId);\r\n    this.taskToGroup.set(taskId, groupName);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskCacheService",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "taskCacheService",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListApiService",
            "id": "injectable-TaskListApiService-929cb3101af62720ab58639bf99bdb2fe126dc7d997f33e5b7621765734b5b51c5f8b329b43c74a39208dfe2016a4473e2ccf40f74a7efc7d59eb378a96e429c",
            "file": "src/app/services/api/task-list-api.service.ts",
            "properties": [
                {
                    "name": "TASK_LIST_LIMIT",
                    "defaultValue": "TASK_CONFIG.TASK_LIST_LIMIT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "executeQuery",
                    "args": [
                        {
                            "name": "collectionRef",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "constraints",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask[]>",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "collectionRef",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "constraints",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDailyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves daily repeating tasks.\n",
                    "description": "<p>Retrieves daily repeating tasks.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFavoriteTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFocusTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFrogTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestCreatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the latest tasks ordered by creation time.\n",
                    "description": "<p>Retrieves the latest tasks ordered by creation time.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestUpdatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the latest updated tasks.\n",
                    "description": "<p>Retrieves the latest updated tasks.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getMonthlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves monthly repeating tasks.\n",
                    "description": "<p>Retrieves monthly repeating tasks.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getOverlordTasks",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves overlord tasks with optional filters.\n",
                    "description": "<p>Retrieves overlord tasks with optional filters.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRepeatingTasks",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSession",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession | null>",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessionTasks",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskIdsToCrush",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskIdsToSplit",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByType",
                    "args": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksFromIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves tasks by their IDs.\n",
                    "description": "<p>Retrieves tasks by their IDs.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksToCrush",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTasksToSplit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTasksWithConstraints",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryConstraints",
                            "type": "QueryConstraint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryConstraints",
                            "type": "QueryConstraint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getWeeklyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves weekly repeating tasks.\n",
                    "description": "<p>Retrieves weekly repeating tasks.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getYearlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves yearly repeating tasks.\n",
                    "description": "<p>Retrieves yearly repeating tasks.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 412,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogs errors and ensures smooth operation.\n",
                    "description": "<p>Logs errors and ensures smooth operation.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "queryTasks",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "constraints",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "constraints",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  query,\r\n  where,\r\n  limit,\r\n  orderBy,\r\n  getDocs,\r\n  doc,\r\n  getDoc,\r\n  QueryConstraint,\r\n} from '@angular/fire/firestore';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TASK_CONFIG } from '../../app.config';\r\nimport { AuthService } from '../core/auth.service';\r\nimport { TaskListApiStrategy } from '../../models/service-strategies/task-list-strategy.interface';\r\nimport { TaskListKey } from '../../models/task-list-model';\r\nimport { TaskSettings, getDefaultTaskSettings } from '../../models/settings';\r\nimport { TaskTree, TaskTreeNode } from '../../models/taskTree';\r\nimport { TreeNodeService } from '../tree/tree-node.service';\r\nimport { TaskSession } from '../../features/core/nexus/session/task-session.model';\r\nimport { TaskTreeNodeToolsService } from '../tree/task-tree-node-tools.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskListApiService implements TaskListApiStrategy {\r\n  TASK_LIST_LIMIT = TASK_CONFIG.TASK_LIST_LIMIT;\r\n  constructor(\r\n    private firestore: Firestore,\r\n    private authService: AuthService,\r\n    private treeNodeToolsService: TaskTreeNodeToolsService\r\n  ) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  private async getSettings(userId: string): Promise<TaskSettings | null> {\r\n    const settingsDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/settings/${userId}`\r\n    );\r\n    try {\r\n      const docSnap = await getDoc(settingsDocRef);\r\n      if (docSnap.exists()) {\r\n        const data = docSnap.data();\r\n        return {\r\n          ...getDefaultTaskSettings(),\r\n          ...data,\r\n        };\r\n      } else {\r\n        return getDefaultTaskSettings();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get settings:', error);\r\n      return getDefaultTaskSettings();\r\n    }\r\n  }\r\n\r\n  async getFocusTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n    const settings = await this.getSettings(userId);\r\n    return settings?.focusTaskIds\r\n      ? this.getTasksFromIds(settings.focusTaskIds)\r\n      : null;\r\n  }\r\n\r\n  async getFavoriteTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n    const settings = await this.getSettings(userId);\r\n    return settings?.favoriteTaskIds\r\n      ? this.getTasksFromIds(settings.favoriteTaskIds)\r\n      : null;\r\n  }\r\n\r\n  async getFrogTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n    const settings = await this.getSettings(userId);\r\n    return settings?.frogTaskIds\r\n      ? this.getTasksFromIds(settings.frogTaskIds)\r\n      : null;\r\n  }\r\n\r\n  getTasksByType(taskListKey: TaskListKey): Promise<TaskoratorTask[] | null> {\r\n    switch (taskListKey.type) {\r\n      case 'daily':\r\n        return this.getDailyTasks();\r\n      case 'weekly':\r\n        return this.getWeeklyTasks();\r\n      case 'monthly':\r\n        return this.getMonthlyTasks();\r\n      case 'yearly':\r\n        return this.getYearlyTasks();\r\n      case 'focus':\r\n        return this.getFocusTasks();\r\n      case 'frog':\r\n        return this.getFrogTasks();\r\n      case 'favorite':\r\n        return this.getFavoriteTasks();\r\n      case 'latestUpdated':\r\n        return this.getLatestUpdatedTasks();\r\n      case 'latestCreated':\r\n        return this.getLatestCreatedTasks();\r\n      case 'overlord':\r\n        return this.getOverlordTasks(taskListKey.data);\r\n      case 'session':\r\n        return this.getSessionTasks(taskListKey.data);\r\n      default:\r\n        return Promise.resolve(null);\r\n    }\r\n  }\r\n\r\n  async getSessionTasks(sessionId: string): Promise<TaskoratorTask[] | null> {\r\n    const session = await this.getSession(sessionId);\r\n    return session?.taskIds ? this.getTasksFromIds(session.taskIds) : null;\r\n  }\r\n\r\n  private async getSession(sessionId: string): Promise<TaskSession | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const sessionRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/task-sessions/${sessionId}`\r\n    );\r\n    try {\r\n      const sessionSnap = await getDoc(sessionRef);\r\n      return sessionSnap.exists() ? (sessionSnap.data() as TaskSession) : null;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch session with ID ${sessionId}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getTree(userId: string): Promise<TaskTree | null> {\r\n    const treeDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/taskTrees/${userId}`\r\n    );\r\n    try {\r\n      const docSnap = await getDoc(treeDocRef);\r\n      if (docSnap.exists()) {\r\n        return docSnap.data() as TaskTree;\r\n      } else {\r\n        console.warn('No task tree found for user');\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch task tree:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getTaskIdsToSplit(\r\n    userId: string\r\n  ): Promise<TaskTreeNode[] | null> {\r\n    const taskTree = await this.getTree(userId);\r\n    if (!taskTree) {\r\n      return null;\r\n    }\r\n\r\n    const tasksToSplit: TaskTreeNode[] = [];\r\n    const traverse = (node: TaskTreeNode) => {\r\n      if (\r\n        this.treeNodeToolsService.hasManyDescendants(node, 20) ||\r\n        this.treeNodeToolsService.isDeeplyNested(node, 3)\r\n      ) {\r\n        tasksToSplit.push(node);\r\n      }\r\n      node.children.forEach(traverse);\r\n    };\r\n\r\n    traverse(taskTree.primarch);\r\n    return tasksToSplit.length > 0 ? tasksToSplit : null;\r\n  }\r\n\r\n  private async getTaskIdsToCrush(\r\n    userId: string\r\n  ): Promise<TaskTreeNode[] | null> {\r\n    const taskTree = await this.getTree(userId);\r\n    if (!taskTree) {\r\n      return null;\r\n    }\r\n\r\n    const tasksToCrush: TaskTreeNode[] = [];\r\n    const traverse = (node: TaskTreeNode) => {\r\n      if (node.children.length > 10) {\r\n        tasksToCrush.push(node);\r\n      }\r\n      node.children.forEach(traverse);\r\n    };\r\n\r\n    traverse(taskTree.primarch);\r\n    return tasksToCrush.length > 0 ? tasksToCrush : null;\r\n  }\r\n\r\n  async getTasksToSplit(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n    const nodes: TaskTreeNode[] | null = await this.getTaskIdsToSplit(userId);\r\n    if (!nodes) return null;\r\n    const ids = nodes.map((n) => n.taskId);\r\n    return this.getTasksFromIds(ids);\r\n  }\r\n\r\n  async getTasksToCrush(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n    const nodes: TaskTreeNode[] | null = await this.getTaskIdsToCrush(userId);\r\n    if (!nodes) return null;\r\n    const ids = nodes.map((n) => n.taskId);\r\n    return this.getTasksFromIds(ids);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the latest tasks ordered by creation time.\r\n   */\r\n  async getLatestCreatedTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    return this.queryTasks(userId, [\r\n      where('stage', '==', 'todo'),\r\n      orderBy('timeCreated', 'desc'),\r\n      limit(this.TASK_LIST_LIMIT),\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the latest updated tasks.\r\n   */\r\n  async getLatestUpdatedTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    return this.queryTasks(userId, [\r\n      orderBy('lastUpdated', 'desc'),\r\n      limit(this.TASK_LIST_LIMIT),\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Retrieves overlord tasks with optional filters.\r\n   */\r\n  async getOverlordTasks(taskId: string): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const constraints = [\r\n      where('overlord', '==', taskId),\r\n      where('stage', '==', 'todo'), // Default filter for \"todo\"\r\n      limit(this.TASK_LIST_LIMIT * 5),\r\n    ];\r\n    return this.getTasksWithConstraints(userId, constraints);\r\n  }\r\n\r\n  /**\r\n   * Retrieves daily repeating tasks.\r\n   */\r\n  async getDailyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    return this.getRepeatingTasks(userId, 'daily');\r\n  }\r\n\r\n  /**\r\n   * Retrieves weekly repeating tasks.\r\n   */\r\n  async getWeeklyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    return this.getRepeatingTasks(userId, 'weekly');\r\n  }\r\n\r\n  /**\r\n   * Retrieves monthly repeating tasks.\r\n   */\r\n  async getMonthlyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    return this.getRepeatingTasks(userId, 'monthly');\r\n  }\r\n\r\n  /**\r\n   * Retrieves yearly repeating tasks.\r\n   */\r\n  async getYearlyTasks(): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    return this.getRepeatingTasks(userId, 'yearly');\r\n  }\r\n\r\n  // task repetition:\r\n  async getRepeatingTasks(\r\n    userId: string,\r\n    repeatInterval: string\r\n  ): Promise<TaskoratorTask[] | null> {\r\n    const queryConstraints: QueryConstraint[] = [\r\n      where('repeat', '==', repeatInterval),\r\n      limit(TASK_CONFIG.TASK_LIST_LIMIT),\r\n    ];\r\n    return this.getTasksWithConstraints(userId, queryConstraints);\r\n  }\r\n\r\n  async getTasksWithConstraints(\r\n    userId: string,\r\n    queryConstraints: QueryConstraint[]\r\n  ): Promise<TaskoratorTask[] | null> {\r\n    try {\r\n      const tasksCollection = collection(\r\n        this.firestore,\r\n        `users/${userId}/tasks`\r\n      );\r\n      const taskQuery = query(tasksCollection, ...queryConstraints);\r\n      const querySnapshot = await getDocs(taskQuery);\r\n\r\n      if (!querySnapshot.empty) {\r\n        const tasks = querySnapshot.docs.map(\r\n          (doc) => ({ taskId: doc.id, ...doc.data() } as TaskoratorTask)\r\n        );\r\n        return tasks;\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching tasks with constraints:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves tasks by their IDs.\r\n   */\r\n  async getTasksFromIds(taskIds: string[]): Promise<TaskoratorTask[] | null> {\r\n    const userId = this.getUserId();\r\n\r\n    if (taskIds.length === 0) {\r\n      console.warn('TaskListApiService.getTasksFromIds: No task IDs provided');\r\n      return null;\r\n    }\r\n\r\n    const tasks: TaskoratorTask[] = [];\r\n    const tasksCollection = collection(this.firestore, `users/${userId}/tasks`);\r\n\r\n    try {\r\n      for (let i = 0; i < taskIds.length; i += 10) {\r\n        const batchIds = taskIds.slice(i, i + 10);\r\n        const queryConstraints = [\r\n          where('taskId', 'in', batchIds),\r\n          where('stage', '==', 'todo'),\r\n        ];\r\n        const querySnapshot = await this.executeQuery(\r\n          tasksCollection,\r\n          queryConstraints\r\n        );\r\n\r\n        tasks.push(...querySnapshot);\r\n      }\r\n      return tasks.length > 0 ? tasks : null;\r\n    } catch (error) {\r\n      this.handleError('getTasksFromIds', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async queryTasks(\r\n    userId: string,\r\n    constraints: any[]\r\n  ): Promise<TaskoratorTask[] | null> {\r\n    const tasksCollection = collection(this.firestore, `users/${userId}/tasks`);\r\n    try {\r\n      const querySnapshot = await this.executeQuery(\r\n        tasksCollection,\r\n        constraints\r\n      );\r\n      return querySnapshot.length > 0 ? querySnapshot : null;\r\n    } catch (error) {\r\n      this.handleError('queryTasks', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async executeQuery(\r\n    collectionRef: any,\r\n    constraints: any[]\r\n  ): Promise<TaskoratorTask[]> {\r\n    try {\r\n      const tasksQuery = query(collectionRef, ...constraints);\r\n      const querySnapshot = await getDocs(tasksQuery);\r\n      return querySnapshot.docs\r\n        .map((doc) => {\r\n          const data = doc.data();\r\n          if (data) {\r\n            return { taskId: doc.id, ...data } as TaskoratorTask;\r\n          } else {\r\n            console.warn(\r\n              `TaskListApiService.executeQuery: Missing data for doc ${doc.id}`\r\n            );\r\n            return null; // Fallback for missing data\r\n          }\r\n        })\r\n        .filter((task): task is TaskoratorTask => task !== null); // Filter out null values\r\n    } catch (error) {\r\n      this.handleError('executeQuery', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs errors and ensures smooth operation.\r\n   */\r\n  private handleError(method: string, error: unknown): void {\r\n    console.warn(`TaskListApiService.${method} failed:`, error);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListAssistantService",
            "id": "injectable-TaskListAssistantService-86e13a070e4524e06164be12803bf61185a7f42bb2f4270b260522d98b549c49a732754973612645cc3fcb611d9c3bfdbc824237fb9fd2ace0509dd400c6db98",
            "file": "src/app/services/api/task-list-assistant-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "calculatePeriodTimes",
                    "args": [
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterCompleted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterCompleted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskTree, TaskTreeNode } from '../../models/taskTree';\r\nimport { TreeNodeService } from '../tree/tree-node.service';\r\nimport { TASK_CONFIG } from '../../app.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskListAssistantService {\r\n  constructor(private taskTreeNodeService: TreeNodeService) {}\r\n\r\n  // // crush or split:\r\n  // /**\r\n  //  * Retrieves tasks that should be split into smaller tasks.\r\n  //  * These tasks are identified by having a significant number of total descendants\r\n  //  * or by being deeply nested within the task tree.\r\n  //  * @param taskTree - The root of the task tree.\r\n  //  * @returns An array of tasks that should be split.\r\n  //  */\r\n  // getTasksToSplit(taskTree: TaskTree): TaskTreeNode[] {\r\n  //   const tasksToSplit: TaskTreeNode[] = [];\r\n\r\n  //   const traverse = (task: TaskTreeNode) => {\r\n  //     if (\r\n  //       this.taskTreeNodeService.hasManyDescendants(task, 20) ||\r\n  //       this.taskTreeNodeService.isDeeplyNested(task, 3)\r\n  //     ) {\r\n  //       tasksToSplit.push(task);\r\n  //     }\r\n  //     task.children.forEach(traverse);\r\n  //   };\r\n\r\n  //   traverse(taskTree.primarch);\r\n  //   return tasksToSplit;\r\n  // }\r\n\r\n  // /**\r\n  //  * Retrieves tasks that should be crushed and organized.\r\n  //  * These tasks have a high number of immediate children and can become bottlenecks.\r\n  //  * @param taskTree - The root of the task tree.\r\n  //  * @returns An array of tasks that should be crushed.\r\n  //  */\r\n  // getTasksToCrush(taskTree: TaskTree): TaskTreeNode[] {\r\n  //   const tasksToCrush: TaskTreeNode[] = [];\r\n\r\n  //   const traverse = (task: TaskTreeNode) => {\r\n  //     if (task.children.length > 10) {\r\n  //       // Example threshold\r\n  //       tasksToCrush.push(task);\r\n  //     }\r\n  //     task.children.forEach(traverse);\r\n  //   };\r\n\r\n  //   traverse(taskTree.primarch);\r\n  //   return tasksToCrush;\r\n  // }\r\n\r\n  private calculatePeriodTimes(repeatInterval: string): {\r\n    startTime: number;\r\n    endTime: number;\r\n  } {\r\n    let startTime: number;\r\n    let endTime: number;\r\n    const currentDate = new Date();\r\n\r\n    switch (repeatInterval) {\r\n      case 'daily':\r\n        currentDate.setHours(0, 0, 0, 0);\r\n        startTime = currentDate.getTime();\r\n        endTime = startTime + 24 * 60 * 60 * 1000; // Next day start\r\n        break;\r\n      case 'weekly':\r\n        const startOfWeek = new Date(currentDate);\r\n        startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());\r\n        startOfWeek.setHours(0, 0, 0, 0);\r\n        startTime = startOfWeek.getTime();\r\n        endTime = startTime + 7 * 24 * 60 * 60 * 1000; // Next week start\r\n        break;\r\n      case 'monthly':\r\n        const startOfMonth = new Date(\r\n          currentDate.getFullYear(),\r\n          currentDate.getMonth(),\r\n          1\r\n        );\r\n        startOfMonth.setHours(0, 0, 0, 0);\r\n        startTime = startOfMonth.getTime();\r\n        const nextMonth = new Date(\r\n          currentDate.getFullYear(),\r\n          currentDate.getMonth() + 1,\r\n          1\r\n        );\r\n        endTime = nextMonth.getTime(); // Next month start\r\n        break;\r\n      case 'yearly':\r\n        const startOfYear = new Date(currentDate.getFullYear(), 0, 1);\r\n        startOfYear.setHours(0, 0, 0, 0);\r\n        startTime = startOfYear.getTime();\r\n        const nextYear = new Date(currentDate.getFullYear() + 1, 0, 1);\r\n        endTime = nextYear.getTime(); // Next year start\r\n        break;\r\n      default:\r\n        currentDate.setHours(0, 0, 0, 0);\r\n        startTime = currentDate.getTime();\r\n        endTime = startTime + 24 * 60 * 60 * 1000; // Default to daily\r\n        break;\r\n    }\r\n\r\n    return { startTime, endTime };\r\n  }\r\n\r\n  public filterTasks(\r\n    tasks: TaskoratorTask[],\r\n    filterCompleted: boolean,\r\n    repeatInterval: string\r\n  ): TaskoratorTask[] {\r\n    if (!filterCompleted) {\r\n      return tasks;\r\n    }\r\n\r\n    const { startTime, endTime } = this.calculatePeriodTimes(repeatInterval);\r\n\r\n    const filteredTasks = tasks.filter((task) => {\r\n      const isOutsideCurrentPeriod =\r\n        task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      console.log(\r\n        `Task ${task.taskId} Task ${task.name} lastUpdated: ${task.lastUpdated}, startTime: ${startTime}, endTime: ${endTime}, isOutsideCurrentPeriod: ${isOutsideCurrentPeriod}`\r\n      );\r\n      return isOutsideCurrentPeriod;\r\n    });\r\n\r\n    return filteredTasks;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskTreeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "taskTreeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListRulesService",
            "id": "injectable-TaskListRulesService-8923c6d6c389238dfaab3394d73c4a8b917b64fb3e4e8ed82727c3ae613cd870021b74f945ccfe78f066112658d375e23a7b7bc96f7c8d121dc63c83b6fe27c7",
            "file": "src/app/services/tasks/task-list-rules.service.ts",
            "properties": [
                {
                    "name": "lists",
                    "defaultValue": "new Map<string, TaskListRules>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyRulesToList",
                    "args": [
                        {
                            "name": "key",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply rules to tasks in a specific list.\n",
                    "description": "<p>Apply rules to tasks in a specific list.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "key",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskListRules | null",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet a list by its type and associated data.\n",
                    "description": "<p>Get a list by its type and associated data.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeDefaultLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  TaskListRules,\r\n  defaultTaskLists,\r\n  TaskListKey,\r\n} from '../../models/task-list-model';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskListRulesService {\r\n  private lists = new Map<string, TaskListRules>();\r\n\r\n  constructor() {\r\n    this.initializeDefaultLists();\r\n  }\r\n\r\n  private initializeDefaultLists(): void {\r\n    defaultTaskLists.forEach((list) => this.lists.set(list.type, { ...list }));\r\n  }\r\n\r\n  /**\r\n   * Get a list by its type and associated data.\r\n   */\r\n  getList(key: TaskListKey): TaskListRules | null {\r\n    // const id = getIdFromKey(key);\r\n\r\n    // since we generalize lists like overlord and session...\r\n    return this.lists.get(key.type) || null;\r\n  }\r\n\r\n  /**\r\n   * Apply rules to tasks in a specific list.\r\n   */\r\n  applyRulesToList(key: TaskListKey, tasks: ExtendedTask[]): ExtendedTask[] {\r\n    const list = this.getList(key);\r\n    if (!list || !list.rules) return tasks;\r\n\r\n    const { filter, sorter } = list.rules;\r\n    let filteredTasks = filter ? tasks.filter(filter) : tasks;\r\n    if (sorter) {\r\n      filteredTasks = filteredTasks.sort(sorter);\r\n    }\r\n    return filteredTasks;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListService",
            "id": "injectable-TaskListService-93dc197bbbe5fe16b1da72be837de5a050138124fc0c9634d48f4d97ba57e4f25813d7a12505ebd2447d8176a3130066d32db5e4901e00d76d9812a55a58be7e",
            "file": "src/app/services/sync-api-cache/task-list.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [
                {
                    "name": "ensureApiService",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiStrategy",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetchMissingTasks",
                    "args": [
                        {
                            "name": "missingIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fetchFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "missingIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fetchFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCachedTasks",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDailyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFavoriteTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFocusTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getFrogTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getLatestUpdatedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getMissingTaskIds",
                    "args": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getOverlordTasks",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet tasks for a specific overlord as ExtendedTask[]\n",
                    "description": "<p>Get tasks for a specific overlord as ExtendedTask[]</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRepeatingTasks",
                    "args": [
                        {
                            "name": "type",
                            "type": "RepeatType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGeneric method to handle repeating tasks, returning ExtendedTask[]\n",
                    "description": "<p>Generic method to handle repeating tasks, returning ExtendedTask[]</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "RepeatType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingsTasks",
                    "args": [
                        {
                            "name": "key",
                            "type": "SettingsType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGeneric method to handle settings-based tasks, returning ExtendedTask[]\n",
                    "description": "<p>Generic method to handle settings-based tasks, returning ExtendedTask[]</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "SettingsType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskGroupWithCache",
                    "args": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fetchFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMain GETTER:\nRetrieves a group of tasks using the cache when possible,\nand falls back to the API for any missing tasks.\n",
                    "description": "<p>Main GETTER:\nRetrieves a group of tasks using the cache when possible,\nand falls back to the API for any missing tasks.</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fetchFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet tasks by IDs, dynamically fetching any missing ones.\n",
                    "description": "<p>Get tasks by IDs, dynamically fetching any missing ones.</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWeeklyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getYearlyTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCacheAndReturnTasks",
                    "args": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fetchedTasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedTaskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fetchedTasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedTaskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskIdCacheService } from '../cache/task-id-cache.service';\r\nimport { TaskCacheService } from '../cache/task-cache.service';\r\nimport { SettingsService } from '../sync-api-cache/settings.service';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { ExtendedTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport {\r\n  getIdFromKey,\r\n  TaskListKey,\r\n  TaskListSubtype,\r\n  TaskListType,\r\n} from '../../models/task-list-model';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\nimport { TaskTransmutationService } from '../tasks/task-transmutation.service';\r\nimport { EventBusService } from '../core/event-bus.service';\r\n\r\ntype RepeatType = 'daily' | 'weekly' | 'monthly' | 'yearly';\r\ntype SettingsType = 'focus' | 'frog' | 'favorite';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskListService {\r\n  apiService: ApiStrategy | null = null;\r\n  initialize(apiStrategy: ApiStrategy): void {\r\n    this.apiService = apiStrategy;\r\n    console.log('TaskListService initialized with API strategy');\r\n  }\r\n  private ensureApiService(): ApiStrategy {\r\n    if (!this.apiService) {\r\n      throw new Error('API service is not initialized.');\r\n    }\r\n    return this.apiService;\r\n  }\r\n\r\n  // TODO: since here we get superoverlord... we might aswell tell event bus...\r\n  constructor(\r\n    private taskIdCache: TaskIdCacheService,\r\n    private taskCache: TaskCacheService,\r\n    private settingsService: SettingsService,\r\n    private transmutatorService: TaskTransmutationService,\r\n    private eventBusService: EventBusService\r\n  ) {}\r\n\r\n  // Main GETTER:\r\n  /**\r\n   * Main GETTER:\r\n   * Retrieves a group of tasks using the cache when possible,\r\n   * and falls back to the API for any missing tasks.\r\n   */\r\n  private async getTaskGroupWithCache(\r\n    taskListKey: TaskListKey,\r\n    fetchFn: () => Promise<TaskoratorTask[] | null>\r\n  ): Promise<ExtendedTask[] | null> {\r\n    const groupName = getIdFromKey(taskListKey);\r\n    const cacheState = this.taskIdCache.getListCacheState(groupName);\r\n\r\n    if (cacheState?.hasGroupAndEmptyTasks) {\r\n      console.log(\r\n        'getTaskGroupWithCache: cached and empty ' +\r\n          taskListKey.type +\r\n          taskListKey.data\r\n      );\r\n      this.eventBusService.getTasks([], taskListKey);\r\n      return []; // Known to be empty, no need to fetch\r\n    }\r\n\r\n    if (cacheState?.hasGroupAndCachedTasks) {\r\n      console.log(\r\n        'getTaskGroupWithCache: fully cached ' +\r\n          taskListKey.type +\r\n          taskListKey.data\r\n      );\r\n\r\n      this.eventBusService.getTasks(cacheState.tasksWithData, taskListKey);\r\n\r\n      return cacheState.tasksWithData; // Return fully cached tasks\r\n    }\r\n\r\n    // not cached as a list\r\n    if (!cacheState) {\r\n      console.log(\r\n        'getTaskGroupWithCache: no group not cached ' +\r\n          taskListKey.type +\r\n          taskListKey.data\r\n      );\r\n      const fetchAll = (await fetchFn()) || [];\r\n      const converted = this.transmutatorService.toExtendedTasks(fetchAll);\r\n      this.taskIdCache.createNewGroup(converted, groupName);\r\n      this.eventBusService.getTasks(converted, taskListKey);\r\n      return converted;\r\n    }\r\n\r\n    // not cached as a list\r\n    if (cacheState.hasGroupAndNotCachedTasks) {\r\n      console.log(\r\n        'getTaskGroupWithCache: has group but not cached tasks ' +\r\n          taskListKey.type +\r\n          taskListKey.data\r\n      );\r\n      const fetchAll = (await fetchFn()) || [];\r\n      const converted = this.transmutatorService.toExtendedTasks(fetchAll);\r\n      this.taskIdCache.createNewGroup(converted, groupName);\r\n      this.eventBusService.getTasks(converted, taskListKey);\r\n\r\n      return converted;\r\n    }\r\n\r\n    // partially cached, fetch missing, add and return\r\n    if (cacheState?.hasGroupAndSomeCachedTasks) {\r\n      console.log(\r\n        'getTaskGroupWithCache: has group and some cached tasks ' +\r\n          taskListKey.type +\r\n          taskListKey.data\r\n      );\r\n      // Fetch missing tasks from API\r\n      const missingTasks =\r\n        cacheState.taskIdsWithoutData.length > 0\r\n          ? await this.ensureApiService().getTasksFromIds(\r\n              cacheState.taskIdsWithoutData\r\n            )\r\n          : [];\r\n\r\n      // Combine cached and fetched tasks\r\n      if (!missingTasks) return null;\r\n      const extendedTasks =\r\n        this.transmutatorService.toExtendedTasks(missingTasks);\r\n      this.taskIdCache.addTasksWithGroup(extendedTasks, groupName);\r\n\r\n      const tasksAndMissing = [...cacheState.tasksWithData, ...extendedTasks];\r\n      this.eventBusService.getTasks(tasksAndMissing, taskListKey);\r\n\r\n      return tasksAndMissing;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // private getCachedTaskIds(taskListKey: TaskListKey): string[] {\r\n  //   const groupName = getIdFromKey(taskListKey);\r\n  //   return this.taskIdCache.getGroupTaskIds(groupName);\r\n  // }\r\n  private getMissingTaskIds(taskIds: string[]): string[] {\r\n    return taskIds.filter((id) => !this.taskCache.getTask(id));\r\n  }\r\n  private getCachedTasks(taskIds: string[]): ExtendedTask[] {\r\n    return this.taskIdCache.getTasksByIds(taskIds);\r\n  }\r\n  private async fetchMissingTasks(\r\n    missingIds: string[],\r\n    fetchFn: () => Promise<TaskoratorTask[] | null>\r\n  ): Promise<ExtendedTask[] | null> {\r\n    if (missingIds.length === 0) return null;\r\n\r\n    const fetchedTasks = await fetchFn();\r\n    return fetchedTasks\r\n      ? this.transmutatorService.toExtendedTasks(fetchedTasks)\r\n      : null;\r\n  }\r\n\r\n  private updateCacheAndReturnTasks(\r\n    taskListKey: TaskListKey,\r\n    fetchedTasks: ExtendedTask[],\r\n    cachedTaskIds: string[]\r\n  ): ExtendedTask[] {\r\n    // Add fetched tasks to the specified group\r\n    const groupName = getIdFromKey(taskListKey);\r\n    this.taskIdCache.addTasksWithGroup(fetchedTasks, groupName);\r\n\r\n    // Combine cached and fetched tasks\r\n    return [...this.getCachedTasks(cachedTaskIds), ...fetchedTasks];\r\n  }\r\n\r\n  async getLatestUpdatedTasks(): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.LATEST_UPDATED,\r\n      data: TaskListSubtype.API,\r\n    };\r\n    return this.getTaskGroupWithCache(taskListKey, () =>\r\n      this.ensureApiService().getLatestUpdatedTasks()\r\n    );\r\n  }\r\n\r\n  async getLatestTasks(): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.LATEST_CREATED,\r\n      data: TaskListSubtype.API,\r\n    };\r\n    return this.getTaskGroupWithCache(taskListKey, () =>\r\n      this.ensureApiService().getLatestCreatedTasks()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get tasks for a specific overlord as ExtendedTask[]\r\n   */\r\n  async getOverlordTasks(overlordId: string): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.OVERLORD,\r\n      data: overlordId,\r\n    };\r\n    return this.getTaskGroupWithCache(taskListKey, () =>\r\n      this.ensureApiService().getOverlordTasks(overlordId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generic method to handle settings-based tasks, returning ExtendedTask[]\r\n   */\r\n  private async getSettingsTasks(\r\n    key: SettingsType\r\n  ): Promise<ExtendedTask[] | null> {\r\n    const settings: TaskSettings | null =\r\n      await this.settingsService.getSettingsOnce();\r\n    if (!settings) return null;\r\n\r\n    const idMap = {\r\n      focus: settings.focusTaskIds,\r\n      frog: settings.frogTaskIds,\r\n      favorite: settings.favoriteTaskIds,\r\n    };\r\n    const typeMap = {\r\n      focus: TaskListType.FOCUS,\r\n      frog: TaskListType.FROG,\r\n      favorite: TaskListType.FAVORITE,\r\n    };\r\n\r\n    const ids = idMap[key];\r\n    const type = typeMap[key];\r\n    if (!ids || !type) return null;\r\n\r\n    const taskListKey: TaskListKey = {\r\n      type: type,\r\n      data: TaskListSubtype.SETTINGS,\r\n    };\r\n    const tasks = await this.getTasks(ids, taskListKey);\r\n    return tasks ? this.transmutatorService.toExtendedTasks(tasks) : null;\r\n  }\r\n\r\n  async getFocusTasks(): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.FOCUS,\r\n      data: TaskListSubtype.SETTINGS,\r\n    };\r\n    return this.getTaskGroupWithCache(taskListKey, () =>\r\n      this.getSettingsTasks('focus')\r\n    );\r\n    // return this.getSettingsTasks('focus');\r\n  }\r\n\r\n  async getFrogTasks(): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.FROG,\r\n      data: TaskListSubtype.SETTINGS,\r\n    };\r\n    return this.getTaskGroupWithCache(taskListKey, () =>\r\n      this.getSettingsTasks('frog')\r\n    );\r\n    // return this.getSettingsTasks('frog');\r\n  }\r\n\r\n  async getFavoriteTasks(): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.FAVORITE,\r\n      data: TaskListSubtype.SETTINGS,\r\n    };\r\n    return this.getTaskGroupWithCache(taskListKey, () =>\r\n      this.getSettingsTasks('favorite')\r\n    );\r\n    // return this.getSettingsTasks('favorite');\r\n  }\r\n\r\n  /**\r\n   * Generic method to handle repeating tasks, returning ExtendedTask[]\r\n   */\r\n  private async getRepeatingTasks(\r\n    type: RepeatType\r\n  ): Promise<ExtendedTask[] | null> {\r\n    const taskListKey: TaskListKey = {\r\n      type: TaskListType.DAILY,\r\n      data: TaskListSubtype.REPEATING,\r\n    };\r\n    switch (type) {\r\n      case 'daily':\r\n        taskListKey.type = TaskListType.DAILY;\r\n        break;\r\n      case 'weekly':\r\n        taskListKey.type = TaskListType.WEEKLY;\r\n        break;\r\n      case 'monthly':\r\n        taskListKey.type = TaskListType.MONTHLY;\r\n        break;\r\n      case 'yearly':\r\n        taskListKey.type = TaskListType.YEARLY;\r\n        break;\r\n    }\r\n\r\n    return this.getTaskGroupWithCache(taskListKey, () => {\r\n      const api = this.ensureApiService();\r\n      const apiMethodMap = {\r\n        daily: api.getDailyTasks.bind(api),\r\n        weekly: api.getWeeklyTasks.bind(api),\r\n        monthly: api.getMonthlyTasks.bind(api),\r\n        yearly: api.getYearlyTasks.bind(api),\r\n      };\r\n      return apiMethodMap[type]();\r\n    });\r\n  }\r\n\r\n  async getDailyTasks(): Promise<ExtendedTask[] | null> {\r\n    return this.getRepeatingTasks('daily');\r\n  }\r\n\r\n  async getWeeklyTasks(): Promise<ExtendedTask[] | null> {\r\n    return this.getRepeatingTasks('weekly');\r\n  }\r\n\r\n  async getMonthlyTasks(): Promise<ExtendedTask[] | null> {\r\n    return this.getRepeatingTasks('monthly');\r\n  }\r\n\r\n  async getYearlyTasks(): Promise<ExtendedTask[] | null> {\r\n    return this.getRepeatingTasks('yearly');\r\n  }\r\n\r\n  /**\r\n   * @warn do not use, it is ambiguous, what is this list name, what if part of it is missing? how you know if tasks are loose?\r\n   * Get tasks by IDs, dynamically fetching any missing ones.\r\n   */\r\n  private async getTasks(\r\n    ids: string[],\r\n    taskListKey: TaskListKey\r\n  ): Promise<ExtendedTask[] | null> {\r\n    const groupName = getIdFromKey(taskListKey);\r\n\r\n    // Retrieve tasks from cache\r\n    const cachedTasks = this.taskIdCache.getTasksByIds(ids);\r\n    const missingIds = ids.filter(\r\n      (id) => !cachedTasks.find((task: ExtendedTask) => task.taskId === id)\r\n    );\r\n\r\n    if (missingIds.length > 0) {\r\n      // Fetch missing tasks from the API\r\n      const fetchedTasks = await this.ensureApiService().getTasksFromIds(\r\n        missingIds\r\n      );\r\n      if (fetchedTasks) {\r\n        const extendedFetchedTasks =\r\n          this.transmutatorService.toExtendedTasks(fetchedTasks);\r\n\r\n        // Add fetched tasks to the cache\r\n        this.taskIdCache.addTasksWithGroup(extendedFetchedTasks, groupName);\r\n\r\n        return [...cachedTasks, ...extendedFetchedTasks];\r\n      }\r\n    }\r\n\r\n    return cachedTasks;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transmutatorService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transmutatorService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListSimpleService",
            "id": "injectable-TaskListSimpleService-59427aede720ee063028c4c1b6e49ab362d04f227236c9c67183b2bc59facf372db5a03b90537ab1b10767e6674920cd7edb08724af18c2081be7d91a710c605",
            "file": "src/app/services/tasks/task-list-simple.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskListKey, TaskListType } from '../../models/task-list-model';\r\nimport { ExtendedTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskListService } from '../sync-api-cache/task-list.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskListSimpleService {\r\n  constructor(private taskListService: TaskListService) {}\r\n\r\n  async getList(taskListKey: TaskListKey): Promise<ExtendedTask[] | null> {\r\n    switch (taskListKey.type) {\r\n      case 'daily':\r\n        return this.taskListService.getDailyTasks();\r\n      case 'weekly':\r\n        return this.taskListService.getWeeklyTasks();\r\n      case 'monthly':\r\n        return this.taskListService.getMonthlyTasks();\r\n      case 'yearly':\r\n        return this.taskListService.getYearlyTasks();\r\n      case 'focus':\r\n        return this.taskListService.getFocusTasks();\r\n      case 'frog':\r\n        return this.taskListService.getFrogTasks();\r\n      case 'favorite':\r\n        return this.taskListService.getFavoriteTasks();\r\n      case 'latestUpdated':\r\n        return this.taskListService.getLatestUpdatedTasks();\r\n      case 'latestCreated':\r\n        return this.taskListService.getLatestTasks();\r\n      case 'overlord':\r\n        return this.taskListService.getOverlordTasks(taskListKey.data);\r\n      // case 'session':\r\n      // should be handled elsewhere with session service as we need to query session, then task ids from session\r\n      //   return this.taskListService.getSessionTasks(taskListKey.data);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskNavigatorUltraService",
            "id": "injectable-TaskNavigatorUltraService-a42d0d98f6be31109b5ac09885392e5da4c92c2f5c2d207dbecf08bf4165264da0af9bef6caabb60ef2fcbd6f2fc02157dea77a866f494716b989d91bd3e25e1",
            "file": "src/app/services/tasks/task-navigator-ultra.service.ts",
            "properties": [
                {
                    "name": "originalListGroup",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListKey | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "backToPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigate back to the previous overlord (super overlord).\n",
                    "description": "<p>Navigate back to the previous overlord (super overlord).</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "backToStart",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigate back to the original task list or to the root task if unavailable.\n",
                    "description": "<p>Navigate back to the original task list or to the root task if unavailable.</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loadAndInitializeTasks",
                    "args": [
                        {
                            "name": "originalListGroup",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad and initialize tasks, then update the view.\n",
                    "description": "<p>Load and initialize tasks, then update the view.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "originalListGroup",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFetch and display the next set of tasks for a given task.\n",
                    "description": "<p>Fetch and display the next set of tasks for a given task.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previous",
                    "args": [
                        {
                            "name": "taskOverlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFetch and display the previous set of tasks for a given task.\n",
                    "description": "<p>Fetch and display the previous set of tasks for a given task.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskOverlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateView",
                    "args": [
                        {
                            "name": "taskListGroup",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNotify the TaskViewService to update the view with the current task list group.\n",
                    "description": "<p>Notify the TaskViewService to update the view with the current task list group.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskListGroup",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskService } from '../sync-api-cache/task.service';\r\nimport { TaskViewService } from './task-view.service';\r\nimport {\r\n  ExtendedTask,\r\n  ROOT_TASK_ID,\r\n  TaskoratorTask,\r\n} from '../../models/taskModelManager';\r\nimport { SelectedOverlordService } from './selected-overlord.service';\r\nimport { TaskListKey, TaskListType } from '../../models/task-list-model';\r\nimport { TaskUsageService } from './task-usage.service';\r\nimport { TaskListService } from '../sync-api-cache/task-list.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskNavigatorUltraService {\r\n  private originalListGroup: TaskListKey | null = null; // Store the original list group name\r\n\r\n  constructor(\r\n    private taskListService: TaskListService,\r\n    private viewService: TaskViewService,\r\n    private taskService: TaskService,\r\n    private selectedOverlord: SelectedOverlordService,\r\n    private taskUsageService: TaskUsageService\r\n  ) {}\r\n\r\n  /**\r\n   * Load and initialize tasks, then update the view.\r\n   */\r\n  async loadAndInitializeTasks(originalListGroup: TaskListKey): Promise<void> {\r\n    try {\r\n      // this.selectedOverlord.setSelectedOverlord(ROOT_TASK_ID);\r\n      this.originalListGroup = originalListGroup;\r\n\r\n      this.updateView(originalListGroup);\r\n    } catch (error) {\r\n      console.error('Failed to load and initialize tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch and display the previous set of tasks for a given task.\r\n   */\r\n  async previous(taskOverlordId: string): Promise<ExtendedTask[] | null> {\r\n    try {\r\n      if (!taskOverlordId) {\r\n        console.error('No overlord found for the task.');\r\n        return null;\r\n      }\r\n\r\n      const superOverlord = await this.taskService.getSuperOverlord(\r\n        taskOverlordId\r\n      );\r\n      if (!superOverlord || !superOverlord.overlord) return null;\r\n\r\n      const overlordTasks = await this.taskListService.getOverlordTasks(\r\n        superOverlord.overlord\r\n      );\r\n      this.selectedOverlord.setSelectedOverlord(superOverlord.overlord);\r\n\r\n      if (overlordTasks) {\r\n        const taskListKey: TaskListKey = {\r\n          type: TaskListType.OVERLORD,\r\n          data: superOverlord.overlord,\r\n        };\r\n        // TaskListKey.OVERLORD + superOverlord.overlord;\r\n        this.updateView(taskListKey);\r\n        this.taskUsageService.incrementTaskView(superOverlord.overlord);\r\n      }\r\n      return overlordTasks;\r\n    } catch (error) {\r\n      console.error('Failed to fetch previous tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch and display the next set of tasks for a given task.\r\n   */\r\n  async next(taskId: string): Promise<ExtendedTask[] | null> {\r\n    try {\r\n      const overlordTasks = await this.taskListService.getOverlordTasks(taskId);\r\n      this.selectedOverlord.setSelectedOverlord(taskId);\r\n\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.OVERLORD,\r\n        data: taskId,\r\n      };\r\n\r\n      this.updateView(taskListKey);\r\n      this.taskUsageService.incrementTaskView(taskId);\r\n\r\n      return overlordTasks;\r\n    } catch (error) {\r\n      console.error('Failed to fetch next tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigate back to the original task list or to the root task if unavailable.\r\n   */\r\n  async backToStart(): Promise<ExtendedTask[] | null> {\r\n    if (!this.originalListGroup) return null;\r\n    this.viewService.setTasksListGroup(this.originalListGroup);\r\n    // in case we go back and selected overlord is last clicked task... going home just resets to root\r\n    this.selectedOverlord.setSelectedOverlord(ROOT_TASK_ID);\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Navigate back to the previous overlord (super overlord).\r\n   */\r\n  async backToPrevious(): Promise<ExtendedTask[] | null> {\r\n    try {\r\n      const currentOverlordId = this.selectedOverlord.getSelectedOverlord();\r\n      if (!currentOverlordId) {\r\n        console.error('No current overlord found.');\r\n        return null;\r\n      }\r\n\r\n      const superOverlord = await this.taskService.getSuperOverlord(\r\n        currentOverlordId\r\n      );\r\n      if (!superOverlord || !superOverlord.overlord) {\r\n        console.error('No super overlord found.');\r\n        return null;\r\n      }\r\n\r\n      const tasks = await this.taskListService.getOverlordTasks(\r\n        superOverlord.overlord\r\n      );\r\n      this.selectedOverlord.setSelectedOverlord(superOverlord.overlord);\r\n\r\n      if (tasks) {\r\n        const taskListKey: TaskListKey = {\r\n          type: TaskListType.OVERLORD,\r\n          data: superOverlord.overlord,\r\n        };\r\n        this.updateView(taskListKey);\r\n      }\r\n      return tasks;\r\n    } catch (error) {\r\n      console.error('Failed to navigate to previous overlord:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notify the TaskViewService to update the view with the current task list group.\r\n   */\r\n  private updateView(taskListGroup: TaskListKey): void {\r\n    this.viewService.setTasksListGroup(taskListGroup);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewService",
                        "type": "TaskViewService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlord",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskUsageService",
                        "type": "TaskUsageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewService",
                        "type": "TaskViewService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlord",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskUsageService",
                        "type": "TaskUsageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskObjectHelperService",
            "id": "injectable-TaskObjectHelperService-643370281446db4fa1e2bd01a34fba2e45f3a1102149606b7871184ea6e68419ece3b46f08ccc9007d071b7e5fed25b0c54888fa1bc5bfaf9cc04919c6a3b9ed",
            "file": "src/app/features/core/crucible/input-to-tasks/services/task-object-helper.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMostRecentTask",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask | undefined",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlord",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask | null",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask | null",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByNoOverlordId",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByNoOverlordIdAndItself",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByOverlordId",
                    "args": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "overlordId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByOverlordName",
                    "args": [
                        {
                            "name": "overlordName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "overlordName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksSortedByPriority",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksSortedByTimeCreated",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksWithEmptyTodo",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksWithInvalidOverlord",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskoratorTask } from '../../../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskObjectHelperService {\r\n  getMostRecentTask(\r\n    tasks: TaskoratorTask[] | undefined\r\n  ): TaskoratorTask | undefined {\r\n    return tasks?.sort(\r\n      (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0)\r\n    )[0];\r\n  }\r\n\r\n  getTaskById(\r\n    taskId: string | null,\r\n    tasks: TaskoratorTask[]\r\n  ): TaskoratorTask | null {\r\n    const index = tasks.findIndex((t: TaskoratorTask) => t.taskId === taskId);\r\n    if (index !== -1) {\r\n      return tasks[index];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getOverlord(\r\n    task: TaskoratorTask,\r\n    tasks: TaskoratorTask[]\r\n  ): TaskoratorTask | null {\r\n    return this.getTaskById(task.overlord, tasks);\r\n  }\r\n\r\n  getTaskByName(name: string, tasks: TaskoratorTask[]): TaskoratorTask | null {\r\n    const index = tasks.findIndex((t) => t.name === name);\r\n    if (index !== -1) {\r\n      return tasks[index];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getTasksByOverlordId(\r\n    overlordId: string,\r\n    tasks: TaskoratorTask[]\r\n  ): TaskoratorTask[] {\r\n    return tasks.filter((task) => task.overlord === overlordId);\r\n  }\r\n\r\n  getTasksByNoOverlordId(\r\n    overlordId: string,\r\n    tasks: TaskoratorTask[]\r\n  ): TaskoratorTask[] {\r\n    return tasks.filter((task) => task.overlord !== overlordId);\r\n  }\r\n\r\n  getTasksByNoOverlordIdAndItself(\r\n    overlordId: string,\r\n    tasks: TaskoratorTask[]\r\n  ): TaskoratorTask[] {\r\n    return tasks.filter(\r\n      (task) => task.overlord !== overlordId && task.taskId !== overlordId\r\n    );\r\n  }\r\n\r\n  getTasksByOverlordName(\r\n    overlordName: string,\r\n    tasks: TaskoratorTask[]\r\n  ): TaskoratorTask[] {\r\n    const overlordTask = this.getTaskByName(overlordName, tasks);\r\n    if (overlordTask) {\r\n      return tasks.filter((task) => task.overlord === overlordTask.taskId);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getTasksByTags(tags: string[], tasks: TaskoratorTask[]): TaskoratorTask[] {\r\n    return tasks.filter((task) => task.tags.some((tag) => tags.includes(tag)));\r\n  }\r\n\r\n  getTasksWithInvalidOverlord(tasks: TaskoratorTask[]): TaskoratorTask[] {\r\n    return tasks.filter(\r\n      (task) => typeof task.overlord !== 'string' || task.overlord === null\r\n    );\r\n  }\r\n\r\n  getTasksWithEmptyTodo(tasks: TaskoratorTask[]): TaskoratorTask[] {\r\n    return tasks.filter((task) => !task.todo || task.todo.trim() === '');\r\n  }\r\n\r\n  getTasksSortedByTimeCreated(tasks: TaskoratorTask[]): TaskoratorTask[] {\r\n    return tasks\r\n      ?.slice()\r\n      .sort((a, b) => (a.timeCreated || 0) - (b.timeCreated || 0));\r\n  }\r\n\r\n  getTasksSortedByPriority(tasks: TaskoratorTask[]): TaskoratorTask[] {\r\n    return tasks.slice().sort((a, b) => a.priority - b.priority);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskScoreApiService",
            "id": "injectable-TaskScoreApiService-364fe856a1ca7e4a660917e963e0026edbe055250955d1e330481ef1b3ea32633d8218da8f36da0522375c75f9c6577d5fad146e9300e8f0e01f499ea6e0a964",
            "file": "src/app/services/api/task-score-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Score | null>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateScore",
                    "args": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "Score",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Firestore, doc, getDoc, setDoc } from '@angular/fire/firestore';\r\nimport { Score } from '../../models/score';\r\nimport { ScoreApiStrategy } from '../../models/service-strategies/score-strategy.interface copy';\r\nimport { AuthService } from '../core/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskScoreApiService implements ScoreApiStrategy {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async createScore(score: Score): Promise<Score | null> {\r\n    const userId = this.getUserId();\r\n    const scoreDocRef = doc(this.firestore, `users/${userId}/scores/${userId}`);\r\n    try {\r\n      const scoreData = JSON.parse(JSON.stringify(score));\r\n      await setDoc(scoreDocRef, scoreData);\r\n      return score;\r\n    } catch (error) {\r\n      console.error('Failed to create score:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getScore(): Promise<Score | null> {\r\n    const userId = this.getUserId();\r\n    const scoreDocRef = doc(this.firestore, `users/${userId}/scores/${userId}`);\r\n    try {\r\n      const docSnap = await getDoc(scoreDocRef);\r\n      if (docSnap.exists()) {\r\n        const data = docSnap.data();\r\n        return JSON.parse(JSON.stringify(data));\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get score:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async updateScore(score: Score): Promise<void> {\r\n    const userId = this.getUserId();\r\n    const scoreDocRef = doc(this.firestore, `users/${userId}/scores/${userId}`);\r\n    try {\r\n      const scoreData = JSON.parse(JSON.stringify(score));\r\n      await setDoc(scoreDocRef, scoreData, { merge: true });\r\n    } catch (error) {\r\n      console.error('Failed to update score:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-1a398a04d5e57a77ab4913212e1062b57c6215896184495ee1531b1dc5a540dc9f43db0a94460f7d48486eeaa3987dc1bad2ff4ecd4ad1a46533d0e91f93b019",
            "file": "src/app/services/sync-api-cache/task.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "latestTaskId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ExtendedTask>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate a single task.\n",
                    "description": "<p>Create a single task.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedBack",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestTask",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<ExtendedTask | null>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the latest task as an ExtendedTask (cached or API).\n",
                    "description": "<p>Retrieve the latest task as an ExtendedTask (cached or API).</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getSuperOverlord",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ExtendedTask | null>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the super-overlord for a task as an ExtendedTask.\n",
                    "description": "<p>Retrieve the super-overlord for a task as an ExtendedTask.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 5724,
                                "end": 5731,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>overlord or superoverlord</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ExtendedTask | null>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve a task by its ID, checking cache first\n",
                    "description": "<p>Retrieve a task by its ID, checking cache first</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCentralized error handling.\n",
                    "description": "<p>Centralized error handling.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLatestTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the latest task and cache it as an ExtendedTask.\n",
                    "description": "<p>Set the latest task and cache it as an ExtendedTask.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate a task\n",
                    "description": "<p>Update a task</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { EventBusService } from '../core/event-bus.service';\r\nimport { TaskValidatorService } from '../core/task-validator.service';\r\nimport { ExtendedTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TaskCacheService } from '../cache/task-cache.service';\r\nimport { TaskTransmutationService } from '../tasks/task-transmutation.service';\r\nimport { TaskIdCacheService } from '../cache/task-id-cache.service';\r\nimport { ErrorService } from '../core/error.service';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskService {\r\n  private latestTaskId: string | null = null;\r\n  apiService: ApiStrategy | null = null;\r\n  initialize(apiStrategy: ApiStrategy): void {\r\n    this.apiService = apiStrategy;\r\n    console.log('TaskService initialized with API strategy');\r\n  }\r\n\r\n  constructor(\r\n    private eventBusService: EventBusService,\r\n    private validatorService: TaskValidatorService,\r\n    private taskCache: TaskCacheService,\r\n    private taskIdCache: TaskIdCacheService,\r\n    private transmutatorService: TaskTransmutationService,\r\n    private errorService: ErrorService\r\n  ) {}\r\n\r\n  /**\r\n   * Create a single task.\r\n   */\r\n  async createTask(task: TaskoratorTask): Promise<ExtendedTask> {\r\n    try {\r\n      if (!this.validatorService.isTaskValid(task)) {\r\n        throw new Error('Invalid task, probably because it is empty');\r\n      }\r\n      if (!this.apiService) {\r\n        throw new Error('TaskService api not initialized');\r\n      }\r\n\r\n      const createdTask = await this.apiService.createTask(task);\r\n      if (!createdTask) throw new Error('Task creation failed');\r\n\r\n      const extendedTask = this.transmutatorService.toExtendedTask(createdTask);\r\n      // this.taskCache.addTask(extendedTask); // Cache the new task\r\n      this.taskIdCache.addTasksWithGroup(\r\n        [extendedTask],\r\n        `overlord_${task.overlord}`\r\n      ); // Notify TaskIdCache of update\r\n\r\n      this.eventBusService.createTask(extendedTask);\r\n\r\n      return extendedTask;\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a task\r\n   */\r\n  async updateTask(task: TaskoratorTask): Promise<void> {\r\n    try {\r\n      if (!this.validatorService.isTaskValid(task)) {\r\n        throw new Error('Invalid task, probably because it is empty');\r\n      }\r\n      if (!this.apiService) {\r\n        throw new Error('TaskService api not initialized');\r\n      }\r\n      await this.apiService.updateTask(task);\r\n\r\n      const extendedTask = this.transmutatorService.toExtendedTask(task);\r\n      if (task.stage === 'deleted') {\r\n        this.taskCache.removeTask(extendedTask);\r\n        this.taskIdCache.deleteTask(extendedTask.taskId); // Notify TaskIdCache of deletion\r\n        this.feedBack('task deleted' + extendedTask.name);\r\n      } else {\r\n        this.taskIdCache.updateTasks([extendedTask]); // Notify TaskIdCache of update\r\n        // this.taskCache.addTask(extendedTask); // Update the cache\r\n      }\r\n      this.eventBusService.updateTask(extendedTask);\r\n    } catch (error) {\r\n      console.error('Error updating task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a task by its ID, checking cache first\r\n   */\r\n  async getTaskById(taskId: string): Promise<ExtendedTask | null> {\r\n    try {\r\n      const cachedTask = this.taskCache.getTask(taskId) as ExtendedTask | null;\r\n      if (cachedTask) {\r\n        this.eventBusService.getTaskById(cachedTask);\r\n\r\n        return cachedTask;\r\n      }\r\n\r\n      if (!this.apiService) {\r\n        throw new Error('TaskService api not initialized');\r\n      }\r\n      const task = await this.apiService.getTaskById(taskId);\r\n      if (task) {\r\n        const extendedTask = this.transmutatorService.toExtendedTask(task);\r\n        this.taskCache.addTask(extendedTask); // Cache ExtendedTask\r\n        this.eventBusService.getTaskById(extendedTask);\r\n        return extendedTask;\r\n      } else {\r\n        console.log(`Task ${taskId} not found`);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      this.handleError('getTaskById', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the latest task and cache it as an ExtendedTask.\r\n   */\r\n  async setLatestTask(task: TaskoratorTask): Promise<void> {\r\n    this.latestTaskId = task.taskId;\r\n    const extendedTask = this.transmutatorService.toExtendedTask(task); // Convert to ExtendedTask\r\n    this.taskCache.addTask(extendedTask); // Cache the ExtendedTask\r\n  }\r\n\r\n  /**\r\n   * Retrieve the latest task as an ExtendedTask (cached or API).\r\n   */\r\n  async getLatestTask(): Promise<ExtendedTask | null> {\r\n    if (this.latestTaskId) {\r\n      // Check cache first\r\n      const cachedTask = this.taskCache.getTask(\r\n        this.latestTaskId\r\n      ) as ExtendedTask | null;\r\n      if (cachedTask) {\r\n        return cachedTask;\r\n      }\r\n\r\n      // Fetch from API if not in cache\r\n      if (!this.apiService) {\r\n        throw new Error('TaskService api not initialized');\r\n      }\r\n      const latestTask = await this.apiService.getTaskById(this.latestTaskId);\r\n      if (latestTask) {\r\n        const extendedTask =\r\n          this.transmutatorService.toExtendedTask(latestTask); // Convert to ExtendedTask\r\n        this.taskCache.addTask(extendedTask); // Cache the ExtendedTask\r\n        return extendedTask;\r\n      }\r\n    }\r\n    return null; // No latest task found\r\n  }\r\n\r\n  /**\r\n   * Retrieve the super-overlord for a task as an ExtendedTask.\r\n   * @warn pass correct task.taskId or task.overlord to retrieve correct parent or super parent\r\n   * @input task.taskId or task.overlord\r\n   * @returns overlord or superoverlord\r\n   */\r\n  async getSuperOverlord(taskId: string): Promise<ExtendedTask | null> {\r\n    try {\r\n      let task = this.taskCache.getTask(taskId) as ExtendedTask | null; // Check cache first\r\n      if (!task) {\r\n        // Fetch from API if not cached\r\n        if (!this.apiService) {\r\n          throw new Error('TaskService api not initialized');\r\n        }\r\n        const superOverlordTask = await this.apiService.getSuperOverlord(\r\n          taskId\r\n        );\r\n        if (superOverlordTask) {\r\n          task = this.transmutatorService.toExtendedTask(superOverlordTask); // Convert to ExtendedTask\r\n          this.taskCache.addTask(task); // Cache the ExtendedTask\r\n        }\r\n      }\r\n      if (task) this.eventBusService.getSuperOverlord(task); // Emit event for listeners\r\n      return task;\r\n    } catch (error) {\r\n      this.handleError('getSuperOverlord', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Centralized error handling.\r\n   */\r\n  private handleError(method: string, error: unknown): void {\r\n    const message = `TaskService.${method} failed: ${error}`;\r\n    this.errorService.error(message);\r\n    this.errorService.popup(message); // Notify users if needed\r\n  }\r\n\r\n  private feedBack(s: string) {\r\n    this.errorService.feedback(s);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validatorService",
                        "type": "TaskValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transmutatorService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorService",
                        "type": "TaskValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskIdCache",
                        "type": "TaskIdCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transmutatorService",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskSessionApiService",
            "id": "injectable-TaskSessionApiService-4765f5893844fde02bc3ef08efc76c07d6251fb37adb99c31cca39cb87cba8751c5c01f451502677ed01c0a2491030cab3e49d0cbd6afa2d880a69cd587d436e",
            "file": "src/app/services/api/task-session-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSession",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSession",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession | null>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSession[]>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  getDocs,\r\n  doc,\r\n  setDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  getDoc,\r\n} from 'firebase/firestore';\r\nimport { TaskSession } from '../../features/core/nexus/session/task-session.model';\r\nimport { TaskSessionApiStrategy } from '../../models/service-strategies/session-strategy.interface';\r\nimport { AuthService } from '../core/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskSessionApiService implements TaskSessionApiStrategy {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async getSession(sessionId: string): Promise<TaskSession | null> {\r\n    const userId = this.getUserId();\r\n\r\n    const sessionRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/task-sessions/${sessionId}`\r\n    );\r\n    try {\r\n      const sessionSnap = await getDoc(sessionRef);\r\n      return sessionSnap.exists() ? (sessionSnap.data() as TaskSession) : null;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch session with ID ${sessionId}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getSessions(): Promise<TaskSession[]> {\r\n    const userId = this.getUserId();\r\n    try {\r\n      const sessionsCollection = collection(\r\n        this.firestore,\r\n        `users/${userId}/task-sessions`\r\n      );\r\n      const querySnapshot = await getDocs(sessionsCollection);\r\n      return querySnapshot.docs.map(\r\n        (doc) =>\r\n          ({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          } as TaskSession)\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to fetch sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async createSession(session: TaskSession): Promise<TaskSession> {\r\n    try {\r\n      const userId = this.getUserId();\r\n      const sessionsCollection = collection(\r\n        this.firestore,\r\n        `users/${userId}/task-sessions`\r\n      );\r\n      const sessionDocRef = doc(sessionsCollection); // Prepare a new document reference within user's sessions collection\r\n      const sessionData = { ...session, id: sessionDocRef.id }; // Add id to the session\r\n\r\n      await setDoc(sessionDocRef, sessionData); // Directly set the new session document with the generated ID\r\n      return sessionData; // Return the session data with the new ID\r\n    } catch (error) {\r\n      console.error('Failed to create session:', error);\r\n      throw new Error('Session creation failed');\r\n    }\r\n  }\r\n\r\n  async updateSession(session: TaskSession): Promise<void> {\r\n    const userId = this.getUserId();\r\n    const sessionDoc = doc(\r\n      this.firestore,\r\n      `users/${userId}/task-sessions/${session.id}`\r\n    );\r\n    try {\r\n      const sessionData = JSON.parse(JSON.stringify(session));\r\n      await updateDoc(sessionDoc, sessionData);\r\n    } catch (error) {\r\n      console.error('Failed to update session:', error);\r\n    }\r\n  }\r\n\r\n  async deleteSession(userId: string, id: string): Promise<void> {\r\n    const sessionDoc = doc(\r\n      this.firestore,\r\n      `users/${userId}/task-sessions/${id}`\r\n    );\r\n    try {\r\n      await deleteDoc(sessionDoc);\r\n    } catch (error) {\r\n      console.error('Failed to delete session:', error);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskSessionApiService",
            "id": "injectable-TaskSessionApiService-8b1f5b5e1395c14a84ee135a5d585e86f4fef69c06a6f1df8976135abf834014674750dac2dbb489f7aec45bbfb907a1d50e24643f2ac131d70a8baab54b27f9-1",
            "file": "src/app/features/core/nexus/session/services/task-session-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSession",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessions",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSession[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSession",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  setDoc,\r\n} from '@angular/fire/firestore';\r\nimport { TaskSession } from '../task-session.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskSessionApiService {\r\n  constructor(private firestore: Firestore) {}\r\n\r\n  async getSessions(userId: string): Promise<TaskSession[]> {\r\n    try {\r\n      const sessionsCollection = collection(\r\n        this.firestore,\r\n        `users/${userId}/task-sessions`\r\n      );\r\n      const querySnapshot = await getDocs(sessionsCollection);\r\n      return querySnapshot.docs.map(\r\n        (doc) =>\r\n          ({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          } as TaskSession)\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to fetch sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async createSession(\r\n    userId: string,\r\n    session: TaskSession\r\n  ): Promise<TaskSession> {\r\n    try {\r\n      const sessionsCollection = collection(\r\n        this.firestore,\r\n        `users/${userId}/task-sessions`\r\n      );\r\n      const sessionDocRef = doc(sessionsCollection); // Prepare a new document reference within user's sessions collection\r\n      const sessionData = { ...session, id: sessionDocRef.id }; // Add id to the session\r\n\r\n      await setDoc(sessionDocRef, sessionData); // Directly set the new session document with the generated ID\r\n      return sessionData; // Return the session data with the new ID\r\n    } catch (error) {\r\n      console.error('Failed to create session:', error);\r\n      throw new Error('Session creation failed');\r\n    }\r\n  }\r\n\r\n  async updateSession(userId: string, session: TaskSession): Promise<void> {\r\n    const sessionDoc = doc(\r\n      this.firestore,\r\n      `users/${userId}/task-sessions/${session.id}`\r\n    );\r\n    try {\r\n      const sessionData = JSON.parse(JSON.stringify(session));\r\n      await updateDoc(sessionDoc, sessionData);\r\n    } catch (error) {\r\n      console.error('Failed to update session:', error);\r\n    }\r\n  }\r\n\r\n  async deleteSession(userId: string, id: string): Promise<void> {\r\n    const sessionDoc = doc(\r\n      this.firestore,\r\n      `users/${userId}/task-sessions/${id}`\r\n    );\r\n    try {\r\n      await deleteDoc(sessionDoc);\r\n    } catch (error) {\r\n      console.error('Failed to delete session:', error);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TaskSessionApiService-1"
        },
        {
            "name": "TaskSessionCacheService",
            "id": "injectable-TaskSessionCacheService-cb06dd1f93f31a648849e71cb84d37e35399a09c66622efe8dc691867e8c5c4fec79552cd9f6762c895827ccd4c4a34a04841365e42dc9eca2e4d48b4584cc89",
            "file": "src/app/features/core/nexus/session/services/task-session-cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSession[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCache",
                    "args": [],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFromCache",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCache",
                    "args": [
                        {
                            "name": "sessions",
                            "type": "TaskSession[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessions",
                            "type": "TaskSession[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCache",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskSession } from '../task-session.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskSessionCacheService {\r\n  private cache: TaskSession[] | null = null;\r\n\r\n  getCache(): TaskSession[] | null {\r\n    return this.cache;\r\n  }\r\n\r\n  setCache(sessions: TaskSession[]): void {\r\n    this.cache = sessions;\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.cache = null;\r\n  }\r\n\r\n  updateCache(session: TaskSession): void {\r\n    if (this.cache) {\r\n      const index = this.cache.findIndex((item) => item.id === session.id);\r\n      if (index !== -1) {\r\n        this.cache[index] = session;\r\n      } else {\r\n        this.cache.push(session);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeFromCache(sessionId: string): void {\r\n    if (this.cache) {\r\n      this.cache = this.cache.filter((item) => item.id !== sessionId);\r\n    }\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskSessionService",
            "id": "injectable-TaskSessionService-6b754a9aaababca5f302927b779583aef9a8e7616992d25b3be1fa79d0e1aae0797e559f36bc89b51221570757f21817f932626d4e93a7315ea5a8b56823ef6c",
            "file": "src/app/features/core/nexus/session/services/task-session.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSession",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSession[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskSessionCacheService } from './task-session-cache.service';\r\nimport { TaskSessionApiService } from './task-session-api.service';\r\nimport { TaskSession } from '../task-session.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskSessionService {\r\n  constructor(\r\n    private cacheService: TaskSessionCacheService,\r\n    private apiService: TaskSessionApiService\r\n  ) {}\r\n\r\n  async getSessions(): Promise<TaskSession[]> {\r\n    const userId = null; //await this.auth.getCurrentUserId();\r\n    if (!userId) return [];\r\n    let sessions = this.cacheService.getCache();\r\n    if (sessions) {\r\n      return Promise.resolve(sessions);\r\n    } else {\r\n      sessions = await this.apiService.getSessions(userId);\r\n      this.cacheService.setCache(sessions);\r\n      return sessions;\r\n    }\r\n  }\r\n\r\n  async createSession(session: TaskSession): Promise<void> {\r\n    const userId = null; //await this.auth.getCurrentUserId();\r\n    if (!userId) return;\r\n    try {\r\n      const createdSession = await this.apiService.createSession(\r\n        userId,\r\n        session\r\n      );\r\n      this.cacheService.updateCache(createdSession); // Use the returned session with its new ID\r\n      console.log('Session created successfully:', createdSession);\r\n    } catch (error) {\r\n      console.error('Failed to create session:', error);\r\n    }\r\n  }\r\n\r\n  async updateSession(session: TaskSession): Promise<void> {\r\n    const userId = null; //await this.auth.getCurrentUserId();\r\n    if (!userId) return;\r\n    await this.apiService.updateSession(userId, session);\r\n    this.cacheService.updateCache(session);\r\n  }\r\n\r\n  async deleteSession(sessionId: string): Promise<void> {\r\n    if (!sessionId) return;\r\n    const userId = null; //await this.auth.getCurrentUserId();\r\n    if (!userId) return;\r\n    await this.apiService.deleteSession(userId, sessionId);\r\n    this.cacheService.removeFromCache(sessionId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cacheService",
                        "type": "TaskSessionCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "TaskSessionApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "cacheService",
                        "type": "TaskSessionCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "TaskSessionApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskSettingsApiService",
            "id": "injectable-TaskSettingsApiService-5f9ca238b965af36655b4a812cfa79e49ead46539b86bbd60bbb5f41d24a908d0cb2f7065610fede6ee095d883fcefac6a3248fd6d8892a0bf057e4c280f4cd6",
            "file": "src/app/services/api/task-settings-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskSettings | null>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "settings",
                            "type": "TaskSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Firestore, doc, getDoc, setDoc } from '@angular/fire/firestore';\r\nimport { getDefaultTaskSettings, TaskSettings } from '../../models/settings';\r\nimport { SettingsApiStrategy } from '../../models/service-strategies/settings-strategy.interface';\r\nimport { AuthService } from '../core/auth.service';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskSettingsApiService implements SettingsApiStrategy {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async createSettings(settings: TaskSettings): Promise<TaskSettings | null> {\r\n    const userId = this.getUserId();\r\n    const settingsDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/settings/${userId}`\r\n    );\r\n    try {\r\n      const settingsData = JSON.parse(JSON.stringify(settings));\r\n      await setDoc(settingsDocRef, settingsData);\r\n      return settings;\r\n    } catch (error) {\r\n      console.error('Failed to create settings:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getSettings(): Promise<TaskSettings | null> {\r\n    const userId = this.getUserId();\r\n    const settingsDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/settings/${userId}`\r\n    );\r\n    try {\r\n      const docSnap = await getDoc(settingsDocRef);\r\n      if (docSnap.exists()) {\r\n        const data = docSnap.data();\r\n        return {\r\n          ...getDefaultTaskSettings(), // Start with default settings\r\n          ...data, // Override with data from the database\r\n        };\r\n      } else {\r\n        return getDefaultTaskSettings(); // Return default settings if none exist\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get settings:', error);\r\n      return getDefaultTaskSettings(); // Return default settings in case of error\r\n    }\r\n  }\r\n\r\n  async updateSettings(settings: TaskSettings): Promise<void> {\r\n    const userId = this.getUserId();\r\n    const settingsDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/settings/${userId}`\r\n    );\r\n    try {\r\n      const settingsData = JSON.parse(JSON.stringify(settings));\r\n      await setDoc(settingsDocRef, settingsData, { merge: true });\r\n    } catch (error) {\r\n      console.error('Failed to update settings:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskSettingsTasksService",
            "id": "injectable-TaskSettingsTasksService-2ef02c73752dd694c183c23a654a7213519370b0b4f1b8ea55662cb781cb4717cf63b7191777e0d0873aa16f53ae987edc0e30e3fbfb6caca7d56d56e0fc823b",
            "file": "src/app/services/tasks/task-settings-tasks.service.ts",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "addTaskToFavorites",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTaskToFocus",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTaskToFrogs",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTaskFromFavorites",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTaskFromFocus",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTaskFromFrogs",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                }
            ],
            "deprecated": true,
            "deprecationMessage": "use ExtendedTask for ui... or extend task to have \"selected\" property",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SettingsService } from '../sync-api-cache/settings.service';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\n/**\r\n * @fix or @deprecated use ExtendedTask for ui... or extend task to have \"selected\" property\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskSettingsTasksService {\r\n  settings: TaskSettings | undefined;\r\n\r\n  constructor(private settingsService: SettingsService) {\r\n    this.settingsService.getSettings().subscribe((s: TaskSettings | null) => {\r\n      if (s) this.settings = s;\r\n    });\r\n  }\r\n\r\n  private async updateSettings() {\r\n    if (this.settings) {\r\n      await this.settingsService.updateSettings(this.settings);\r\n    }\r\n  }\r\n\r\n  async addTaskToFocus(task: TaskoratorTask) {\r\n    if (!this.settings) return;\r\n\r\n    if (!this.settings.focusTaskIds.includes(task.taskId)) {\r\n      this.settings.focusTaskIds.push(task.taskId);\r\n      await this.updateSettings();\r\n      console.log('Task added to focus:', task.taskId);\r\n    }\r\n  }\r\n\r\n  async removeTaskFromFocus(task: TaskoratorTask) {\r\n    if (!this.settings) return;\r\n\r\n    const index = this.settings.focusTaskIds.indexOf(task.taskId);\r\n    if (index > -1) {\r\n      this.settings.focusTaskIds.splice(index, 1);\r\n      await this.updateSettings();\r\n      console.log('Task removed from focus:', task.taskId);\r\n    }\r\n  }\r\n\r\n  async addTaskToFrogs(task: TaskoratorTask) {\r\n    if (!this.settings) return;\r\n\r\n    if (!this.settings.frogTaskIds.includes(task.taskId)) {\r\n      this.settings.frogTaskIds.push(task.taskId);\r\n      await this.updateSettings();\r\n      console.log('Task added to frogs:', task.taskId);\r\n    }\r\n  }\r\n\r\n  async removeTaskFromFrogs(task: TaskoratorTask) {\r\n    if (!this.settings) return;\r\n\r\n    const index = this.settings.frogTaskIds.indexOf(task.taskId);\r\n    if (index > -1) {\r\n      this.settings.frogTaskIds.splice(index, 1);\r\n      await this.updateSettings();\r\n      console.log('Task removed from frogs:', task.taskId);\r\n    }\r\n  }\r\n\r\n  async addTaskToFavorites(task: TaskoratorTask) {\r\n    if (!this.settings) return;\r\n\r\n    if (!this.settings.favoriteTaskIds.includes(task.taskId)) {\r\n      this.settings.favoriteTaskIds.push(task.taskId);\r\n      await this.updateSettings();\r\n      console.log('Task added to favorites:', task.taskId);\r\n    }\r\n  }\r\n\r\n  async removeTaskFromFavorites(task: TaskoratorTask) {\r\n    if (!this.settings) return;\r\n\r\n    const index = this.settings.favoriteTaskIds.indexOf(task.taskId);\r\n    if (index > -1) {\r\n      this.settings.favoriteTaskIds.splice(index, 1);\r\n      await this.updateSettings();\r\n      console.log('Task removed from favorites:', task.taskId);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskStatusService",
            "id": "injectable-TaskStatusService-7af690f51ac5c36207fd279c47ca3a6f9bf48c924b8655f586c2a9c24a3e3876f251f5b82f45677da41084799530e3c0bd36ee82afad716d161f613cf3ea0d20",
            "file": "src/app/services/tasks/task-status.service.ts",
            "properties": [
                {
                    "name": "statusMap",
                    "defaultValue": "new Map<string, TaskUiStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusSubject",
                    "defaultValue": "new BehaviorSubject<Map<string, TaskUiStatus>>(\r\n    this.statusMap\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClear all statuses",
                    "description": "<p>Clear all statuses</p>\n"
                },
                {
                    "name": "clearStatus",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClear status for a task (sets to normal)",
                    "description": "<p>Clear status for a task (sets to normal)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatus",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskUiStatus",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet current status or 'normal' if none",
                    "description": "<p>Get current status or &#39;normal&#39; if none</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "TaskUiStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSet status for a task and notify subscribers",
                    "description": "<p>Set status for a task and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "TaskUiStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport type TaskUiStatus =\r\n  | 'normal'\r\n  | 'highlighted'\r\n  | 'flagged'\r\n  | 'viewed'\r\n  | 'updated'; // not necessarily UI but for now it will be\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TaskStatusService {\r\n  private statusMap = new Map<string, TaskUiStatus>();\r\n  private statusSubject = new BehaviorSubject<Map<string, TaskUiStatus>>(\r\n    this.statusMap\r\n  );\r\n\r\n  /** Observable of all task statuses (could be optimized to emit only changes) */\r\n  get statuses$(): Observable<Map<string, TaskUiStatus>> {\r\n    return this.statusSubject.asObservable();\r\n  }\r\n\r\n  /** Get current status or 'normal' if none */\r\n  getStatus(taskId: string): TaskUiStatus {\r\n    return this.statusMap.get(taskId) || 'normal';\r\n  }\r\n\r\n  /** Set status for a task and notify subscribers */\r\n  setStatus(taskId: string, status: TaskUiStatus): void {\r\n    this.statusMap.set(taskId, status);\r\n    this.statusSubject.next(this.statusMap);\r\n  }\r\n\r\n  /** Clear status for a task (sets to normal) */\r\n  clearStatus(taskId: string): void {\r\n    this.statusMap.delete(taskId);\r\n    this.statusSubject.next(this.statusMap);\r\n  }\r\n\r\n  /** Clear all statuses */\r\n  clearAll(): void {\r\n    this.statusMap.clear();\r\n    this.statusSubject.next(this.statusMap);\r\n  }\r\n}\r\n",
            "accessors": {
                "statuses$": {
                    "name": "statuses$",
                    "getSignature": {
                        "name": "statuses$",
                        "type": "",
                        "returnType": "Observable<Map<string, TaskUiStatus>>",
                        "line": 19,
                        "rawdescription": "\nObservable of all task statuses (could be optimized to emit only changes)",
                        "description": "<p>Observable of all task statuses (could be optimized to emit only changes)</p>\n"
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskTransmutationService",
            "id": "injectable-TaskTransmutationService-39b0170e48d3cff6e5688d77c38c95e001bba72a173aedc32b127dda0376e38877c2ed0f137a3f1a6da1eec2f96d64a12b3130d7aae9917c64fc6977a7645bce",
            "file": "src/app/services/tasks/task-transmutation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getIds",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExtract the `taskId` from an array of `ExtendedTask`.\n",
                    "description": "<p>Extract the <code>taskId</code> from an array of <code>ExtendedTask</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toExtendedTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert a `Task` to an `ExtendedTask`.\nAdds default properties for visibility and animation state.\n",
                    "description": "<p>Convert a <code>Task</code> to an <code>ExtendedTask</code>.\nAdds default properties for visibility and animation state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toExtendedTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedTask[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert an array of `Task` to an array of `ExtendedTask`.\n",
                    "description": "<p>Convert an array of <code>Task</code> to an array of <code>ExtendedTask</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTask",
                    "args": [
                        {
                            "name": "extendedTask",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert an `ExtendedTask` to a `Task`.\nStrips out additional properties like visibility and animation state.\n",
                    "description": "<p>Convert an <code>ExtendedTask</code> to a <code>Task</code>.\nStrips out additional properties like visibility and animation state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "extendedTask",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTasks",
                    "args": [
                        {
                            "name": "extendedTasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert an array of `ExtendedTask` to an array of `Task`.\n",
                    "description": "<p>Convert an array of <code>ExtendedTask</code> to an array of <code>Task</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "extendedTasks",
                            "type": "ExtendedTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskoratorTask, ExtendedTask } from '../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTransmutationService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Convert a `Task` to an `ExtendedTask`.\r\n   * Adds default properties for visibility and animation state.\r\n   */\r\n  toExtendedTask(task: TaskoratorTask): ExtendedTask {\r\n    return {\r\n      ...task,\r\n      isVisible: true, // Default visibility\r\n      animationState: 'normal', // Default animation state\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert an array of `Task` to an array of `ExtendedTask`.\r\n   */\r\n  toExtendedTasks(tasks: TaskoratorTask[]): ExtendedTask[] {\r\n    return tasks.map((task) => this.toExtendedTask(task));\r\n  }\r\n\r\n  /**\r\n   * Convert an `ExtendedTask` to a `Task`.\r\n   * Strips out additional properties like visibility and animation state.\r\n   */\r\n  toTask(extendedTask: ExtendedTask): TaskoratorTask {\r\n    const { isVisible, animationState, ...task } = extendedTask; // Remove extra properties\r\n    return task;\r\n  }\r\n\r\n  /**\r\n   * Convert an array of `ExtendedTask` to an array of `Task`.\r\n   */\r\n  toTasks(extendedTasks: ExtendedTask[]): TaskoratorTask[] {\r\n    return extendedTasks.map((extendedTask) => this.toTask(extendedTask));\r\n  }\r\n\r\n  /**\r\n   * Extract the `taskId` from an array of `ExtendedTask`.\r\n   */\r\n  getIds(tasks: ExtendedTask[]): string[] {\r\n    return tasks.map((task) => task.taskId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskTreeApiService",
            "id": "injectable-TaskTreeApiService-ce7661c8079976a987b4885881801206bc26def1b07acd170eb75c1b19e0282860cbc98356d4769802e1018e3f835c5929823cbee18e70294ede59f86f5533d2",
            "file": "src/app/services/api/task-tree-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeCircularReferences",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTreeStructure",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Firestore, doc, getDoc, setDoc } from '@angular/fire/firestore';\r\nimport { TaskTree, TaskTreeNode } from '../../models/taskTree';\r\nimport { TreeApiStrategy } from '../../models/service-strategies/tree-strategy.interface';\r\nimport { AuthService } from '../core/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTreeApiService implements TreeApiStrategy {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async createTree(taskTree: TaskTree): Promise<TaskTree | null> {\r\n    this.validateTreeStructure(taskTree);\r\n    const userId = this.getUserId();\r\n    const treeDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/taskTrees/${userId}`\r\n    );\r\n    try {\r\n      await setDoc(treeDocRef, taskTree);\r\n      return taskTree;\r\n    } catch (error) {\r\n      console.error('Failed to create tree:', error);\r\n      throw new Error('Task tree creation failed');\r\n    }\r\n  }\r\n\r\n  // async updateTree(taskTree: TaskTree): Promise<void> {\r\n  //   const userId = this.getUserId();\r\n  //   const treeDocRef = doc(\r\n  //     this.firestore,\r\n  //     `users/${userId}/taskTrees/${userId}`\r\n  //   ); // firebase store stuff inside stuff with keys, so it has to be inside a unique key\r\n  //   try {\r\n  //     const taskTreeData = JSON.parse(JSON.stringify(taskTree));\r\n  //     await setDoc(treeDocRef, taskTreeData, { merge: true });\r\n  //   } catch (error) {\r\n  //     console.error('Failed to update tree:', error);\r\n  //     throw error;\r\n  //   }\r\n  // }\r\n\r\n  private removeCircularReferences(tree: TaskTree): any {\r\n    const seen = new WeakSet();\r\n\r\n    return JSON.parse(\r\n      JSON.stringify(tree, (key, value) => {\r\n        if (typeof value === 'object' && value !== null) {\r\n          if (seen.has(value)) {\r\n            console.warn('Circular reference found:', key);\r\n            return; // Return undefined to omit the circular reference key\r\n          }\r\n          seen.add(value);\r\n        }\r\n        return value;\r\n      })\r\n    );\r\n  }\r\n\r\n  private validateTreeStructure(tree: TaskTree): void {\r\n    console.log('Validating tree structure');\r\n    const invalidNodes: any[] = [];\r\n\r\n    const validateNode = (node: TaskTreeNode) => {\r\n      if (!node || typeof node.taskId !== 'string') {\r\n        invalidNodes.push(node);\r\n      } else if (!Array.isArray(node.children)) {\r\n        node.children = []; // Fix invalid children\r\n      }\r\n      (node.children || []).forEach(validateNode);\r\n    };\r\n\r\n    validateNode(tree.primarch);\r\n\r\n    if (invalidNodes.length > 0) {\r\n      console.error('Invalid nodes detected:', invalidNodes);\r\n      throw new Error('Tree contains invalid nodes.');\r\n    }\r\n  }\r\n\r\n  async updateTree(taskTree: TaskTree): Promise<void> {\r\n    this.validateTreeStructure(taskTree);\r\n\r\n    const userId = this.getUserId();\r\n    const treeDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/taskTrees/${userId}`\r\n    );\r\n\r\n    try {\r\n      const taskTreeData = this.removeCircularReferences(taskTree);\r\n      await setDoc(treeDocRef, taskTreeData, { merge: true });\r\n    } catch (error) {\r\n      console.error('Failed to update tree:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getTree(): Promise<TaskTree | null> {\r\n    const userId = this.getUserId();\r\n    const treeDocRef = doc(\r\n      this.firestore,\r\n      `users/${userId}/taskTrees/${userId}`\r\n    );\r\n    try {\r\n      const docSnap = await getDoc(treeDocRef);\r\n      if (docSnap.exists()) {\r\n        return docSnap.data() as TaskTree;\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get tree:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskTreeAutoupdaterService",
            "id": "injectable-TaskTreeAutoupdaterService-dd6c01cf6d6de1e3e51de9bfa1028aeaf201e61f9293e64dde62f9f28ad3a291293abf1269e049d1600028867414af0f279f3990c2be39bc4e72eaf887734546",
            "file": "src/app/services/tree/task-tree-autoupdater.service.ts",
            "properties": [
                {
                    "name": "isUpdating",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateQueue",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleCreateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCreateTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleUpdateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleUpdateTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "queueUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupUpdateQueue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeToTaskEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { EventBusService } from '../core/event-bus.service';\r\nimport { TreeNodeService } from './tree-node.service';\r\nimport { ExtendedTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { debounceTime, Subject } from 'rxjs';\r\nimport { OTHER_CONFIG } from '../../app.config';\r\nimport { TreeService } from '../sync-api-cache/tree.service';\r\nimport { TaskListKey } from '../../models/task-list-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTreeAutoupdaterService {\r\n  private updateQueue: Subject<void> = new Subject<void>();\r\n  private isUpdating: boolean = false;\r\n\r\n  constructor(\r\n    private eventBusService: EventBusService,\r\n    private treeNodeService: TreeNodeService, // uses TaskTreeNodeToolsService\r\n    private taskTreeService: TreeService // uses TaskTreeNodeToolsService\r\n  ) {\r\n    this.subscribeToTaskEvents();\r\n    this.setupUpdateQueue();\r\n  }\r\n\r\n  private subscribeToTaskEvents(): void {\r\n    console.log('TaskTreeAutoupdaterService is listening for task events.');\r\n\r\n    this.eventBusService.onEvent<any>('createTask').subscribe((task) => {\r\n      this.handleCreateTask(task);\r\n    });\r\n\r\n    this.eventBusService.onEvent<any>('createTasks').subscribe((tasks) => {\r\n      this.handleCreateTasks(tasks);\r\n    });\r\n\r\n    this.eventBusService.onEvent<any>('updateTask').subscribe((task) => {\r\n      this.handleUpdateTask(task);\r\n    });\r\n\r\n    this.eventBusService.onEvent<any>('updateTasks').subscribe((tasks) => {\r\n      this.handleUpdateTasks(tasks);\r\n    });\r\n\r\n    // this.tryHealTreeIfNeeded();\r\n  }\r\n\r\n  // private tryHealTreeIfNeeded() {\r\n  //   if (OTHER_CONFIG.REPAIR_TREE) {\r\n  //     this.eventBusService\r\n  //       .onEvent<any>('getTasks')\r\n  //       .subscribe(\r\n  //         (tasksObject: {\r\n  //           tasks: ExtendedTask[];\r\n  //           taskListKey: TaskListKey;\r\n  //         }) => {\r\n  //           if (tasksObject.tasks) {\r\n  //             this.healTree(tasksObject.tasks);\r\n  //           }\r\n  //         }\r\n  //       );\r\n  //     this.eventBusService\r\n  //       .onEvent<any>('getTaskById')\r\n  //       .subscribe((task: Task) => {\r\n  //         if (task) {\r\n  //           this.healTree([task]);\r\n  //         }\r\n  //       });\r\n  //     this.eventBusService\r\n  //       .onEvent<any>('getSuperOverlord')\r\n  //       .subscribe((task: Task) => {\r\n  //         if (task) {\r\n  //           this.healTree([task]);\r\n  //         }\r\n  //       });\r\n  //     this.eventBusService\r\n  //       .onEvent<any>('getOverlordChildren')\r\n  //       .subscribe((tasks: Task[]) => {\r\n  //         if (tasks) {\r\n  //           this.healTree(tasks);\r\n  //         }\r\n  //       });\r\n  //   }\r\n  // }\r\n\r\n  // healTree(tasks: Task[]) {\r\n  //   // const tree = this.taskTreeService.getLatestTree();\r\n  //   // if (!tree) return;\r\n  //   // this.treeNodeToolsService.healTreeTasks(tree, tasks).then((updated) => {\r\n  //   //   if (updated) {\r\n  //   //     this.taskTreeService.updateTree(tree).then();\r\n  //   //   }\r\n  //   // });\r\n  // }\r\n\r\n  private setupUpdateQueue(): void {\r\n    this.updateQueue\r\n      .pipe(debounceTime(OTHER_CONFIG.TREE_UPDATE_FREQUENCY))\r\n      .subscribe(async () => {\r\n        if (this.isUpdating) return; // Prevent overlapping updates\r\n        this.isUpdating = true;\r\n\r\n        try {\r\n          const tree = this.taskTreeService.getLatestTree();\r\n          if (tree) {\r\n            await this.taskTreeService.updateTree(tree);\r\n            console.log('Batched tree update completed successfully.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error during batched tree update:', error);\r\n        } finally {\r\n          this.isUpdating = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private queueUpdate(): void {\r\n    this.updateQueue.next();\r\n  }\r\n\r\n  private async handleCreateTask(task: TaskoratorTask): Promise<void> {\r\n    if (!task) return;\r\n\r\n    const tree = this.taskTreeService.getLatestTree();\r\n    if (tree) {\r\n      this.treeNodeService.createTasks(tree, [task]);\r\n      this.queueUpdate(); // Queue a batched update\r\n    }\r\n  }\r\n\r\n  private async handleCreateTasks(tasks: TaskoratorTask[]): Promise<void> {\r\n    const tree = this.taskTreeService.getLatestTree();\r\n    if (tree) {\r\n      await this.treeNodeService.createTasks(tree, tasks);\r\n      this.queueUpdate(); // Queue a batched update\r\n    }\r\n  }\r\n\r\n  private async handleUpdateTask(task: TaskoratorTask): Promise<void> {\r\n    const tree = this.taskTreeService.getLatestTree();\r\n    if (tree) {\r\n      await this.treeNodeService.updateTasks(tree, [task]);\r\n      this.queueUpdate(); // Queue a batched update\r\n    }\r\n  }\r\n\r\n  private async handleUpdateTasks(tasks: TaskoratorTask[]): Promise<void> {\r\n    const tree = this.taskTreeService.getLatestTree();\r\n    if (tree) {\r\n      await this.treeNodeService.updateTasks(tree, tasks);\r\n      this.queueUpdate(); // Queue a batched update\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskTreeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskTreeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskTreeHealService",
            "id": "injectable-TaskTreeHealService-a3fb65dc46d6b1201db463aa40c3ff04769139ec9e5d864a6c625960e216f241a648c38d4413d7d32a9b6778d89b77ec387ae68743bbf71b8dd6a2fb3b6f540d",
            "file": "src/app/services/tree/task-tree-heal.service.ts",
            "properties": [
                {
                    "name": "HEALING_DELAY",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "healingInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "healingTimeout",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "healTreeIfNeeded",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHeal the tree if needed.\n",
                    "description": "<p>Heal the tree if needed.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscribe to events for dynamic tree healing.\n",
                    "description": "<p>Subscribe to events for dynamic tree healing.</p>\n"
                },
                {
                    "name": "treeNeedsHealing",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the tree needs healing.\n",
                    "description": "<p>Check if the tree needs healing.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskCacheService } from '../cache/task-cache.service';\r\nimport { TreeService } from '../sync-api-cache/tree.service';\r\nimport { EventBusService } from '../core/event-bus.service';\r\nimport { getDefaultTree, TaskTree } from '../../models/taskTree';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { TreeNodeService } from './tree-node.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTreeHealService {\r\n  private healingInProgress = false; // Track ongoing healing\r\n  private healingTimeout: any = null; // Store the timeout for debounce\r\n  private HEALING_DELAY = 500; // Delay in milliseconds\r\n\r\n  constructor(\r\n    private taskCache: TaskCacheService,\r\n    private treeService: TreeService, // indirectly uses TaskTreeNodeToolsService\r\n    private eventBusService: EventBusService,\r\n    private treeNodeService: TreeNodeService // indirectly uses TaskTreeNodeToolsService\r\n  ) {\r\n    this.subscribeToEvents();\r\n  }\r\n\r\n  /**\r\n   * Check if the tree needs healing.\r\n   */\r\n  treeNeedsHealing(tree: TaskTree): TaskoratorTask[] | null {\r\n    const allTasks = this.taskCache.getAllTasks(); // Fetch all cached tasks\r\n    const treeTasks = this.treeService.getFlattenedTree(tree); // Flattened list of tree nodes\r\n\r\n    // we can't do it because cache will not always load all tasks...\r\n    // // Quick check: Does the cache have more tasks than the tree?\r\n    // if (treeTasks.length >= allTasks.length) {\r\n    //   console.log('Tree has more tasks than the cache. Healing not needed.');\r\n    //   return null;\r\n    // }\r\n\r\n    // Advanced check: Are there tasks in the cache that are not in the tree?\r\n    const treeTaskIds = new Set(treeTasks.map((node) => node.taskId));\r\n    const missingTasks = allTasks.filter(\r\n      (task) => !treeTaskIds.has(task.taskId)\r\n    );\r\n\r\n    if (missingTasks.length > 0) {\r\n      console.log(\r\n        `Tree is missing ${missingTasks.length} tasks. Healing needed.`\r\n      );\r\n      return missingTasks;\r\n    }\r\n\r\n    console.log('Tree is healthy.');\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Heal the tree if needed.\r\n   */\r\n  async healTreeIfNeeded(tree: TaskTree): Promise<boolean> {\r\n    if (this.healingInProgress) {\r\n      console.log('Healing already in progress. Skipping this invocation.');\r\n      return false;\r\n    }\r\n\r\n    if (!tree) return false;\r\n\r\n    const missingTasks = this.treeNeedsHealing(tree);\r\n    if (missingTasks) {\r\n      this.healingInProgress = true; // Mark healing as in progress\r\n      console.log('Healing tree...');\r\n\r\n      try {\r\n        const createdTasks = await this.treeNodeService.createTasks(\r\n          tree,\r\n          missingTasks\r\n        );\r\n\r\n        if (createdTasks.length > 0) {\r\n          console.warn('Tree updated with new tasks.');\r\n          await this.treeService.updateTree(tree);\r\n        }\r\n\r\n        return true;\r\n      } finally {\r\n        this.healingInProgress = false; // Reset healing status\r\n      }\r\n    }\r\n\r\n    return false; // No healing needed\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events for dynamic tree healing.\r\n   */\r\n  subscribeToEvents(): void {\r\n    this.eventBusService\r\n      .onEvent<TaskoratorTask[]>('getTasks')\r\n      .subscribe((tasks) => {\r\n        console.log('Tasks fetched event received.');\r\n\r\n        if (this.healingTimeout) {\r\n          clearTimeout(this.healingTimeout); // Clear existing timeout\r\n        }\r\n\r\n        this.healingTimeout = setTimeout(() => {\r\n          const tree = this.treeService.getLatestTree();\r\n          if (tree) {\r\n            this.healTreeIfNeeded(tree).then((healed) => {\r\n              if (healed) {\r\n                console.log('Tree was healed after tasks fetched.');\r\n              }\r\n            });\r\n          }\r\n        }, this.HEALING_DELAY);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "taskCache",
                        "type": "TaskCacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskTreeNodeToolsService",
            "id": "injectable-TaskTreeNodeToolsService-85430f383da66db4292fb066cbc5453eab2c43ba2adb20de68501821a0b2a2f5281b44a7546c25b6dc00e4612bf8286565875ef965f7fc371c0226a2f27a542f",
            "file": "src/app/services/tree/task-tree-node-tools.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkTreeConnectivity",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the tree is fully connected.\n",
                    "description": "<p>Check if the tree is fully connected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findNodeById",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode | null",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFind a task node by ID.\n",
                    "description": "<p>Find a task node by ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findPathStringToTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findPathToTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFind the path to a task node.\n",
                    "description": "<p>Find the path to a task node.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flattenTree",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "array",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode[]",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "array",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFlattened",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode[]",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFlatten the task tree into a list of nodes.\n",
                    "description": "<p>Flatten the task tree into a list of nodes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskIdsToCrush",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskIdsToSplit",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<[] | null>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskInfo",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskNodeInfo | null",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet information about a specific task in the tree.\n",
                    "description": "<p>Get information about a specific task in the tree.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasManyDescendants",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "threshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine if a task node has many descendants.\n",
                    "description": "<p>Determine if a task node has many descendants.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "threshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDeeplyNested",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depthThreshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine if a task is deeply nested within the tree.\n",
                    "description": "<p>Determine if a task is deeply nested within the tree.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depthThreshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidate the structure of a TaskTreeNode.\n",
                    "description": "<p>Validate the structure of a TaskTreeNode.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskNodeInfo, TaskTree, TaskTreeNode } from '../../models/taskTree';\r\nimport { ROOT_TASK_ID } from '../../models/taskModelManager';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTreeNodeToolsService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Validate the structure of a TaskTreeNode.\r\n   */\r\n  validateNode(node: TaskTreeNode): boolean {\r\n    if (!node || !node.taskId || !node.name) {\r\n      console.warn(`Invalid node structure: ${JSON.stringify(node)}`);\r\n      return false;\r\n    }\r\n    if (node.taskId === ROOT_TASK_ID && node.overlord !== null) {\r\n      console.warn(\r\n        `Primarch node cannot have an overlord: ${JSON.stringify(node)}`\r\n      );\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  findPathStringToTask(taskId: string, tree: TaskTree): string {\r\n    if (!tree || !tree.primarch) return '';\r\n\r\n    const pathNodes = this.findPathToTask(taskId, tree.primarch);\r\n    if (!pathNodes) return '';\r\n\r\n    return pathNodes.map((node) => node.name).join(' >>> ');\r\n  }\r\n\r\n  /**\r\n   * Find a task node by ID.\r\n   */\r\n  findNodeById(node: TaskTreeNode, taskId: string): TaskTreeNode | null {\r\n    if (!node) return null;\r\n    if (node.taskId === taskId) return node;\r\n\r\n    for (const child of node.children) {\r\n      const found = this.findNodeById(child, taskId);\r\n      if (found) return found;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Determine if a task node has many descendants.\r\n   */\r\n  hasManyDescendants(node: TaskTreeNode, threshold: number): boolean {\r\n    let count = 0;\r\n\r\n    const countDescendants = (currentNode: TaskTreeNode) => {\r\n      count += currentNode.children.length;\r\n      currentNode.children.forEach(countDescendants);\r\n    };\r\n\r\n    countDescendants(node);\r\n    return count >= threshold;\r\n  }\r\n\r\n  /**\r\n   * Determine if a task is deeply nested within the tree.\r\n   */\r\n  isDeeplyNested(node: TaskTreeNode, depthThreshold: number): boolean {\r\n    const getDepth = (currentNode: TaskTreeNode): number => {\r\n      if (!currentNode.children.length) return 0;\r\n      return 1 + Math.max(...currentNode.children.map(getDepth));\r\n    };\r\n\r\n    return getDepth(node) > depthThreshold;\r\n  }\r\n\r\n  async getTaskIdsToSplit(taskTree: TaskTree): Promise<TaskTreeNode[] | null> {\r\n    const tasksToSplit: TaskTreeNode[] = [];\r\n    const traverse = (node: TaskTreeNode) => {\r\n      if (this.hasManyDescendants(node, 20) || this.isDeeplyNested(node, 3)) {\r\n        tasksToSplit.push(node);\r\n      }\r\n      node.children.forEach(traverse);\r\n    };\r\n\r\n    traverse(taskTree.primarch);\r\n    return tasksToSplit.length > 0 ? tasksToSplit : null;\r\n  }\r\n\r\n  async getTaskIdsToCrush(taskTree: TaskTree): Promise<TaskTreeNode[] | null> {\r\n    const tasksToCrush: TaskTreeNode[] = [];\r\n    const traverse = (node: TaskTreeNode) => {\r\n      if (node.children.length > 10) {\r\n        tasksToCrush.push(node);\r\n      }\r\n      node.children.forEach(traverse);\r\n    };\r\n\r\n    traverse(taskTree.primarch);\r\n    return tasksToCrush.length > 0 ? tasksToCrush : null;\r\n  }\r\n\r\n  /**\r\n   * Find the path to a task node.\r\n   */\r\n  findPathToTask(\r\n    taskId: string,\r\n    node: TaskTreeNode,\r\n    path: TaskTreeNode[] = []\r\n  ): TaskTreeNode[] | null {\r\n    path.push(node);\r\n\r\n    if (node.taskId === taskId) {\r\n      return path;\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      const result = this.findPathToTask(taskId, child, [...path]);\r\n      if (result) return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Flatten the task tree into a list of nodes.\r\n   */\r\n  getFlattened(tree: TaskTree): TaskTreeNode[] {\r\n    console.log('Getting flattened tree 2 ');\r\n    console.log(tree);\r\n    return this.flattenTree(tree.primarch);\r\n  }\r\n\r\n  private flattenTree(\r\n    node: TaskTreeNode,\r\n    array: TaskTreeNode[] = []\r\n  ): TaskTreeNode[] {\r\n    if (!node) {\r\n      console.error('Encountered a null or undefined node:', node);\r\n      return array; // Skip invalid nodes\r\n    }\r\n\r\n    array.push(node);\r\n\r\n    (node.children || []).forEach((child) => {\r\n      if (!child || !child.taskId) {\r\n        console.warn('Skipping invalid child node:', child);\r\n        return;\r\n      }\r\n      this.flattenTree(child, array);\r\n    });\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Check if the tree is fully connected.\r\n   */\r\n  checkTreeConnectivity(tree: TaskTree): boolean {\r\n    const unconnectedTasks = this.getFlattened(tree).filter(\r\n      (node) => !node.connected\r\n    );\r\n    if (unconnectedTasks.length === 0) {\r\n      console.log('Tree is fully connected');\r\n      tree.connected = true;\r\n      return true;\r\n    }\r\n\r\n    console.warn(\r\n      `Tree has unconnected tasks: ${unconnectedTasks.map(\r\n        (task) => task.taskId\r\n      )}`\r\n    );\r\n    tree.connected = false;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get information about a specific task in the tree.\r\n   */\r\n  getTaskInfo(tree: TaskTree, taskId: string): TaskNodeInfo | null {\r\n    const treeNode = this.findNodeById(tree.primarch, taskId);\r\n\r\n    const abyssNode = tree?.abyss?.find((t) => t.taskId === taskId);\r\n    const node = treeNode || abyssNode;\r\n    if (!node) return null;\r\n\r\n    return {\r\n      taskId: node.taskId,\r\n      stage: node.stage,\r\n      overlord: node.overlord,\r\n      childrenCount: node.childrenCount,\r\n      completedChildrenCount: node.completedChildrenCount,\r\n      connected: node.connected,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskUpdateService",
            "id": "injectable-TaskUpdateService-c18625ecef5181caa721a69c5992e441ed732202c077cbe739781081bf84614db0bafe458dc1ad01945490aad5579d5ab9db5550ffa7684ff801ea63fbec1787",
            "file": "src/app/services/tasks/task-update.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "activate",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSubtask",
                    "args": [
                        {
                            "name": "taskTo",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subtask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTo",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subtask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTag",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a tag to the specified task.\n",
                    "description": "<p>Add a tag to the specified task.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "archive",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSelectedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "complete",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetting rid of tasks\n",
                    "description": "<p>getting rid of tasks</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decreasePriority",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndecrease priority will be reset beyond max\n",
                    "description": "<p>decrease priority will be reset beyond max</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increasePriority",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nincrease priority will be reset beyond max\n",
                    "description": "<p>increase priority will be reset beyond max</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "move",
                    "args": [
                        {
                            "name": "targetTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetTask",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTag",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove a tag from the task with the specified taskId.\n",
                    "description": "<p>Remove a tag from the task with the specified taskId.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renew",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAsSeen",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nbasically allow remove it for a moment, maybe day, maybe month... we are not sure\nif set seen, and lets say last updated yesterday, show it, but if today, not show it?\n",
                    "description": "<p>basically allow remove it for a moment, maybe day, maybe month... we are not sure\nif set seen, and lets say last updated yesterday, show it, but if today, not show it?</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBackupLink",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nbackup, github link\n",
                    "description": "<p>backup, github link</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDuration",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nto calculate end date or to get it once time end is calculated\n",
                    "description": "<p>to calculate end date or to get it once time end is calculated</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setImageDataUrl",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageDataUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageDataUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setImageUrl",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nimages\n",
                    "description": "<p>images</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOverlord",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nparent child management\n",
                    "description": "<p>parent child management</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRepeat",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "repeat",
                            "type": "RepeatOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrepetition\n",
                    "description": "<p>repetition</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repeat",
                            "type": "RepeatOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "TaskSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmight be used to decide what action to take, if small do now, if big split if too big, delegate\n",
                    "description": "<p>might be used to decide what action to take, if small do now, if big split if too big, delegate</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "TaskSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "TaskStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nis it some project we want to do now or later, whether is actively in progress or not\n",
                    "description": "<p>is it some project we want to do now or later, whether is actively in progress or not</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "TaskStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSubType",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subtype",
                            "type": "TaskSubtype",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmight be used in addition to parent child relation\n",
                    "description": "<p>might be used in addition to parent child relation</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subtype",
                            "type": "TaskSubtype",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTimeEnd",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeEnd",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeEnd",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTodo",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setType",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "TaskType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwhat is the size or magnitude of the tasks, idea, project, task, todo\n",
                    "description": "<p>what is the size or magnitude of the tasks, idea, project, task, todo</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "TaskType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWhy",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "why",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdate\n",
                    "description": "<p>update</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "why",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "split",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskOne",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskTwo",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskOne",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskTwo",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "TaskActions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  TaskoratorTask,\r\n  maxPriority,\r\n  RepeatOptions,\r\n  TaskStatus,\r\n  TaskType,\r\n  TaskSubtype,\r\n  TaskSize,\r\n} from '../../models/taskModelManager';\r\nimport { SelectedMultipleService } from './selected-multiple.service';\r\nimport { firstValueFrom } from 'rxjs/internal/firstValueFrom';\r\nimport { SettingsService } from '../sync-api-cache/settings.service';\r\nimport { TaskSettings } from '../../models/settings';\r\nimport { TaskService } from '../sync-api-cache/task.service';\r\nimport { TaskBatchService } from '../sync-api-cache/task-batch.service';\r\nimport {\r\n  TaskActions,\r\n  TaskActionTrackerService,\r\n} from './task-action-tracker.service';\r\nimport { ErrorService } from '../core/error.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskUpdateService {\r\n  constructor(\r\n    private taskService: TaskService,\r\n    private taskBatchService: TaskBatchService,\r\n    private selectedService: SelectedMultipleService,\r\n    private settingsService: SettingsService,\r\n    private actionService: TaskActionTrackerService,\r\n    private errorService: ErrorService\r\n  ) {}\r\n\r\n  move(targetTask: TaskoratorTask) {\r\n    firstValueFrom(this.selectedService.getSelectedTasks()).then(\r\n      (selectedTasks) => {\r\n        if (selectedTasks.length > 0 && targetTask.taskId) {\r\n          for (const task of selectedTasks) {\r\n            task.overlord = targetTask.taskId;\r\n          }\r\n\r\n          this.taskBatchService.updateTaskBatch(\r\n            selectedTasks,\r\n            TaskActions.MOVED,\r\n            targetTask.taskId\r\n          );\r\n          this.clearSelectedTasks();\r\n          this.feedback(\r\n            'Moved multiple tasks. ' +\r\n              selectedTasks.map((t) => t.name).join(',')\r\n          );\r\n        } else {\r\n          this.error(\r\n            \"Can't update empty tasks or failed to create new overlord.\"\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private clearSelectedTasks() {\r\n    this.settingsService.getSettingsOnce().then((s: TaskSettings | null) => {\r\n      if (s) {\r\n        if (s.moveTasksOnce) {\r\n          this.selectedService.clear();\r\n          this.feedback('Cleared selected tasks. ');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  split(\r\n    task: TaskoratorTask,\r\n    taskOne: TaskoratorTask,\r\n    taskTwo: TaskoratorTask\r\n  ) {\r\n    taskOne.overlord = task.taskId;\r\n    taskTwo.overlord = task.taskId;\r\n    const name1 = task.name;\r\n    const name2 = taskOne.name;\r\n    const name3 = taskTwo.name;\r\n\r\n    if (name1 !== name2 && name1 !== name3 && name2 !== name3) {\r\n      this.taskBatchService\r\n        .createTaskBatch([taskOne, taskTwo], task.taskId)\r\n        .then(() => {\r\n          this.feedback('Tasks split');\r\n        });\r\n    } else {\r\n      this.error('task names are the same');\r\n    }\r\n  }\r\n\r\n  create(task: TaskoratorTask) {\r\n    task.timeCreated = Date.now();\r\n    this.taskService.createTask(task).then((createdTask: TaskoratorTask) => {\r\n      this.log('Created: ' + createdTask.taskId + ' ' + createdTask.name);\r\n      this.feedback('Created: ' + ' ' + createdTask.name);\r\n      this.actionService.recordAction(task.taskId, TaskActions.CREATED);\r\n    });\r\n  }\r\n\r\n  addSubtask(taskTo: TaskoratorTask, subtask: TaskoratorTask) {\r\n    subtask.overlord = taskTo.taskId;\r\n    this.create(subtask);\r\n  }\r\n\r\n  update(task: TaskoratorTask, action: TaskActions, subAction?: any) {\r\n    task.lastUpdated = Date.now();\r\n    this.taskService.updateTask(task).then(() => {\r\n      this.feedback(task.name + ' ' + action + ' ' + (subAction || ''));\r\n      this.actionService.recordAction(task.taskId, action, subAction);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * parent child management\r\n   */\r\n  setOverlord(task: TaskoratorTask, overlord: TaskoratorTask) {\r\n    task.overlord = overlord.taskId;\r\n    this.update(task, TaskActions.MOVED, overlord.taskId);\r\n  }\r\n\r\n  /**\r\n   * getting rid of tasks\r\n   */\r\n  complete(task: TaskoratorTask) {\r\n    // if (task.stage === 'completed') {\r\n    //   task.stage = 'todo';\r\n    //   this.log('Todo: ' + task.name);\r\n    //   this.update(task, TaskActions.ACTIVATED);\r\n    // } else {\r\n    //   task.stage = 'completed';\r\n    //   this.log('Completed: ' + task.name);\r\n    //   this.update(task, TaskActions.COMPLETED);\r\n    // }\r\n\r\n    // TODO: figure out how to handle SEEN...\r\n    task.stage = 'completed';\r\n    this.log('Completed: ' + task.name);\r\n    this.update(task, TaskActions.COMPLETED);\r\n  }\r\n\r\n  archive(task: TaskoratorTask) {\r\n    task.stage = 'archived';\r\n    this.update(task, TaskActions.ARCHIVED);\r\n    this.log('Archived: ' + task.name);\r\n  }\r\n\r\n  delete(task: TaskoratorTask) {\r\n    task.stage = 'deleted';\r\n    this.update(task, TaskActions.DELETED);\r\n    this.log('Deleted: ' + task.name + ' at ' + task.lastUpdated);\r\n  }\r\n\r\n  renew(task: TaskoratorTask) {\r\n    task.stage = 'todo';\r\n    this.update(task, TaskActions.RENEWED);\r\n    this.log('Renewed: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * basically allow remove it for a moment, maybe day, maybe month... we are not sure\r\n   * if set seen, and lets say last updated yesterday, show it, but if today, not show it?\r\n   */\r\n  setAsSeen(task: TaskoratorTask) {\r\n    task.stage = 'seen';\r\n    this.update(task, TaskActions.SEEN);\r\n    this.log('Seen: ' + task.name);\r\n  }\r\n\r\n  activate(task: TaskoratorTask) {\r\n    task.stage = 'todo';\r\n    this.update(task, TaskActions.ACTIVATED);\r\n    this.log('Activated: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * increase priority will be reset beyond max\r\n   */\r\n  increasePriority(task: TaskoratorTask) {\r\n    if (task.priority < maxPriority) {\r\n      task.priority++;\r\n    } else {\r\n      task.priority = 0;\r\n    }\r\n    this.update(task, TaskActions.PRIORITY_INCREASED);\r\n    this.log('Priority increased: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * decrease priority will be reset beyond max\r\n   */\r\n  decreasePriority(task: TaskoratorTask) {\r\n    if (task.priority > 0) {\r\n      task.priority--;\r\n    } else {\r\n      task.priority = maxPriority;\r\n    }\r\n    this.update(task, TaskActions.PRIORITY_DECREASED);\r\n    this.log('Priority decreased: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * update\r\n   */\r\n  setWhy(task: TaskoratorTask, why: string) {\r\n    task.why = why;\r\n    this.update(task, TaskActions.WHY_UPDATED);\r\n    this.log('Why updated: ' + task.name);\r\n  }\r\n\r\n  setTodo(task: TaskoratorTask, todo: string) {\r\n    task.todo = todo;\r\n    this.update(task, TaskActions.TODO_UPDATED);\r\n    this.log('Todo updated: ' + task.name);\r\n  }\r\n\r\n  setName(task: TaskoratorTask, name: string) {\r\n    task.name = name;\r\n    this.update(task, TaskActions.NAME_UPDATED);\r\n    this.log('Name Updated: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * Add a tag to the specified task.\r\n   */\r\n  addTag(task: TaskoratorTask, tag: string) {\r\n    if (!tag || tag.trim() === '') {\r\n      // Invalid or empty tag, so we exit early.\r\n      return;\r\n    }\r\n\r\n    // Ensure task.tags is initialized.\r\n    if (!task.tags) {\r\n      task.tags = [];\r\n    }\r\n\r\n    // Only add the tag if it doesn't already exist.\r\n    if (!task.tags.includes(tag)) {\r\n      task.tags.push(tag);\r\n    }\r\n    this.update(task, TaskActions.TAG_ADDED);\r\n  }\r\n\r\n  /**\r\n   * Remove a tag from the task with the specified taskId.\r\n   */\r\n  removeTag(task: TaskoratorTask, tag: string) {\r\n    if (!task.tags || !tag) {\r\n      // If tags are not initialized or the tag is invalid, we exit early.\r\n      return;\r\n    }\r\n\r\n    const tagIndex = task.tags.indexOf(tag);\r\n\r\n    // Remove the tag if it exists.\r\n    if (tagIndex !== -1) {\r\n      task.tags.splice(tagIndex, 1);\r\n    }\r\n\r\n    // If the tags array is empty after removing, set it to [] (optional).\r\n    if (task.tags.length === 0) {\r\n      task.tags = [];\r\n    }\r\n    this.update(task, TaskActions.TAG_REMOVED);\r\n  }\r\n\r\n  /**\r\n   * images\r\n   */\r\n  setImageUrl(task: TaskoratorTask, imageUrl: string) {\r\n    task.imageUrl = imageUrl;\r\n    this.update(task, TaskActions.IMAGE_UPDATED);\r\n    this.log('Image url updated: ' + task.name);\r\n  }\r\n\r\n  setImageDataUrl(task: TaskoratorTask, imageDataUrl: string) {\r\n    task.imageDataUrl = imageDataUrl;\r\n    this.update(task, TaskActions.IMAGE_UPDATED);\r\n    this.log('Image updated: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * backup, github link\r\n   */\r\n  setBackupLink(task: TaskoratorTask, url: string) {\r\n    task.backupLink = url;\r\n    this.update(task, TaskActions.BACKUP_LINK_UPDATED);\r\n    this.log('Backup link updated: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * repetition\r\n   */\r\n  setRepeat(task: TaskoratorTask, repeat: RepeatOptions) {\r\n    task.repeat = repeat;\r\n    this.update(task, TaskActions.REPEAT_UPDATED, repeat);\r\n    this.log('Updated repeat: ' + task.name);\r\n  }\r\n\r\n  setTimeEnd(task: TaskoratorTask, timeEnd: number) {\r\n    task.timeEnd = timeEnd;\r\n    this.update(task, TaskActions.TIME_END_UPDATED, timeEnd);\r\n    this.log('Updated time end: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * to calculate end date or to get it once time end is calculated\r\n   */\r\n  setDuration(task: TaskoratorTask, duration: number) {\r\n    task.duration = duration;\r\n    this.update(task, TaskActions.DURATION_UPDATED, duration);\r\n    this.log('Updated duration: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * is it some project we want to do now or later, whether is actively in progress or not\r\n   */\r\n  setStatus(task: TaskoratorTask, status: TaskStatus) {\r\n    task.status = status;\r\n    this.update(task, TaskActions.STATUS_UPDATED, status);\r\n    this.log('Updated status: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * what is the size or magnitude of the tasks, idea, project, task, todo\r\n   */\r\n  setType(task: TaskoratorTask, type: TaskType) {\r\n    task.type = type;\r\n    this.update(task, TaskActions.TYPE_UPDATED, type);\r\n    this.log('Updated type: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * might be used in addition to parent child relation\r\n   */\r\n  setSubType(task: TaskoratorTask, subtype: TaskSubtype) {\r\n    task.subtype = subtype;\r\n    this.update(task, TaskActions.SUBTYPE_UPDATED, subtype);\r\n    this.log('Updated subtype: ' + task.name);\r\n  }\r\n\r\n  /**\r\n   * might be used to decide what action to take, if small do now, if big split if too big, delegate\r\n   */\r\n  setSize(task: TaskoratorTask, size: TaskSize) {\r\n    task.size = size;\r\n    this.update(task, TaskActions.SIZE_UPDATED, size);\r\n    this.log('Updated size: ' + task.name);\r\n  }\r\n\r\n  feedback(msg: string) {\r\n    this.errorService.feedback(msg);\r\n  }\r\n  log(msg: string) {\r\n    this.errorService.log(msg);\r\n  }\r\n  error(msg: string) {\r\n    this.errorService.error(msg);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionService",
                        "type": "TaskActionTrackerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionService",
                        "type": "TaskActionTrackerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskUsageService",
            "id": "injectable-TaskUsageService-bf7d497a3b3d712787f9509aab452bdcd0ea30b2240d3319db026fedaa6a69969729b30bf81b52889f15ce709cd4165b92f1929c2405d408997c2fe2ad0c0e04",
            "file": "src/app/services/tasks/task-usage.service.ts",
            "properties": [
                {
                    "name": "storageKey",
                    "defaultValue": "'taskUsageData'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearUsageData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all usage data.\n",
                    "description": "<p>Clear all usage data.</p>\n"
                },
                {
                    "name": "getAllUsageData",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet all usage data.\n",
                    "description": "<p>Get all usage data.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1083,
                                "end": 1090,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An object mapping task IDs to usage details.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTaskUsage",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskUsage | null",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskViews",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet view count for a task.\n",
                    "description": "<p>Get view count for a task.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 680,
                                "end": 686,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 674,
                                "end": 679,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The ID of the task.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 716,
                                "end": 723,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The number of views for the task.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getUsageData",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve usage data from localStorage.\n",
                    "description": "<p>Retrieve usage data from localStorage.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1422,
                                "end": 1429,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Parsed usage data object.</p>\n"
                        }
                    ]
                },
                {
                    "name": "incrementTaskView",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIncrement the view count for a task.\n",
                    "description": "<p>Increment the view count for a task.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 282,
                                "end": 288,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 276,
                                "end": 281,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The ID of the task.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "saveUsageData",
                    "args": [
                        {
                            "name": "usageData",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSave usage data to localStorage.\n",
                    "description": "<p>Save usage data to localStorage.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1689,
                                "end": 1698,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "usageData"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1683,
                                "end": 1688,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The usage data to save.</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskUsageService {\r\n  private readonly storageKey = 'taskUsageData'; // Key for localStorage\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Increment the view count for a task.\r\n   * @param taskId - The ID of the task.\r\n   */\r\n  incrementTaskView(taskId: string): void {\r\n    const usageData = this.getUsageData();\r\n    const taskUsage = usageData[taskId] || { views: 0, lastViewed: 0 };\r\n\r\n    taskUsage.views++;\r\n    taskUsage.lastViewed = Date.now();\r\n\r\n    usageData[taskId] = taskUsage;\r\n    this.saveUsageData(usageData);\r\n  }\r\n\r\n  /**\r\n   * Get view count for a task.\r\n   * @param taskId - The ID of the task.\r\n   * @returns The number of views for the task.\r\n   */\r\n  getTaskViews(taskId: string): number {\r\n    const usageData = this.getUsageData();\r\n    return usageData[taskId]?.views || 0;\r\n  }\r\n\r\n  getTaskUsage(taskId: string): TaskUsage | null {\r\n    const usageData = this.getUsageData();\r\n    return usageData[taskId] || null;\r\n  }\r\n\r\n  /**\r\n   * Get all usage data.\r\n   * @returns An object mapping task IDs to usage details.\r\n   */\r\n  getAllUsageData(): { [taskId: string]: TaskUsage } {\r\n    return this.getUsageData();\r\n  }\r\n\r\n  /**\r\n   * Clear all usage data.\r\n   */\r\n  clearUsageData(): void {\r\n    localStorage.removeItem(this.storageKey);\r\n  }\r\n\r\n  /**\r\n   * Retrieve usage data from localStorage.\r\n   * @returns Parsed usage data object.\r\n   */\r\n  private getUsageData(): { [taskId: string]: TaskUsage } {\r\n    const data = localStorage.getItem(this.storageKey);\r\n    return data ? JSON.parse(data) : {};\r\n  }\r\n\r\n  /**\r\n   * Save usage data to localStorage.\r\n   * @param usageData - The usage data to save.\r\n   */\r\n  private saveUsageData(usageData: { [taskId: string]: TaskUsage }): void {\r\n    localStorage.setItem(this.storageKey, JSON.stringify(usageData));\r\n  }\r\n}\r\n\r\n/**\r\n * Interface for task usage details.\r\n */\r\nexport interface TaskUsage {\r\n  views: number; // Number of times the task was viewed\r\n  lastViewed: number; // Timestamp of the last view\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskUtilityService",
            "id": "injectable-TaskUtilityService-e4b4c95465edf15a31b4e426832fa7f9aa48194299e8ce36f1f6931628b57d037095ddf4c07a9c554ee9ac00a0bc57b1299c970ba1a251ca0d1be5daa46b12a5",
            "file": "src/app/services/tasks/task-utility.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getSelectedOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ExtendedTask | null>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedOverlordId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ExtendedTask | null>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskData",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskData | null>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SelectedOverlordService } from './selected-overlord.service';\r\nimport { TaskService } from '../sync-api-cache/task.service';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\nimport { TreeService } from '../sync-api-cache/tree.service';\r\nimport { TaskNodeInfo } from '../../models/taskTree';\r\nimport { TaskUsage, TaskUsageService } from './task-usage.service';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\n\r\nexport interface TaskData {\r\n  task: ExtendedTask | null;\r\n  usage: TaskUsage | null;\r\n  node: TaskNodeInfo | null;\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskUtilityService {\r\n  constructor(\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskService: TaskService,\r\n    private treeService: TreeService,\r\n    private taskUsageService: TaskUsageService\r\n  ) {}\r\n\r\n  getSelectedOverlordId(): Observable<string | null> {\r\n    return this.selectedOverlordService.getSelectedOverlordObservable();\r\n  }\r\n\r\n  async getTaskData(id: string): Promise<TaskData | null> {\r\n    const usage: TaskUsage | null = this.taskUsageService.getTaskUsage(id);\r\n    const node: TaskNodeInfo | null =\r\n      this.treeService.getTaskTreeData(id) || null;\r\n    const task: ExtendedTask | null = await this.taskService.getTaskById(id);\r\n    const taskData: TaskData = { usage, node, task };\r\n    if (!usage && !node && !taskData) return null;\r\n    return taskData;\r\n  }\r\n\r\n  async getTaskById(id: string): Promise<ExtendedTask | null> {\r\n    return this.taskService.getTaskById(id);\r\n  }\r\n\r\n  getSelectedOverlord(): Observable<ExtendedTask | null> {\r\n    return this.selectedOverlordService.getSelectedOverlordObservable().pipe(\r\n      switchMap((id) => {\r\n        if (!id) {\r\n          return of(null); // Return an observable of null if no ID is present\r\n        }\r\n        return this.taskService.getTaskById(id).then((task) => task); // Convert the Promise to an Observable\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskUsageService",
                        "type": "TaskUsageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskUsageService",
                        "type": "TaskUsageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskValidatorService",
            "id": "injectable-TaskValidatorService-758a5906a9299e03ef0fed7da7e86eb6597f8b72d8d0891de066bc1628ef8448535196e941ed1458fad1facbc4688a9a4515a58a9b73f0575d328e8ab6d54086",
            "file": "src/app/services/core/task-validator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isTaskParametersValid",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTaskValid",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TaskoratorTask } from '../../models/taskModelManager';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskValidatorService {\n  isTaskValid(task: TaskoratorTask) {\n    if (!this.isTaskParametersValid(task)) return false;\n    return true;\n  }\n\n  isTaskParametersValid(task: TaskoratorTask) {\n    if (task.name.length < 1) return false;\n    return true;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskViewService",
            "id": "injectable-TaskViewService-459f6e1b9ecf33138972f466a102989017223f924e0f453c54de94860c0ee91e3783d7d0eef70d2850879adf3525ff99f65efcb002b9d1542d655a594ad1099d",
            "file": "src/app/services/tasks/task-view.service.ts",
            "properties": [
                {
                    "name": "currentTaskListKey",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListKey | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentTaskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tasks$",
                    "defaultValue": "this.tasksSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tasksSubject",
                    "defaultValue": "new BehaviorSubject<ExtendedTask[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initializeActionListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListen for task actions and react accordingly.\n",
                    "description": "<p>Listen for task actions and react accordingly.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reactToAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "TaskAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReact to a task action by refreshing or modifying the current list.\n",
                    "description": "<p>React to a task action by refreshing or modifying the current list.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2868,
                                "end": 2874,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "action"
                            },
                            "type": "TaskAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2862,
                                "end": 2867,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The task action to handle.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "setTasksListGroup",
                    "args": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the current task list group and refresh the view.\n",
                    "description": "<p>Set the current task list group and refresh the view.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskListKey",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentList",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRefresh the current task list from the cache and apply rules.\n",
                    "description": "<p>Refresh the current task list from the cache and apply rules.</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport {\r\n  TaskActions,\r\n  TaskAction,\r\n  TaskActionTrackerService,\r\n} from './task-action-tracker.service';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\nimport { TaskIdCacheService } from '../cache/task-id-cache.service';\r\nimport { TaskListKey, TaskListRules } from '../../models/task-list-model';\r\nimport { TaskListRulesService } from './task-list-rules.service';\r\nimport { SelectedListService } from './selected-list.service';\r\nimport { TaskListSimpleService } from './task-list-simple.service';\r\nimport { TaskListService } from '../sync-api-cache/task-list.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskViewService {\r\n  private tasks: ExtendedTask[] = [];\r\n  private tasksSubject = new BehaviorSubject<ExtendedTask[]>([]);\r\n  tasks$ = this.tasksSubject.asObservable();\r\n  currentTaskListKey: TaskListKey | null = null;\r\n  currentTaskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private actionTracker: TaskActionTrackerService,\r\n    private taskListRulesService: TaskListRulesService,\r\n    private selectedList: SelectedListService,\r\n    private taskListSimpleService: TaskListSimpleService\r\n  ) {\r\n    this.initializeActionListener();\r\n  }\r\n\r\n  /**\r\n   * Set the current task list group and refresh the view.\r\n   * @param taskListGroup - The group name of the task list.\r\n   */\r\n  setTasksListGroup(taskListKey: TaskListKey): void {\r\n    this.currentTaskListKey = taskListKey;\r\n    this.selectedList.setSelectedListKey(taskListKey);\r\n    this.updateCurrentList();\r\n  }\r\n\r\n  /**\r\n   * Refresh the current task list from the cache and apply rules.\r\n   */\r\n  private async updateCurrentList(): Promise<void> {\r\n    if (!this.currentTaskListKey) {\r\n      this.tasks = [];\r\n      this.tasksSubject.next(this.tasks);\r\n      return;\r\n    }\r\n\r\n    // let tasks = [...this.taskIdService.getTasks(ids), ...cachedTasks];\r\n    console.log('Fetching tasks for list key:', this.currentTaskListKey);\r\n\r\n    let tasks = await this.taskListSimpleService.getList(\r\n      this.currentTaskListKey\r\n    );\r\n    if (!tasks) return;\r\n\r\n    // Apply rules to tasks using TaskListManagerService\r\n    tasks = this.taskListRulesService.applyRulesToList(\r\n      this.currentTaskListKey,\r\n      tasks\r\n    );\r\n\r\n    this.currentTaskListRules = this.taskListRulesService.getList(\r\n      this.currentTaskListKey\r\n    );\r\n\r\n    this.tasks = tasks;\r\n    this.tasksSubject.next(this.tasks);\r\n  }\r\n\r\n  /**\r\n   * Listen for task actions and react accordingly.\r\n   */\r\n  private initializeActionListener(): void {\r\n    this.actionTracker.lastAction$.subscribe((action) => {\r\n      if (action) {\r\n        this.reactToAction(action);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * React to a task action by refreshing or modifying the current list.\r\n   * @param action - The task action to handle.\r\n   */\r\n  private reactToAction(action: TaskAction): void {\r\n    // Refresh the list to account for additions, removals, or moves\r\n    if (this.currentTaskListKey) {\r\n      this.updateCurrentList();\r\n    }\r\n\r\n    // // Apply additional filtering or sorting based on the action\r\n    // switch (action.action) {\r\n    //   case TaskActions.PRIORITY_INCREASED:\r\n    //   case TaskActions.PRIORITY_DECREASED:\r\n    //     this.sortTasksByPriority();\r\n    //     break;\r\n    //   case TaskActions.COMPLETED:\r\n    //   case TaskActions.DELETED:\r\n    //   case TaskActions.SEEN:\r\n    //     this.refreshCurrentTaskList();\r\n    //     break;\r\n    //   default:\r\n    //     break;\r\n    // }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actionTracker",
                        "type": "TaskActionTrackerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedList",
                        "type": "SelectedListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListSimpleService",
                        "type": "TaskListSimpleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "actionTracker",
                        "type": "TaskActionTrackerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedList",
                        "type": "SelectedListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListSimpleService",
                        "type": "TaskListSimpleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TemplateService",
            "id": "injectable-TemplateService-eaca481f857a57341b88ecc74bbf793643a555a78c77494d4ad266ce5b6c4eefae54e4be1ea6bd4eade6c51273642cf499d00943b90f5f7477a66fc4fffe08cb",
            "file": "src/app/features/core/citadel/template/services/template.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTemplate | null>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Firestore, doc, getDoc } from '@angular/fire/firestore';\r\nimport { TaskTemplate } from '../models/template';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TemplateService {\r\n  constructor(private firestore: Firestore) {}\r\n\r\n  async getTemplate(templateId: string): Promise<TaskTemplate | null> {\r\n    const templateRef = doc(this.firestore, `templates/${templateId}`);\r\n    const templateSnap = await getDoc(templateRef);\r\n    return templateSnap.exists() ? (templateSnap.data() as TaskTemplate) : null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TestTreeService",
            "id": "injectable-TestTreeService-62b055811514ebf6386af733a5e2a466a715d166fe5a703e315a5ece70148926f1b602caaa746978065cca78d0fb336e86a7920c6170cc9aa79b5d4e5c7bff72",
            "file": "src/app/test-files/test-services/test-tree.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "runTests",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { EventBusService } from '../../services/core/event-bus.service';\r\nimport { TreeService } from '../../services/sync-api-cache/tree.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TestTreeService {\r\n  constructor(\r\n    private treeService: TreeService,\r\n    private eventBus: EventBusService\r\n  ) {}\r\n\r\n  async runTests(): Promise<void> {\r\n    console.log('Starting TreeDebugService tests...');\r\n\r\n    // Test 1: Create Task Event\r\n    const testTask = { taskId: '1', name: 'Test Task' };\r\n    this.eventBus.emit('createTask', testTask);\r\n\r\n    // Test 2: Update Tree Directly\r\n    const tree = this.treeService.getLatestTree();\r\n    if (tree) {\r\n      console.log('Current tree:', tree);\r\n      tree.primarch.name = 'Updated Root';\r\n      this.treeService.updateTree(tree);\r\n    } else {\r\n      console.warn('No tree available for update.');\r\n    }\r\n\r\n    // Test 3: Fetch Tree\r\n    const fetchedTree = this.treeService.getLatestTree();\r\n    console.log('Fetched tree:', fetchedTree);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBus",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBus",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TextToTasksService",
            "id": "injectable-TextToTasksService-9a2035dd51b572dc134dc3159b5dad399364fe753658d11ebf6f9cafcb8b939eed0edb9113da2f4fea94e2ce4dcf49a77a7c5b726e04c609c6e3ce26f6db9e1b",
            "file": "src/app/features/core/crucible/input-to-tasks/services/text-to-tasks.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "findCommonSeparator",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCodeToTaskObjects",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinesToTaskLikeObjects",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLineToTaskObject",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isShortened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeparator",
                    "args": [
                        {
                            "name": "line",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\",\" | \" \"",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTaskObject",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processTask",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  getDefaultTask,\r\n  TaskoratorTask,\r\n} from '../../../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TextToTasksService {\r\n  getLinesToTaskLikeObjects(\r\n    text: string,\r\n    isShortened: boolean\r\n  ): TaskoratorTask[] {\r\n    const tasks: TaskoratorTask[] = [];\r\n    const listData = text\r\n      .split('\\n')\r\n      .map((line) => line.trim())\r\n      .filter(Boolean);\r\n\r\n    listData.forEach((line) => {\r\n      const separator = this.findCommonSeparator(line); // Function to find a common separator\r\n      let name, todo;\r\n\r\n      if (separator) {\r\n        if (isShortened) {\r\n          // Use text before the first separator as the name and the rest as todo\r\n          [name, ...todo] = line.split(separator);\r\n          todo = todo.join(separator);\r\n        } else {\r\n          name = line;\r\n          todo = '';\r\n        }\r\n      } else {\r\n        // Use the first 3 words as the name, rest as todo\r\n        const words = line.split(' ');\r\n        if (isShortened) {\r\n          name = words.slice(0, 3).join(' ');\r\n          todo = words.slice(3).join(' ');\r\n        } else {\r\n          name = line;\r\n          todo = '';\r\n        }\r\n      }\r\n\r\n      // Create and push the new task\r\n      const task: TaskoratorTask = this.processTask(name, todo);\r\n      task.type = 'note';\r\n      tasks.push(task);\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  // Function to identify common separators in a string, returns the first one found\r\n  findCommonSeparator(str: string): string | null {\r\n    const separators = [',', ';', '|', ' ', '  '];\r\n    for (const sep of separators) {\r\n      if (str.includes(sep)) {\r\n        return sep;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getCodeToTaskObjects(text: string): TaskoratorTask[] {\r\n    const tasks: TaskoratorTask[] = [];\r\n    const listData = text\r\n      .split('\\n')\r\n      .map((line) => line.trim())\r\n      .filter(Boolean);\r\n\r\n    listData.forEach((line) => {\r\n      const task: TaskoratorTask = this.processTask(line, 'assign parent');\r\n      task.type = 'code';\r\n      tasks.push(task);\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  getSeparator(line: string) {\r\n    const commasCount = line.split(',').length;\r\n    const spaceCount = line.split(' ').length;\r\n    return spaceCount > commasCount ? ' ' : ',';\r\n  }\r\n\r\n  getLineToTaskObject(text: string, isShortened: boolean): TaskoratorTask {\r\n    const separator = this.getSeparator(text);\r\n    const taskArr = text.split(separator);\r\n    let name = '';\r\n    let todo = '';\r\n\r\n    if (isShortened) {\r\n      if (taskArr.length >= 3) {\r\n        name = taskArr.slice(0, 3).join(' '); // Consider the first three words as the name\r\n        todo = taskArr.slice(3).join(separator); // Whatever is left becomes the todo\r\n      } else {\r\n        name = text; // If less than three words, consider the whole line as the name\r\n      }\r\n    } else {\r\n      name = text;\r\n      todo = '';\r\n    }\r\n\r\n    // Perform further processing with the extracted name and todo\r\n    return this.processTask(name, todo);\r\n  }\r\n\r\n  processTask(name: string, todo: string) {\r\n    const task = this.loadTaskObject(name, todo);\r\n    return task;\r\n  }\r\n\r\n  loadTaskObject(name: string, todo: string) {\r\n    const t = getDefaultTask();\r\n    t.name = name;\r\n    t.todo = todo;\r\n    return t;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TextTypeDetectorService",
            "id": "injectable-TextTypeDetectorService-109302c01f44ef365f5e84b79558d0af1e5a9d00b4e45100daf06f88678af012fd264478b27c87ffec43e9c95ee793af17157f0e5961b051be397727dedcf61a",
            "file": "src/app/features/core/crucible/input-to-tasks/services/text-type-detector.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "countSeparators",
                    "args": [
                        {
                            "name": "line",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeparator",
                    "args": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lines",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getType",
                    "args": [
                        {
                            "name": "currentInput",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TextType",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentInput",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCode",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCSV",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCSVLikeTasks",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJSON",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJSONLikeTasks",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isList",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTaskLikeObject",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport enum TextType {\r\n  CSV = 'CSV',\r\n  CSV_LIKE_TASKS = 'CSV_TASKS',\r\n  JSON = 'JSON',\r\n  JSON_LIKE_TASKS = 'JSON_TASKS',\r\n  CODE = 'CODE',\r\n  LIST = 'LIST',\r\n  UNKNOWN = 'UNKNOWN',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TextTypeDetectorService {\r\n  getType(currentInput: string | null): TextType {\r\n    if (!currentInput) return TextType.UNKNOWN;\r\n\r\n    if (this.isJSON(currentInput)) {\r\n      return this.isJSONLikeTasks(currentInput)\r\n        ? TextType.JSON_LIKE_TASKS\r\n        : TextType.JSON;\r\n    }\r\n\r\n    if (this.isCSV(currentInput)) {\r\n      return this.isCSVLikeTasks(currentInput)\r\n        ? TextType.CSV_LIKE_TASKS\r\n        : TextType.CSV;\r\n    }\r\n\r\n    if (this.isCode(currentInput)) {\r\n      return TextType.CODE;\r\n    }\r\n\r\n    if (this.isList(currentInput)) {\r\n      return TextType.LIST;\r\n    }\r\n\r\n    return TextType.UNKNOWN;\r\n  }\r\n\r\n  private isCSV(text: string): boolean {\r\n    const lines = text.split('\\n');\r\n\r\n    if (lines.length < 2) return false;\r\n\r\n    const separator = this.getSeparator(lines);\r\n    const firstLineSeparators = this.countSeparators(lines[0], separator);\r\n    if (firstLineSeparators < 3) return false;\r\n\r\n    for (let i = 1; i < lines.length; i++) {\r\n      if (this.countSeparators(lines[i], separator) !== firstLineSeparators) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private isCSVLikeTasks(text: string): boolean {\r\n    const lines = text.split('\\n');\r\n    const separator = this.getSeparator(lines);\r\n\r\n    if (lines.length < 2) return false;\r\n\r\n    const headers = lines[0]\r\n      .split(separator)\r\n      .map((h) => h.trim().toLowerCase());\r\n    const requiredHeaders = ['taskid', 'name', 'status', 'priority']; // Example Task fields\r\n\r\n    return requiredHeaders.every((header) => headers.includes(header));\r\n  }\r\n\r\n  private isJSON(text: string): boolean {\r\n    try {\r\n      JSON.parse(text);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private isJSONLikeTasks(text: string): boolean {\r\n    try {\r\n      const json = JSON.parse(text);\r\n      if (Array.isArray(json)) {\r\n        return json.every((item) => this.isTaskLikeObject(item));\r\n      } else if (typeof json === 'object') {\r\n        return this.isTaskLikeObject(json);\r\n      }\r\n      return false;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private isCode(text: string): boolean {\r\n    // Allow optional \"export\" plus class or interface names\r\n    const classOrInterfaceRegex = /(?:export\\s+)?(?:class|interface)\\s+\\w+/;\r\n    // Allow optional access modifier plus method signature\r\n    const methodRegex =\r\n      /\\b(?:public|private|protected)?\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/;\r\n    return classOrInterfaceRegex.test(text) && methodRegex.test(text);\r\n  }\r\n\r\n  private isList(text: string): boolean {\r\n    const lines = text.split('\\n').map((line) => line.trim());\r\n    return lines.some((line) => line.length > 0) && lines.length > 1;\r\n  }\r\n\r\n  private isTaskLikeObject(obj: any): boolean {\r\n    const requiredFields = ['taskId', 'name', 'status', 'priority']; // Example Task fields\r\n    return requiredFields.every((field) => field in obj);\r\n  }\r\n\r\n  private countSeparators(line: string, separator: string): number {\r\n    let count = 0;\r\n    let insideQuote = false;\r\n\r\n    for (let i = 0; i < line.length; i++) {\r\n      const char = line[i];\r\n      if (char === '\"') insideQuote = !insideQuote;\r\n      if (!insideQuote && char === separator) count++;\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  private getSeparator(lines: string[]): string {\r\n    let separator = ',';\r\n\r\n    for (const line of lines) {\r\n      if (line) {\r\n        const commas = this.countSeparators(line, ',');\r\n        const tabs = this.countSeparators(line, '\\t');\r\n\r\n        if (tabs > commas) {\r\n          separator = '\\t';\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return separator;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TreeBuilderService",
            "id": "injectable-TreeBuilderService-e78dc77ecfb336dcde7f46e27379973451c54fbedc1f6e612be23505be050017abc73ff802e5f631bb7c8d0443d89191f053b974180eb379ce9ac7e6e1e59a16",
            "file": "src/app/features/admin/services/tree-builder.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildTree",
                    "args": [
                        {
                            "name": "parentNode",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "parentNode",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertTasksToNodes",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTree",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRootNode",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode | undefined",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskTreeNode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultRootNode",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskTreeNode",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TaskTreeNode, TaskTree } from '../../../models/taskTree';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TreeBuilderService {\r\n  constructor() {}\r\n\r\n  createTree(tasks: TaskoratorTask[]): TaskTree {\r\n    const taskNodes = this.convertTasksToNodes(tasks);\r\n    const root = this.findRootNode(taskNodes) || this.getDefaultRootNode();\r\n    this.buildTree(root, taskNodes);\r\n\r\n    const unconnectedTasks = taskNodes.filter((task) => !task.overlord);\r\n    unconnectedTasks.forEach((task) => {\r\n      task.overlord = '128'; // Set the overlord to '128'\r\n      root.children.push(task); // Connect the task to the root node\r\n    });\r\n\r\n    console.log('unconnectedTasks');\r\n    console.log(unconnectedTasks);\r\n    return {\r\n      primarch: root,\r\n      abyss: [],\r\n      connected: true,\r\n      totalTasks: 0,\r\n    };\r\n  }\r\n\r\n  private convertTasksToNodes(tasks: TaskoratorTask[]): TaskTreeNode[] {\r\n    return tasks.map((task) => {\r\n      const treeNode: TaskTreeNode = {\r\n        taskId: task.taskId,\r\n        name: task.name,\r\n        overlord: null,\r\n        children: [],\r\n        childrenCount: 0,\r\n        completedChildrenCount: 0,\r\n        connected: false,\r\n        stage: task.stage,\r\n      };\r\n\r\n      return treeNode;\r\n    });\r\n  }\r\n\r\n  private findRootNode(tasks: TaskTreeNode[]): TaskTreeNode | undefined {\r\n    return tasks.find((task) => task.overlord === null);\r\n  }\r\n\r\n  private buildTree(parentNode: TaskTreeNode, tasks: TaskTreeNode[]): void {\r\n    const children = tasks.filter(\r\n      (task) => task.overlord === parentNode.taskId\r\n    );\r\n    children.forEach((child) => {\r\n      parentNode.children.push(child);\r\n      this.buildTree(child, tasks);\r\n    });\r\n  }\r\n\r\n  private getDefaultRootNode(): TaskTreeNode {\r\n    const node: TaskTreeNode = {\r\n      taskId: '128',\r\n      name: 'Primarch Node',\r\n      overlord: null,\r\n      children: [],\r\n      childrenCount: 0,\r\n      completedChildrenCount: 0,\r\n      connected: true,\r\n      stage: 'todo',\r\n    };\r\n    return node;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TreeCacheService",
            "id": "injectable-TreeCacheService-5a1137d3e48087b567505dff2e8673b0651d26b82b4732f6f8d2c841877285d4cc8748b5242f0e7a66553c806bbb697da64fa346774473a622a61a7d33901c18",
            "file": "src/app/services/cache/tree-cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a task tree to the cache with a timestamp.\n",
                    "description": "<p>Add a task tree to the cache with a timestamp.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the cached task tree.\n",
                    "description": "<p>Clear the cached task tree.</p>\n"
                },
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskTree | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the task tree from the cache, removing it if expired.\n",
                    "description": "<p>Retrieve the task tree from the cache, removing it if expired.</p>\n"
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the task tree in the cache.\n",
                    "description": "<p>Update the task tree in the cache.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TASK_CONFIG } from '../../app.config';\r\nimport { TaskTree } from '../../models/taskTree';\r\nimport { TreeCacheStrategy } from '../../models/service-strategies/tree-strategy.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TreeCacheService implements TreeCacheStrategy {\r\n  private cache: { tree: TaskTree; timestamp: number } | null = null;\r\n\r\n  createTree(taskTree: TaskTree): void {\r\n    this.addTree(taskTree);\r\n  }\r\n\r\n  /**\r\n   * Add a task tree to the cache with a timestamp.\r\n   */\r\n  private addTree(tree: TaskTree): void {\r\n    const timestamp = Date.now();\r\n    this.cache = { tree, timestamp };\r\n  }\r\n\r\n  /**\r\n   * Retrieve the task tree from the cache, removing it if expired.\r\n   */\r\n  getTree(): TaskTree | null {\r\n    if (this.cache) {\r\n      const isExpired =\r\n        Date.now() - this.cache.timestamp > TASK_CONFIG.CACHE_EXPIRATION_MS;\r\n      if (isExpired) {\r\n        this.cache = null; // Clear expired cache\r\n        console.log('Tree cache expired');\r\n        return null;\r\n      }\r\n      return this.cache.tree;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Update the task tree in the cache.\r\n   */\r\n  updateTree(tree: TaskTree): void {\r\n    this.addTree(tree);\r\n  }\r\n\r\n  /**\r\n   * Clear the cached task tree.\r\n   */\r\n  clearCache(): void {\r\n    this.cache = null;\r\n    console.log('Tree cache cleared');\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TreeNodeService",
            "id": "injectable-TreeNodeService-034c94197aae9df22e01ad36ecff5b45443694b960a6cdb5e891424dcfe737af8935b61992fe3091ba135b504842d9306d0a83cd0862582f35b07d2e88b50419",
            "file": "src/app/services/tree/tree-node.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addTaskToParent",
                    "args": [
                        {
                            "name": "parentNode",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a node to a parent.\n",
                    "description": "<p>Add a node to a parent.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "parentNode",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewNode",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate a new TaskTreeNode.\n",
                    "description": "<p>Create a new TaskTreeNode.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOrUpdateTask",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "\"create\" | \"update\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnified method for creating or updating tasks.\n",
                    "description": "<p>Unified method for creating or updating tasks.</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "\"create\" | \"update\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTasks",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTasks",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParentNode",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode | null",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the parent node for a given task.\n",
                    "description": "<p>Determine the parent node for a given task.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTaskNode",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newOverlordId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMove a task node to a new parent.\n",
                    "description": "<p>Move a task node to a new parent.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newOverlordId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveToAbyss",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask | TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMove a task to the abyss.\n",
                    "description": "<p>Move a task to the abyss.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask | TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromAbyss",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove a task from the abyss.\n",
                    "description": "<p>Remove a task from the abyss.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTaskFromTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateExistingNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an existing TaskTreeNode.\n",
                    "description": "<p>Update an existing TaskTreeNode.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateNodeCounts",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "childNode",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate counts for a node's parent only.\n",
                    "description": "<p>Update counts for a node&#39;s parent only.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "childNode",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ROOT_TASK_ID, TaskoratorTask } from '../../models/taskModelManager';\nimport { TaskTree, TaskTreeNode } from '../../models/taskTree';\nimport { TaskTreeNodeToolsService } from './task-tree-node-tools.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TreeNodeService {\n  constructor(private treeTools: TaskTreeNodeToolsService) {}\n\n  async createTasks(\n    tree: TaskTree,\n    tasks: TaskoratorTask[]\n  ): Promise<string[]> {\n    console.log('creating spam ???');\n    const createdTasks: string[] = [];\n    const uniqueTasks = tasks.filter(\n      (task, index, self) =>\n        index === self.findIndex((t) => t.taskId === task.taskId)\n    );\n    for (const task of uniqueTasks) {\n      const wasModified = await this.createOrUpdateTask(tree, task, 'create');\n      if (wasModified) {\n        createdTasks.push(task.taskId);\n      }\n    }\n    return createdTasks;\n  }\n\n  async updateTasks(\n    tree: TaskTree,\n    tasks: TaskoratorTask[]\n  ): Promise<string[]> {\n    console.log('updating spam ???');\n\n    const updatedTasks: string[] = [];\n    for (const task of tasks) {\n      const wasModified = await this.createOrUpdateTask(tree, task, 'update');\n      if (wasModified) {\n        updatedTasks.push(task.taskId);\n      }\n    }\n    return updatedTasks;\n  }\n\n  /**\n   * Unified method for creating or updating tasks.\n   */\n  private async createOrUpdateTask(\n    tree: TaskTree,\n    task: TaskoratorTask,\n    action: 'create' | 'update'\n  ): Promise<boolean> {\n    const isUpdate = action === 'update';\n    const parentNode = this.getParentNode(tree, task);\n\n    if (parentNode) {\n      const targetNode = this.treeTools.findNodeById(parentNode, task.taskId);\n\n      if (targetNode) {\n        if (!isUpdate) {\n          console.warn(\n            `Task ${task.taskId} already exists. Skipping creation.`\n          );\n          return false; // No modification occurred\n        }\n\n        // Check for deletion first\n        if (task.stage === 'deleted') {\n          return this.removeTaskFromTree(tree, targetNode);\n        }\n\n        // Update the existing node\n        const oldStage = targetNode.stage; // Store old stage\n\n        const wasUpdated = this.updateExistingNode(targetNode, task);\n        // If stage changed, update parent counts\n        if (oldStage !== task.stage) {\n          this.updateNodeCounts(tree, targetNode);\n        }\n\n        // Handle potential movement\n        if (targetNode.overlord !== task.overlord) {\n          this.moveTaskNode(tree, targetNode, task.overlord);\n          console.log('moved');\n\n          this.removeFromAbyss(tree, task.taskId); // Remove from abyss if successfully added\n          return true; // Task was modified due to movement\n        }\n        return wasUpdated;\n      } else {\n        // Add a new node\n        const newNode = this.createNewNode(task);\n        tree.totalTasks++;\n        this.addTaskToParent(parentNode, newNode);\n        this.updateNodeCounts(tree, parentNode);\n        console.log('new');\n        this.removeFromAbyss(tree, task.taskId); // Remove from abyss if successfully added\n        return true; // Task was created\n      }\n    } else {\n      // Task has no valid parent, move to abyss\n      console.warn(`Parent node not found for task ${task.taskId}`);\n      this.moveToAbyss(tree, task);\n      return true; // Task was moved to abyss, so it was modified\n    }\n  }\n\n  /**\n   * Determine the parent node for a given task.\n   */\n  private getParentNode(\n    tree: TaskTree,\n    task: TaskoratorTask\n  ): TaskTreeNode | null {\n    return task.overlord\n      ? task.overlord === ROOT_TASK_ID\n        ? tree.primarch\n        : this.treeTools.findNodeById(tree.primarch, task.overlord)\n      : null;\n  }\n\n  /**\n   * Create a new TaskTreeNode.\n   */\n  private createNewNode(task: TaskoratorTask): TaskTreeNode {\n    return {\n      taskId: task.taskId,\n      name: task.name,\n      overlord: task.overlord,\n      children: [],\n      childrenCount: 0,\n      completedChildrenCount: 0,\n      stage: task.stage,\n      connected: false, // Connectivity depends on insertion\n    };\n  }\n\n  /**\n   * Update an existing TaskTreeNode.\n   */\n  private updateExistingNode(\n    node: TaskTreeNode,\n    task: TaskoratorTask\n  ): boolean {\n    let wasUpdated = false;\n\n    if (node.name !== task.name) {\n      node.name = task.name;\n      wasUpdated = true;\n    }\n\n    if (node.stage !== task.stage) {\n      node.stage = task.stage;\n      wasUpdated = true;\n    }\n\n    if (node.overlord !== task.overlord) {\n      wasUpdated = true; // Overlord change will be handled by moveTaskNode\n    }\n\n    return wasUpdated;\n  }\n\n  /**\n   * Add a node to a parent.\n   */\n  private addTaskToParent(parentNode: TaskTreeNode, node: TaskTreeNode): void {\n    if (!node || !node.taskId) {\n      console.error(\n        'Attempting to add an invalid node to parent:',\n        node,\n        parentNode\n      );\n      return;\n    }\n\n    if (!parentNode.children.some((child) => child.taskId === node.taskId)) {\n      parentNode.children.push(node);\n      parentNode.childrenCount++;\n      if (node.stage === 'completed') {\n        parentNode.completedChildrenCount++;\n      }\n      node.connected = true;\n      console.log('Added node to parent:', node, parentNode);\n    }\n  }\n\n  /**\n   * Move a task node to a new parent.\n   */\n  private moveTaskNode(\n    tree: TaskTree,\n    node: TaskTreeNode,\n    newOverlordId: string | null\n  ): void {\n    const oldParentNode = node.overlord\n      ? this.treeTools.findNodeById(tree.primarch, node.overlord)\n      : tree.primarch;\n    const newParentNode = newOverlordId\n      ? this.treeTools.findNodeById(tree.primarch, newOverlordId)\n      : tree.primarch;\n\n    if (oldParentNode && newParentNode) {\n      // Remove from old parent\n      oldParentNode.children = oldParentNode.children.filter(\n        (child) => child.taskId !== node.taskId\n      );\n      oldParentNode.childrenCount--;\n      if (node.stage === 'completed') {\n        oldParentNode.completedChildrenCount--;\n      }\n\n      // Add to new parent\n      this.addTaskToParent(newParentNode, node);\n\n      // Update node's parent reference\n      node.overlord = newOverlordId;\n\n      // Update counts for both parents\n      this.updateNodeCounts(tree, oldParentNode);\n      this.updateNodeCounts(tree, newParentNode);\n    } else {\n      console.warn(`Failed to move task ${node.taskId}`);\n      this.moveToAbyss(tree, node);\n    }\n  }\n\n  /**\n   * Move a task to the abyss.\n   */\n  private moveToAbyss(\n    tree: TaskTree,\n    task: TaskoratorTask | TaskTreeNode\n  ): void {\n    const newNode =\n      'children' in task ? task : this.createNewNode(task as TaskoratorTask);\n\n    // Check if the task already exists in the abyss\n    const isTaskInAbyss = tree.abyss.some(\n      (node) => node.taskId === newNode.taskId\n    );\n\n    if (!isTaskInAbyss) {\n      tree.abyss.push(newNode);\n      console.log(`Task ${newNode.taskId} added to abyss.`);\n    } else {\n      console.warn(`Task ${newNode.taskId} is already in the abyss. Skipping.`);\n    }\n\n    tree.connected = false; // Mark tree as disconnected\n  }\n\n  /**\n   * Remove a task from the abyss.\n   */\n  private removeFromAbyss(tree: TaskTree, taskId: string): void {\n    if (!tree || !tree.abyss) {\n      console.warn('Tree or abyss is not initialized.');\n      return;\n    }\n\n    const taskIndex = tree.abyss.findIndex((node) => node.taskId === taskId);\n    if (taskIndex === -1) {\n      console.log(`Task ${taskId} was not found in the abyss.`);\n      return;\n    }\n\n    tree.abyss.splice(taskIndex, 1);\n    console.log(`Task ${taskId} removed from abyss.`);\n    tree.connected = tree.abyss.length === 0; // Update connection status\n  }\n\n  // /**\n  //  * Update counts for a node and its ancestors.\n  //  */\n  // private updateNodeCounts(tree: TaskTree, node: TaskTreeNode): void {\n  //   const visitedNodes = new Set<string>();\n  //   let currentNode: TaskTreeNode | null = node;\n  //   while (currentNode && !visitedNodes.has(currentNode.taskId)) {\n  //     visitedNodes.add(currentNode.taskId);\n  //     currentNode.completedChildrenCount = currentNode.children.filter(\n  //       (child) => child.stage === 'completed'\n  //     ).length;\n  //     currentNode.childrenCount = currentNode.children.length;\n  //     currentNode = currentNode.overlord\n  //       ? this.treeTools.findNodeById(tree.primarch, currentNode.overlord)\n  //       : null;\n  //   }\n  // }\n\n  /**\n   * Update counts for a node's parent only.\n   */\n  private updateNodeCounts(tree: TaskTree, childNode: TaskTreeNode): void {\n    if (!childNode.overlord) return;\n\n    const parent = this.treeTools.findNodeById(\n      tree.primarch,\n      childNode.overlord\n    );\n    if (!parent) return;\n\n    parent.completedChildrenCount = parent.children.filter(\n      (child) => child.stage === 'completed'\n    ).length;\n    parent.childrenCount = parent.children.length;\n  }\n\n  async deleteTasks(tree: TaskTree, taskIds: string[]): Promise<string[]> {\n    const deletedTasks: string[] = [];\n\n    for (const taskId of taskIds) {\n      const node = this.treeTools.findNodeById(tree.primarch, taskId);\n      if (!node) continue;\n\n      // Orphan the children - they'll go to abyss via your repair mechanism\n      for (const child of node.children) {\n        child.overlord = null; // or some invalid parent ID\n      }\n\n      // Remove from parent if it has one\n      if (node.overlord) {\n        const parent = this.treeTools.findNodeById(\n          tree.primarch,\n          node.overlord\n        );\n        if (parent) {\n          parent.children = parent.children.filter((c) => c.taskId !== taskId);\n          this.updateNodeCounts(tree, parent);\n        }\n      }\n\n      tree.totalTasks--;\n      deletedTasks.push(taskId);\n    }\n\n    return deletedTasks;\n  }\n\n  private removeTaskFromTree(tree: TaskTree, node: TaskTreeNode): boolean {\n    // Orphan children - repair mechanism will handle them\n    node.children.forEach((child) => (child.overlord = null));\n\n    // Remove from parent\n    if (node.overlord) {\n      const parent = this.treeTools.findNodeById(tree.primarch, node.overlord);\n      if (parent) {\n        parent.children = parent.children.filter(\n          (c) => c.taskId !== node.taskId\n        );\n        this.updateNodeCounts(tree, parent);\n      }\n    }\n\n    tree.totalTasks--;\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeTools",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "treeTools",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TreeService",
            "id": "injectable-TreeService-2a32a69f532bc20dec66197f25133f71488c5dae0f893f8aa54424112133dd485bf468bb01fe885bd15573a72437bcbe42fb85c74d62600106d0d0ae6568ba32",
            "file": "src/app/services/sync-api-cache/tree.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiStrategy | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "treeSubject",
                    "defaultValue": "new BehaviorSubject<TaskTree | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TaskTree | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskTree | null>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTree",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "findPathStringToTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFlattenedTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestTree",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskTree | null",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskTreeData",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskNodeInfo | null",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiStrategy",
                            "type": "ApiStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTree",
                    "args": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskTree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TreeStrategy } from '../../models/service-strategies/tree-strategy.interface';\r\nimport { TreeNodeService } from '../tree/tree-node.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { getDefaultTree, TaskTree, TaskNodeInfo } from '../../models/taskTree';\r\nimport { ApiStrategy } from '../../models/service-strategies/api-strategy.interface';\r\nimport { CacheOrchestratorService } from '../core/cache-orchestrator.service';\r\nimport { ROOT_TASK_ID } from '../../models/taskModelManager';\r\nimport { TaskTreeNodeToolsService } from '../tree/task-tree-node-tools.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TreeService implements TreeStrategy {\r\n  private treeSubject: BehaviorSubject<TaskTree | null> =\r\n    new BehaviorSubject<TaskTree | null>(null);\r\n  private apiService: ApiStrategy | null = null;\r\n\r\n  constructor(\r\n    private cacheService: CacheOrchestratorService,\r\n    private treeNodeToolsService: TaskTreeNodeToolsService\r\n  ) {}\r\n\r\n  getFlattenedTree(tree: TaskTree) {\r\n    console.log('Getting flattened tree');\r\n    console.log(tree);\r\n    return this.treeNodeToolsService.getFlattened(tree);\r\n  }\r\n\r\n  // Create a tree and save it to both cache and API\r\n  async createTree(taskTree: TaskTree): Promise<TaskTree | null> {\r\n    try {\r\n      if (!this.apiService) return null;\r\n      const createdTree = await this.apiService.createTree(taskTree);\r\n      this.cacheService.createTree(taskTree); // Update cache\r\n      this.treeSubject.next(createdTree);\r\n      return createdTree;\r\n    } catch (error) {\r\n      console.error('Error creating tree:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getTaskTreeData(id: string): TaskNodeInfo | null {\r\n    const tree = this.getLatestTree();\r\n    if (!tree) return null;\r\n    return this.treeNodeToolsService.getTaskInfo(tree, id);\r\n    // TODO: use index ???\r\n  }\r\n\r\n  initialize(apiStrategy: ApiStrategy): void {\r\n    console.log('TreeService initialized with API strategy');\r\n\r\n    this.apiService = apiStrategy;\r\n    this.fetchTree().then();\r\n    // TODO: create index???\r\n  }\r\n\r\n  async fetchTree(): Promise<void> {\r\n    try {\r\n      let tree = await this.cacheService.getTree();\r\n      if (!tree && this.apiService) {\r\n        tree = await this.apiService.getTree();\r\n        // we can fix tree here worst case scenario...\r\n        if (tree) {\r\n          this.cacheService.createTree(tree);\r\n        }\r\n      }\r\n      this.treeSubject.next(tree || null);\r\n    } catch (error) {\r\n      console.error('Error fetching tree:', error);\r\n      this.treeSubject.next(null);\r\n    }\r\n  }\r\n\r\n  findPathStringToTask(taskId: string): string {\r\n    const tree = this.getLatestTree();\r\n    if (!tree) return '';\r\n    return this.treeNodeToolsService.findPathStringToTask(taskId, tree);\r\n  }\r\n\r\n  async updateTree(taskTree: TaskTree): Promise<void> {\r\n    if (!this.apiService) {\r\n      throw new Error('API service not initialized.');\r\n    }\r\n\r\n    try {\r\n      await this.apiService.updateTree(taskTree);\r\n      this.cacheService.updateTree(taskTree);\r\n      this.treeSubject.next(taskTree);\r\n    } catch (error) {\r\n      console.error('Error updating tree:', error);\r\n    }\r\n  }\r\n\r\n  getTree() {\r\n    return this.treeSubject.asObservable();\r\n  }\r\n\r\n  getLatestTree(): TaskTree | null {\r\n    return this.treeSubject.getValue();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserApiService",
            "id": "injectable-UserApiService-7ea4dca0effed0c58bfb2abd09fe9e2b5d0fb0c796d921f801004b464e6a09a920b570f03af3ac17b65c4de173a87563b821b9235f004da441cd87b5bbd4abf1",
            "file": "src/app/services/api/user-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TaskUserInfo | undefined>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getUserInfoLocation",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserInfo",
                    "args": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userInfo",
                            "type": "TaskUserInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { setDoc, doc, Firestore, getDoc } from '@angular/fire/firestore';\r\nimport { TaskUserInfo } from '../../models/service-strategies/user';\r\nimport { AuthService } from '../core/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserApiService {\r\n  constructor(private firestore: Firestore, private authService: AuthService) {}\r\n\r\n  private getUserId(): string {\r\n    const userId = this.authService.getCurrentUserId();\r\n    if (!userId) {\r\n      throw new Error('User not logged in');\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  async getUserInfo(): Promise<TaskUserInfo | undefined> {\r\n    const userId = this.getUserId();\r\n\r\n    const docRef = doc(this.firestore, this.getUserInfoLocation(userId));\r\n    try {\r\n      const snapshot = await getDoc(docRef);\r\n      if (snapshot.exists()) {\r\n        return { ...snapshot.data() } as TaskUserInfo;\r\n      } else {\r\n        throw new Error('User info not found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get user info:', error);\r\n      throw new Error('Failed to retrieve user information');\r\n    }\r\n  }\r\n\r\n  async updateUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    const userId = this.getUserId();\r\n    const docRef = doc(this.firestore, this.getUserInfoLocation(userId));\r\n    try {\r\n      await setDoc(docRef, userInfo, { merge: true }); // Merge updates only the specified fields\r\n      console.log('User info successfully updated');\r\n    } catch (error) {\r\n      console.error('Failed to update user info:', error);\r\n      throw new Error('Failed to update user information');\r\n    }\r\n  }\r\n\r\n  async createUserInfo(userInfo: TaskUserInfo): Promise<void> {\r\n    const userId = this.getUserId();\r\n    const docRef = doc(this.firestore, this.getUserInfoLocation(userId));\r\n    try {\r\n      await setDoc(docRef, userInfo); // Overwrites if the document exists\r\n      console.log('User info successfully created');\r\n    } catch (error) {\r\n      console.error('Failed to create user info:', error);\r\n      throw new Error('Failed to create user information');\r\n    }\r\n  }\r\n\r\n  private getUserInfoLocation(userId: string): string {\r\n    return `users/${userId}/userInfos/${userId}`;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-e1a8f0f0ddcb36f1524fdae136a4784c61f2206c9e5fc0ca2d4a849a66c7c020657e2346a0e36ae49dcb4042009042b0b2eba51940e47e686e2086f3e0179f77",
            "file": "src/app/features/admin/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "joke",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "message",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTemplate",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "templateId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "tree",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "treeJson",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "addDocTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cleanTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "convertTaskTimestamps",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copyTemplateTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 337,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "createTaskTemplate",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTemplate",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask[]",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fixMissingTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gptTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loadTemplateWithId",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "migrateDatesFix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "migrateTaskDates",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "migrateTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "normalizeTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 389,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sqliteTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This component/service is deprecated and will be removed in future releases.",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { TaskTemplate } from '../models/template';\r\nimport { AdminService } from '../services/admin.service';\r\nimport { NgFor, NgIf } from '@angular/common';\r\nimport { TreeNodeService } from '../../../services/tree/tree-node.service';\r\nimport {\r\n  getDefaultTask,\r\n  TaskoratorTask,\r\n} from '../../../models/taskModelManager';\r\nimport { TaskTree } from '../../../models/taskTree';\r\nimport { LocalSqliteService } from '../services/local-sqlite.service';\r\nimport { TreeBuilderService } from '../services/tree-builder.service';\r\nimport { take } from 'rxjs';\r\nimport { RegistrationService } from '../../../services/core/registration.service';\r\nimport { TaskUserInfo } from '../../../models/service-strategies/user';\r\nimport { GptRequestService } from '../../gpt/services/gpt-request.service';\r\nimport {\r\n  Firestore,\r\n  collection,\r\n  setDoc,\r\n  getDocs,\r\n  Timestamp,\r\n  CollectionReference,\r\n} from '@angular/fire/firestore';\r\nimport { testTemplate } from '../../../test-files/other-files/testTemplate';\r\nimport { TreeViewComponent } from '../../core/vortex/tree-view/tree-view.component';\r\nimport { TaskService } from '../../../services/sync-api-cache/task.service';\r\nimport { ApiFirebaseService } from '../../../services/core/api-firebase.service';\r\nimport { GeneralApiService } from '../../../services/api/general-api.service';\r\nimport { TaskBatchService } from '../../../services/sync-api-cache/task-batch.service';\r\nimport { TaskActions } from '../../../services/tasks/task-action-tracker.service';\r\nimport { TaskListService } from '../../../services/sync-api-cache/task-list.service';\r\nimport { TreeService } from '../../../services/sync-api-cache/tree.service';\r\n/**\r\n * @deprecated This component/service is deprecated and will be removed in future releases.\r\n */\r\n@Component({\r\n  selector: 'app-admin',\r\n  standalone: true,\r\n  imports: [NgIf, NgFor],\r\n  templateUrl: './admin.component.html',\r\n  styleUrl: './admin.component.scss',\r\n})\r\nexport class AdminComponent {\r\n  message: string | null = null;\r\n  template?: TaskTemplate;\r\n  loading: boolean = false;\r\n  error?: string;\r\n\r\n  templateId: string = '';\r\n  treeJson = '';\r\n  tree: TaskTree | null = null;\r\n  joke: string | null = null;\r\n\r\n  constructor(\r\n    private templateService: AdminService,\r\n    private taskService: TaskService,\r\n    private taskListService: TaskListService,\r\n    private taskBatchService: TaskBatchService,\r\n    private treeService: TreeService,\r\n    private treeNodeService: TreeNodeService,\r\n    private localSqlite: LocalSqliteService,\r\n    private treeBuilderService: TreeBuilderService,\r\n    private registrationService: RegistrationService,\r\n    private apiService: ApiFirebaseService,\r\n    private apiBaseService: GeneralApiService,\r\n    private gptService: GptRequestService,\r\n    private firestore: Firestore\r\n  ) {}\r\n\r\n  gptTest() {\r\n    const request = 'make joke about very big cat';\r\n    this.gptService.makeGptRequest(request).then((result) => {\r\n      this.joke = JSON.stringify(result, null, 2);\r\n    });\r\n  }\r\n  registerTest() {\r\n    this.registrationService.registerUser();\r\n  }\r\n\r\n  getUserTest() {\r\n    const userId = 'qqpewpew';\r\n    // this.registrationService.registerUserById(userId);\r\n    this.apiBaseService.getDocument(userId, 'userInfos').then((result: any) => {\r\n      console.log(result);\r\n    });\r\n  }\r\n\r\n  addDocTest() {\r\n    const userId = '';\r\n    const obj: TaskUserInfo = {\r\n      allowedTemplates: [],\r\n      canCreate: true,\r\n      canUseGpt: true,\r\n      role: 'admin',\r\n      registered: true,\r\n    };\r\n    this.apiBaseService.createDocument(userId, 'userInfos', obj);\r\n  }\r\n\r\n  async migrateTasks() {\r\n    try {\r\n      const tasks = await this.templateService.fetchAllTasks();\r\n      const newTemplate: TaskTemplate = {\r\n        id: '', // Will be set by Firestore\r\n        name: 'Ubaby Tasks',\r\n        authorId: 'adminId',\r\n        authorName: 'Ubaby',\r\n        isPublic: false,\r\n        tasks: tasks,\r\n      };\r\n\r\n      await this.templateService.createTemplateWithTasks(newTemplate);\r\n      this.message = 'Template and tasks migrated successfully';\r\n    } catch (error) {\r\n      this.message = 'Failed to migrate tasks';\r\n      console.error('Failed to migrate tasks:', error);\r\n    }\r\n  }\r\n\r\n  parseDate(date: any): number | null {\r\n    if (date === null) {\r\n      return null;\r\n    } else if (date instanceof Timestamp) {\r\n      return date.toMillis(); // Firestore Timestamp\r\n    } else if (typeof date === 'number') {\r\n      return date; // Already in milliseconds\r\n    } else if (typeof date === 'string') {\r\n      if (!isNaN(Date.parse(date))) {\r\n        return new Date(date).getTime(); // ISO 8601 or human-readable string\r\n      } else if (!isNaN(Number(date))) {\r\n        return Number(date); // String milliseconds\r\n      } else {\r\n        // Attempt to parse human-readable format, adjust format if needed\r\n        return Date.parse(date.replace(' at', ''));\r\n      }\r\n    } else if (date instanceof Date) {\r\n      return date.getTime(); // JavaScript Date object\r\n    } else {\r\n      throw new Error(`Unsupported date format: ${date}`);\r\n    }\r\n  }\r\n\r\n  async migrateTaskDates(userId: string): Promise<void> {\r\n    const tasksCollection = collection(\r\n      this.firestore,\r\n      `users/${userId}/tasks`\r\n    ) as CollectionReference;\r\n    const querySnapshot = await getDocs(tasksCollection);\r\n\r\n    querySnapshot.forEach(async (doc) => {\r\n      const data = doc.data();\r\n      const updatedData = {\r\n        ...data,\r\n        timeCreated: this.parseDate(data['timeCreated']),\r\n        lastUpdated: this.parseDate(data['lastUpdated']),\r\n        timeEnd: this.parseDate(data['timeEnd']),\r\n      };\r\n\r\n      await setDoc(doc.ref, updatedData);\r\n    });\r\n  }\r\n\r\n  migrateDatesFix(): void {\r\n    // const id = this.authService.getCurrentUserId();\r\n    // if (!id) throw new Error('no user');\r\n    // this.migrateTaskDates(id)\r\n    //   .then(() => {\r\n    //     console.log('Migration completed successfully.');\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.error('Error migrating dates:', error);\r\n    //   });\r\n  }\r\n\r\n  sqliteTest() {\r\n    this.localSqlite.getTaskData().subscribe((tasks: TaskoratorTask[]) => {\r\n      if (!tasks) {\r\n        console.log('could not get tasks');\r\n        return;\r\n      }\r\n\r\n      const filteredTasks = this.filterTasks(tasks);\r\n\r\n      // Create tree from the fetched tasks\r\n      const tree = this.treeBuilderService.createTree(filteredTasks);\r\n      // this.tree = tree;\r\n\r\n      // Subscribe to getTree() only once\r\n      this.treeService\r\n        .getTree()\r\n        .pipe(take(1))\r\n        .subscribe((oldTree: TaskTree | null) => {\r\n          if (!oldTree) return;\r\n\r\n          // Add the root tasks of the new tree to the old tree's root\r\n          // oldTree.root.children.push(...tree.root.children);\r\n          this.tree = oldTree;\r\n          // Update the tree with the new tasks\r\n          this.treeService.updateTree(oldTree).then();\r\n          const noRootTasks = filteredTasks.filter((t) => t.taskId !== '128');\r\n          this.taskBatchService.createTaskBatch(noRootTasks, '128').then();\r\n          this.taskListService\r\n            .getOverlordTasks('128')\r\n            .then((result: TaskoratorTask[] | null) => {\r\n              console.log('WHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT');\r\n              console.log(result);\r\n            });\r\n        });\r\n\r\n      // Create tasks for filtered tasks without a root\r\n    });\r\n  }\r\n\r\n  fixMissingTasks() {\r\n    this.taskListService\r\n      .getOverlordTasks('0')\r\n      .then((tasks: TaskoratorTask[] | null) => {\r\n        this.taskService\r\n          .getTaskById('vuLn7N0EOlUcYkz0ObX6')\r\n          .then((task: TaskoratorTask | null) => {\r\n            if (!tasks) return;\r\n            if (!task) return;\r\n            console.log(\r\n              'task found ++++++++++++++++++++++++++++++++++++++++++++++++++++++'\r\n            );\r\n\r\n            tasks.forEach((t: TaskoratorTask) => {\r\n              t.overlord = task.taskId;\r\n            });\r\n            this.taskBatchService.updateTaskBatch(tasks, TaskActions.MOVED);\r\n            console.log(\r\n              'TASKS FIXED AND UPDATED.................................................'\r\n            );\r\n          });\r\n      });\r\n  }\r\n\r\n  private cleanTasks() {}\r\n\r\n  private filterTasks(tasks: TaskoratorTask[]): TaskoratorTask[] {\r\n    // remap parents\r\n\r\n    // Find task with taskId === '128' and change it to '0'\r\n    tasks.forEach((task) => {\r\n      if (task.taskId === '128') {\r\n        task.taskId = '0';\r\n      }\r\n    });\r\n\r\n    // Find task with taskId === '129' and change it to '128'\r\n    tasks.forEach((task) => {\r\n      if (task.taskId === '129') {\r\n        task.taskId = '128';\r\n      }\r\n    });\r\n\r\n    // remap children\r\n    // Find all tasks with task.overlord = '128' and set task.overlord = '129'\r\n    tasks.forEach((task) => {\r\n      if (task.overlord === '128') {\r\n        task.overlord = '0';\r\n      }\r\n    });\r\n\r\n    // Find all tasks with task.overlord = '129' and change them to '128'\r\n    tasks.forEach((task) => {\r\n      if (task.overlord === '129') {\r\n        task.overlord = '128';\r\n      }\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  async loadTemplate() {\r\n    await this.loadTemplateWithId('Rap2DS0nPnXkrNDxRwB7');\r\n  }\r\n\r\n  async loadTemplateWithId(templateId: string) {\r\n    this.loading = true;\r\n    try {\r\n      // Convert all timestamps in tasks\r\n      const fetchedTemplate = this.createTaskTemplate(testTemplate);\r\n\r\n      // const fetchedTemplate = await this.templateService.getTemplate(\r\n      //   templateId\r\n      // );\r\n      if (fetchedTemplate) {\r\n        this.template = fetchedTemplate;\r\n        this.error = undefined;\r\n        console.log(fetchedTemplate);\r\n      } else {\r\n        this.error = 'Template not found.';\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to fetch template:', err);\r\n      this.error = 'Failed to load template.';\r\n    } finally {\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  convertTaskTimestamps(tasks: any[]): void {\r\n    tasks.forEach((task) => {\r\n      if (task.timeCreated && 'seconds' in task.timeCreated) {\r\n        task.timeCreated = new Date(task.timeCreated.seconds * 1000);\r\n      }\r\n      if (task.timeEnd && 'seconds' in task.timeEnd) {\r\n        task.timeEnd = new Date(task.timeEnd.seconds * 1000);\r\n      }\r\n      if (task.lastUpdated && 'seconds' in task.lastUpdated) {\r\n        task.lastUpdated = new Date(task.lastUpdated.seconds * 1000);\r\n      }\r\n      // Add other date fields here as necessary\r\n    });\r\n  }\r\n\r\n  normalizeTask(task: any): TaskoratorTask {\r\n    return {\r\n      timeCreated: new Date(task.timeCreated.seconds * 1000),\r\n      timeEnd: task.timeEnd ? new Date(task.timeEnd.seconds * 1000) : null,\r\n      lastUpdated: task.lastUpdated\r\n        ? new Date(task.lastUpdated.seconds * 1000)\r\n        : null,\r\n      ...task,\r\n    };\r\n  }\r\n\r\n  createTaskTemplate(data: any): TaskTemplate {\r\n    return {\r\n      tasks: data.tasks.map((task: any) => this.normalizeTask(task)),\r\n      ...data,\r\n    };\r\n  }\r\n\r\n  async copyTemplateTasks() {\r\n    const template = await this.templateService.getTemplate(this.templateId);\r\n    if (template) {\r\n      const tasks = template.tasks.filter((task) => task.taskId !== '128');\r\n      await this.taskBatchService.createTaskBatch(tasks, '128');\r\n      this.message = 'Tasks copied successfully, except the root task.';\r\n    } else {\r\n      this.message = 'Template not found.';\r\n    }\r\n  }\r\n\r\n  getTree() {\r\n    this.treeService.getTree().subscribe((tree) => {\r\n      console.log(tree);\r\n      if (tree) {\r\n        console.log('Original Tree:', tree);\r\n        this.tree = tree;\r\n        if (tree) {\r\n          const fetchedTemplate = this.createTaskTemplate(testTemplate);\r\n          const testTasks = fetchedTemplate.tasks;\r\n          // fix my old tasks...\r\n          // root task Qn0lhaaruGjhk4W8UdnM doesnt exist anywhere\r\n          // task.overlord===Qn0lhaaruGjhk4W8UdnM will get overlord 128\r\n          // const defaultTask=getDefaultTask();\r\n          // defaultTask.taskId=128\r\n          // testTasks.push(defaultTask)\r\n\r\n          // Reassign overlord for tasks with the missing overlord ID\r\n          testTasks.forEach((task) => {\r\n            if (task.overlord === 'Qn0lhaaruGjhk4W8UdnM') {\r\n              task.overlord = '128'; // Reassign to the default root node\r\n            }\r\n          });\r\n          const defaultTask = getDefaultTask();\r\n          defaultTask.taskId = '128';\r\n          testTasks.push(defaultTask);\r\n\r\n          this.treeNodeService\r\n            .createTasks(tree, testTasks)\r\n            .then(() => {\r\n              console.log('Updated Tree:', tree);\r\n              // Optionally render the tree if you have a UI component to visualize it\r\n              this.renderTree(tree);\r\n            })\r\n            .catch((error) => {\r\n              console.error('Error adding tasks to the tree:', error);\r\n            });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  renderTree(tree: TaskTree) {\r\n    this.treeJson = JSON.stringify(tree, null, 2);\r\n    this.tree = tree;\r\n  }\r\n}\r\n",
            "styleUrl": "./admin.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateService",
                        "type": "AdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localSqlite",
                        "type": "LocalSqliteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeBuilderService",
                        "type": "TreeBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registrationService",
                        "type": "RegistrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiFirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiBaseService",
                        "type": "GeneralApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gptService",
                        "type": "GptRequestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "templateService",
                        "type": "AdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localSqlite",
                        "type": "LocalSqliteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeBuilderService",
                        "type": "TreeBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registrationService",
                        "type": "RegistrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiFirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiBaseService",
                        "type": "GeneralApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gptService",
                        "type": "GptRequestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p>admin works!</p>\r\nMessage:\r\n<p *ngIf=\"message\">message: {{ message }}</p>\r\nLoading:\r\n<p *ngIf=\"loading\">loading: {{ loading }}</p>\r\nError:\r\n<p *ngIf=\"error\">error: {{ error }}</p>\r\n<p *ngIf=\"joke\">Joke: {{ joke }}</p>\r\n<pre *ngIf=\"joke\">{{ joke }}</pre>\r\n\r\n<div *ngIf=\"template\">\r\n  <h2>{{ template.name }}</h2>\r\n  <p>Author: {{ template.authorName }}</p>\r\n  <p>Price: {{ template.price ? template.price : \"Free\" }}</p>\r\n  <ul>\r\n    <li *ngFor=\"let task of template.tasks\">\r\n      {{ task.name }}: {{ task.timeCreated }}\r\n    </li>\r\n  </ul>\r\n</div>\r\n<!-- <button (click)=\"loadTemplate()\">Load Template</button>\r\n<button (click)=\"getTree()\">Load Tree</button> -->\r\n<!-- <button (click)=\"sqliteTest()\">Load sql</button> -->\r\n<!-- <button (click)=\"fixMissingTasks()\">fix missing sql</button> -->\r\n<!-- <button (click)=\"registerTest()\">register Test</button>\r\n<button (click)=\"addDocTest()\">add doc test</button>\r\n<button (click)=\"getUserTest()\">get doc test</button> -->\r\n\r\n<!-- <button (click)=\"gptTest()\">get GTP test</button> -->\r\n<button (click)=\"migrateDatesFix()\">migrate fix</button>\r\n\r\n<!-- YourComponent.html -->\r\n<div>\r\n  <h1>Tree Structure</h1>\r\n  <pre>{{ treeJson }}</pre>\r\n</div>\r\n\r\n<!-- <app-tree-view [treeInput]=\"tree\"></app-tree-view> -->\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d7ba59e92c64f7ba7db892c82e82550baec6059f42e6cc2a082a874701fc5675af1b17eafeb4aafbaf878b6ec3c0e9ecfc612c70e7e6c58ecc10bae26db4f63d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HorizontalNavigationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SessionManagerService } from './services/session-manager.service';\r\nimport { NAVIGATION_CONFIG } from './app.config';\r\nimport { HorizontalNavigationComponent } from './components/horizontal-navigation/horizontal-navigation.component';\r\nimport { NavigationService } from './services/navigation.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [HorizontalNavigationComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(\r\n    private sessionManager: SessionManagerService,\r\n    private router: Router,\r\n    private navigationService: NavigationService\r\n  ) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    // Initialize the session (online or offline)\r\n    await this.sessionManager.initialize('online');\r\n\r\n    // Redirect based on login state\r\n    const isLoggedIn = this.sessionManager.isLoggedIn();\r\n    if (isLoggedIn) {\r\n      const previousRoute = await this.navigationService.getRedirectUrl();\r\n      // i mean... if logged in, why redirect, just allow go wherever they want ???\r\n      // TODO: previous route always null, fix this\r\n      // if (!previousRoute) {\r\n      //   this.router.navigate([NAVIGATION_CONFIG.ON_LOGIN_ROUTE_URL]); // Replace with your default route\r\n      // }\r\n      // console.warn('Redirecting to previous route:', previousRoute);\r\n      // this.router.navigate([previousRoute]);\r\n    } else {\r\n      this.router.navigate(['/login']); // Redirect to login if not authenticated\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionManager",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "sessionManager",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-horizontal-navigation></app-horizontal-navigation>\r\n"
        },
        {
            "name": "ArtificerActionComponent",
            "id": "component-ArtificerActionComponent-20a7bd59216eccf297472d637ea19065eef02eaf5a0cb2d7ed4a0bf607204faf911fee7e08d0d815221a7b96464f3c546f62d86d0bda610a82d9b4d2e3b3d86b",
            "file": "src/app/components/task/artificer-action/artificer-action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-artificer-action",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./artificer-action.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "protectTaskFromDelete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TaskoratorTask | undefined",
                    "decorators": []
                },
                {
                    "name": "treeNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TaskNodeInfo | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtificerDetails",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "editTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButtonStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "{ visibility: string; pointerEvents: string; } | { visibility?: undefined; pointerEvents?: undefined; }",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "\"complete-icon-color-checklist\" | \"complete-icon-color-parent\" | \"complete-icon-color-child\"",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasIncompleteChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActionRestricted",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mass",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveToParent",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { TaskUpdateService } from '../../../services/tasks/task-update.service';\r\nimport { ArtificerDetails } from '../../artificer/artificer.interface';\r\nimport { ArtificerService } from '../../artificer/artificer.service';\r\nimport { NgClass, NgStyle } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { TaskNodeInfo } from '../../../models/taskTree';\r\nimport { SelectedMultipleService } from '../../../services/tasks/selected-multiple.service';\r\nimport { GptSuggestService } from '../../../features/gpt/services/gpt-suggest.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TaskEditPopupComponent } from '../task-edit-popup/task-edit-popup.component';\r\nimport { TaskActions } from '../../../services/tasks/task-action-tracker.service';\r\nimport { MassAddPopupComponent } from '../../mass-add-popup/mass-add-popup.component';\r\nimport { TaskService } from '../../../services/sync-api-cache/task.service';\r\n\r\n@Component({\r\n  selector: 'app-artificer-action',\r\n  standalone: true,\r\n  imports: [NgClass, MatIcon, NgStyle],\r\n  templateUrl: './artificer-action.component.html',\r\n  styleUrl: './artificer-action.component.scss',\r\n})\r\nexport class ArtificerActionComponent {\r\n  @Input() task: TaskoratorTask | undefined;\r\n  currentAction!: ArtificerDetails;\r\n  @Input() treeNode: TaskNodeInfo | null = null;\r\n  @Input() protectTaskFromDelete: boolean = true;\r\n\r\n  constructor(\r\n    private taskUpdateService: TaskUpdateService,\r\n    private artificerService: ArtificerService,\r\n    private selectedService: SelectedMultipleService,\r\n    private taskService: TaskService,\r\n    private gptHelper: GptSuggestService,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.artificerService.currentAction$.subscribe((action) => {\r\n      this.currentAction = action;\r\n    });\r\n  }\r\n\r\n  getColor() {\r\n    if (!this.treeNode) return;\r\n    // it is checklist and reappear whenever it repeats... daily, weekly\r\n    const isRepeatingTask =\r\n      this.task?.repeat !== 'never' && this.task?.repeat !== 'once';\r\n    if (isRepeatingTask) return 'complete-icon-color-checklist';\r\n\r\n    // show color based on what kind of task it is\r\n    if (this.treeNode.childrenCount > 0) {\r\n      // task has children\r\n      if (this.treeNode.completedChildrenCount < this.treeNode.childrenCount) {\r\n        // task has incomplete children\r\n        return 'complete-icon-color-parent';\r\n      }\r\n    } else {\r\n      // task has no children\r\n      return 'complete-icon-color-child';\r\n    }\r\n\r\n    return 'complete-icon-color-child';\r\n  }\r\n\r\n  hasIncompleteChildren() {\r\n    // fixed gives wrong answer for some reason\r\n    // all tasks completed... maybe it includes itself?\r\n    // tasks were not being sent to task tree because they were received as just taskId through eventbus\r\n    if (!this.treeNode) return false;\r\n    if (this.treeNode.childrenCount < 1) return false;\r\n    if (this.treeNode.completedChildrenCount < this.treeNode.childrenCount)\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  getButtonStyle() {\r\n    const action = this.currentAction.action;\r\n    return this.isActionRestricted(action)\r\n      ? { visibility: 'hidden', pointerEvents: 'none' }\r\n      : {};\r\n  }\r\n\r\n  isActionRestricted(action: string): boolean {\r\n    // we allow move, because we not moving it (which is not allowed), we moving tasks into it\r\n    if (!this.protectTaskFromDelete) return false;\r\n    return (\r\n      this.hasIncompleteChildren() && ['delete', 'complete'].includes(action)\r\n    );\r\n  }\r\n\r\n  performAction(): void {\r\n    const task = this.task;\r\n    if (!task) return;\r\n    const action = this.currentAction.action;\r\n\r\n    switch (action) {\r\n      case 'moveToParent':\r\n        this.moveToParent(task);\r\n        break;\r\n      case 'promote':\r\n        this.taskUpdateService.increasePriority(task);\r\n        break;\r\n      case 'demote':\r\n        this.taskUpdateService.decreasePriority(task);\r\n        break;\r\n      case 'edit':\r\n        this.editTask(task);\r\n        break;\r\n      case 'mass':\r\n        this.mass(task);\r\n        break;\r\n      case 'select':\r\n        this.selectedService.addRemoveSelectedTask(task);\r\n        break;\r\n      case 'suggest':\r\n        this.gptHelper.suggestTasksForTask(task);\r\n        break;\r\n\r\n      case 'delete':\r\n        this.taskUpdateService.delete(task);\r\n        break;\r\n      case 'complete':\r\n        this.taskUpdateService.complete(task);\r\n        break;\r\n      case 'move':\r\n        this.taskUpdateService.move(task);\r\n        break;\r\n      case 'refresh':\r\n        this.taskUpdateService.renew(task);\r\n        break;\r\n\r\n      // Add more cases as needed...\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  async moveToParent(task: TaskoratorTask): Promise<void> {\r\n    if (!task.overlord) {\r\n      console.warn('Task has no parent, cannot move to parent level.');\r\n      return;\r\n    }\r\n\r\n    const parentTask = await this.taskService.getSuperOverlord(task.overlord);\r\n    if (!parentTask) {\r\n      console.warn('Parent task not found, cannot move to parent level.');\r\n      return;\r\n    }\r\n\r\n    task.overlord = parentTask.overlord;\r\n    await this.taskUpdateService.update(task, TaskActions.MOVED);\r\n  }\r\n\r\n  mass(task: TaskoratorTask) {\r\n    const dialogRef = this.dialog.open(MassAddPopupComponent, {\r\n      width: '600px',\r\n      data: task,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        // Update the task in your list or database\r\n        // if (result) {\r\n        //   console.log('Task updated on server:', result);\r\n        //   const taskAction: TaskActions = TaskActions.UPDATED;\r\n        //   this.taskUpdateService.update(result, taskAction);\r\n        // }\r\n        console.log('mass add dialog finished');\r\n      } else {\r\n        console.log('task not updated or so dialog says...');\r\n      }\r\n    });\r\n  }\r\n\r\n  editTask(task: TaskoratorTask): void {\r\n    const dialogRef = this.dialog.open(TaskEditPopupComponent, {\r\n      width: '600px',\r\n      data: task, // Pass the task to edit\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        // Update the task in your list or database\r\n        if (result) {\r\n          console.log('Task updated on server:', result);\r\n          const taskAction: TaskActions = TaskActions.UPDATED;\r\n          this.taskUpdateService.update(result, taskAction);\r\n        }\r\n      } else {\r\n        console.log('task not updated or so dialog says...');\r\n      }\r\n    });\r\n  }\r\n\r\n  isSelected() {\r\n    if (!this.task) return false;\r\n    return this.selectedService.isSelected(this.task);\r\n  }\r\n\r\n  getIcon(): string {\r\n    if (this.currentAction.action === 'select') {\r\n      return this.isSelected() ? 'check_box' : 'check_box_outline_blank';\r\n    }\r\n    return this.currentAction.icon;\r\n  }\r\n}\r\n",
            "styleUrl": "./artificer-action.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "artificerService",
                        "type": "ArtificerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gptHelper",
                        "type": "GptSuggestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "artificerService",
                        "type": "ArtificerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gptHelper",
                        "type": "GptSuggestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<button\r\n  class=\"task-btn\"\r\n  [ngClass]=\"getColor()\"\r\n  [ngStyle]=\"getButtonStyle()\"\r\n  (click)=\"performAction()\"\r\n>\r\n  <mat-icon>{{ getIcon() }}</mat-icon>\r\n</button>\r\n"
        },
        {
            "name": "ArtificerActionComponentTest",
            "id": "component-ArtificerActionComponentTest-5773a6906a3c899100e2364b89ef6baa163e41e24a983a2dcc3bcb5ca6463bb4d93a07429bfe90db435a3f176350d3c2c227ef3207be6814740933b504cf8d35",
            "file": "src/app/components/task/artificer-action/artificer-action-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-artificer-action-test",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./artificer-action.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TaskoratorTask | undefined",
                    "decorators": []
                },
                {
                    "name": "treeNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "TaskNodeInfo | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtificerDetails",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "editTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButtonStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "{ visibility: string; pointerEvents: string; } | { visibility?: undefined; pointerEvents?: undefined; }",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "\"complete-icon-color-checklist\" | \"complete-icon-color-parent\" | \"complete-icon-color-child\"",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasIncompleteChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActionRestricted",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "performAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { ArtificerDetails } from '../../artificer/artificer.interface';\r\nimport { ArtificerService } from '../../artificer/artificer.service';\r\nimport { NgClass, NgStyle } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { TaskNodeInfo } from '../../../models/taskTree';\r\nimport { SelectedMultipleService } from '../../../services/tasks/selected-multiple.service';\r\nimport { TaskActions } from '../../../services/tasks/task-action-tracker.service';\r\nimport { TaskEditPopupComponent } from '../task-edit-popup/task-edit-popup.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-artificer-action-test',\r\n  standalone: true,\r\n  imports: [NgClass, MatIcon, NgStyle],\r\n  templateUrl: './artificer-action.component.html',\r\n  styleUrl: './artificer-action.component.scss',\r\n})\r\nexport class ArtificerActionComponentTest {\r\n  @Input() task: TaskoratorTask | undefined;\r\n  currentAction!: ArtificerDetails;\r\n  @Input() treeNode: TaskNodeInfo | undefined;\r\n\r\n  constructor(\r\n    private artificerService: ArtificerService,\r\n    private selectedService: SelectedMultipleService,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.artificerService.currentAction$.subscribe((action) => {\r\n      this.currentAction = action;\r\n    });\r\n  }\r\n\r\n  getColor() {\r\n    if (!this.treeNode) return;\r\n    // it is checklist and reappear whenever it repeats... daily, weekly\r\n    const isRepeatingTask =\r\n      this.task?.repeat !== 'never' && this.task?.repeat !== 'once';\r\n    if (isRepeatingTask) return 'complete-icon-color-checklist';\r\n\r\n    // show color based on what kind of task it is\r\n    if (this.treeNode.childrenCount > 0) {\r\n      // task has children\r\n      if (this.treeNode.completedChildrenCount < this.treeNode.childrenCount) {\r\n        // task has incomplete children\r\n        return 'complete-icon-color-parent';\r\n      }\r\n    } else {\r\n      // task has no children\r\n      return 'complete-icon-color-child';\r\n    }\r\n\r\n    return 'complete-icon-color-child';\r\n  }\r\n\r\n  hasIncompleteChildren() {\r\n    if (!this.treeNode) return false;\r\n    if (this.treeNode.childrenCount < 1) return false;\r\n    if (this.treeNode.completedChildrenCount < this.treeNode.childrenCount)\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  getButtonStyle() {\r\n    const action = this.currentAction.action;\r\n    return this.isActionRestricted(action)\r\n      ? { visibility: 'hidden', pointerEvents: 'none' }\r\n      : {};\r\n  }\r\n\r\n  isActionRestricted(action: string): boolean {\r\n    return (\r\n      this.hasIncompleteChildren() &&\r\n      ['delete', 'complete', 'move'].includes(action)\r\n    );\r\n  }\r\n\r\n  performAction(): void {\r\n    const task = this.task;\r\n    if (!task) return;\r\n    const action = this.currentAction.action;\r\n\r\n    switch (action) {\r\n      case 'promote':\r\n        console.log('this.taskUpdateService.increasePriority(task);');\r\n        break;\r\n      case 'demote':\r\n        console.log('this.taskUpdateService.decreasePriority(task);');\r\n\r\n        break;\r\n      case 'edit':\r\n        // display edit popup ?\r\n        this.editTask(task);\r\n        break;\r\n      case 'select':\r\n        this.selectedService.addRemoveSelectedTask(task);\r\n        break;\r\n      case 'suggest':\r\n        console.log(' this.gptHelper.suggestTasksForTask(task);');\r\n        break;\r\n\r\n      case 'delete':\r\n        console.log('this.taskUpdateService.delete(task);');\r\n\r\n        break;\r\n      case 'complete':\r\n        console.log('this.taskUpdateService.complete(task);');\r\n        break;\r\n      case 'move':\r\n        console.log('this.taskUpdateService.move(task);');\r\n        break;\r\n      case 'refresh':\r\n        console.log('this.taskUpdateService.renew(task);');\r\n        break;\r\n\r\n      // Add more cases as needed...\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  editTask(task: TaskoratorTask): void {\r\n    const dialogRef = this.dialog.open(TaskEditPopupComponent, {\r\n      width: '600px',\r\n      data: task, // Pass the task to edit\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        // Update the task in your list or database\r\n        if (result) {\r\n          console.log('Task updated on server:', result);\r\n          const taskAction: TaskActions = TaskActions.UPDATED;\r\n          // this.taskUpdateService.update(result, taskAction);\r\n        }\r\n      } else {\r\n        console.log('task not updated or so dialog says...');\r\n      }\r\n    });\r\n  }\r\n\r\n  isSelected() {\r\n    if (!this.task) return false;\r\n    return this.selectedService.isSelected(this.task);\r\n  }\r\n\r\n  getIcon(): string {\r\n    if (this.currentAction.action === 'select') {\r\n      return this.isSelected() ? 'check_box' : 'check_box_outline_blank';\r\n    }\r\n    return this.currentAction.icon;\r\n  }\r\n}\r\n",
            "styleUrl": "./artificer-action.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "artificerService",
                        "type": "ArtificerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "artificerService",
                        "type": "ArtificerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<button\r\n  class=\"task-btn\"\r\n  [ngClass]=\"getColor()\"\r\n  [ngStyle]=\"getButtonStyle()\"\r\n  (click)=\"performAction()\"\r\n>\r\n  <mat-icon>{{ getIcon() }}</mat-icon>\r\n</button>\r\n"
        },
        {
            "name": "ArtificerComponent",
            "id": "component-ArtificerComponent-6d066d4fde29c6a872ebda4e0a238808f1182becf9c7d76d9f2a274785eebacbe96a65177e980243e1bb57c27cc806d2ea1141934d9b20e916232344b3e85972",
            "file": "src/app/components/artificer/artificer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-artificer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./artificer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtificerDetails[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "currentAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtificerDetails",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getActionClasses",
                    "args": [
                        {
                            "name": "action",
                            "type": "ArtificerDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ [x: number]: boolean; selected: boolean; }",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ArtificerDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "ArtificerDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ArtificerDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "<p>what we can do with each task\ndelete\ncomplete\nadd selected into (crush)\nsplit\npromote\ndemote\nsearch similar?\nedit</p>\n",
            "rawdescription": "\n\nwhat we can do with each task\ndelete\ncomplete\nadd selected into (crush)\nsplit\npromote\ndemote\nsearch similar?\nedit\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ArtificerDetails } from './artificer.interface';\r\nimport { ArtificerService } from './artificer.service';\r\nimport { NgClass, NgFor } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\n/**\r\n * what we can do with each task\r\n * delete\r\n * complete\r\n * add selected into (crush)\r\n * split\r\n * promote\r\n * demote\r\n * search similar?\r\n * edit\r\n */\r\n@Component({\r\n  selector: 'app-artificer',\r\n  standalone: true,\r\n  imports: [NgFor, NgClass, MatIcon],\r\n  templateUrl: './artificer.component.html',\r\n  styleUrl: './artificer.component.scss',\r\n})\r\nexport class ArtificerComponent {\r\n  actions: ArtificerDetails[];\r\n  currentAction!: ArtificerDetails;\r\n\r\n  constructor(private artificerService: ArtificerService) {\r\n    this.actions = this.artificerService.getActions();\r\n    this.artificerService.currentAction$.subscribe((action) => {\r\n      this.currentAction = action;\r\n    });\r\n  }\r\n\r\n  selectAction(action: ArtificerDetails): void {\r\n    this.artificerService.setCurrentAction(action);\r\n  }\r\n\r\n  getActionClasses(action: ArtificerDetails) {\r\n    return {\r\n      selected: action === this.currentAction,\r\n      [action.colorClass]: true,\r\n    };\r\n  }\r\n}\r\n",
            "styleUrl": "./artificer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "artificerService",
                        "type": "ArtificerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "artificerService",
                        "type": "ArtificerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"app-artificer\">\r\n  <div\r\n    *ngFor=\"let action of actions\"\r\n    (click)=\"selectAction(action)\"\r\n    class=\"task-btn artificer-button\"\r\n    [ngClass]=\"getActionClasses(action)\"\r\n  >\r\n    <mat-icon>{{ action.icon }}</mat-icon>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-2afa050fd19c31cd26379aa7adf9804ddf6dc275bd83f4f93bc04aea3e0fdf699470d565f4b72c16555dbb0b34ad9f1583e73c32990950cc3915f6cf0ed3be6c",
            "file": "src/app/components/base/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base",
            "styleUrls": [
                "./base.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./base.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedback",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "popup",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ErrorService } from '../../services/core/error.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n@Component({\r\n  selector: 'app-base',\r\n  standalone: true,\r\n  templateUrl: './base.component.html',\r\n  styleUrls: ['./base.component.css'],\r\n})\r\nexport class BaseComponent {\r\n  constructor(\r\n    protected snackBar: MatSnackBar,\r\n    protected dialog: MatDialog,\r\n    private errorService: ErrorService\r\n  ) {}\r\n\r\n  error(message: string, error: unknown): void {\r\n    this.snackBar.open(message, 'Close', {\r\n      duration: 3000,\r\n      panelClass: 'error-snackbar',\r\n    });\r\n    this.errorService.error(error);\r\n  }\r\n\r\n  log(message: string): void {\r\n    this.errorService.log(message);\r\n  }\r\n\r\n  popup(message: string): void {\r\n    // maybe...\r\n    // this.dialog.open(PopupComponent, {\r\n    //   data: { message },\r\n    // });\r\n\r\n    // has internal popup...\r\n    this.errorService.feedback(message);\r\n  }\r\n\r\n  feedback(message: string) {\r\n    this.errorService.feedback(message);\r\n  }\r\n\r\n  // Add more common methods as needed\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./base.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p>base works!</p>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CitadelComponent",
            "id": "component-CitadelComponent-5d48960d7c684b5b5d107bdf1496f84f2feaf28205c1b1bf3328ab6e54b922eeab0379fe604bd32bd26ce83bd3901ba75189d133b9a0ae0f5ee170359bcbffee",
            "file": "src/app/features/core/citadel/citadel/citadel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-citadel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./citadel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['citadel']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n\r\n@Component({\r\n  selector: 'app-citadel',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './citadel.component.html',\r\n  styleUrl: './citadel.component.scss',\r\n})\r\nexport class CitadelComponent {\r\n  data = CORE_APP_METADATA['citadel'];\r\n}\r\n",
            "styleUrl": "./citadel.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>{{ data.title }}</h2>\r\n  <h3>{{ data.description }}</h3>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "CreateRepetitiveTaskComponent",
            "id": "component-CreateRepetitiveTaskComponent-344f68c866c01e93ecb4443fff407a30b7c50f9351008f5e75bbe4acf309431abc546d04e351117a61f44db2d7a7c812c7a3691fd38769a344e4c7e685399359",
            "file": "src/app/features/core/dreamforge/create-repetitive-task/create-repetitive-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-repetitive-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-repetitive-task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "repeatOptions",
                    "defaultValue": "[\r\n    'never',\r\n    'once',\r\n    'half-hourly',\r\n    'hourly',\r\n    'half-daily',\r\n    'daily',\r\n    'weekly',\r\n    'monthly',\r\n    'yearly',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RepeatOptions[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "task",
                    "defaultValue": "getDefaultTask()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport {\r\n  getDefaultTask,\r\n  RepeatOptions,\r\n  TaskoratorTask,\r\n} from '../../../../models/taskModelManager';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgForOf } from '@angular/common';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { TaskUpdateService } from '../../../../services/tasks/task-update.service';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { ErrorService } from '../../../../services/core/error.service';\r\n\r\n@Component({\r\n  selector: 'app-create-repetitive-task',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    NgForOf,\r\n    MatIcon,\r\n  ],\r\n  templateUrl: './create-repetitive-task.component.html',\r\n  styleUrl: './create-repetitive-task.component.scss',\r\n})\r\nexport class CreateRepetitiveTaskComponent {\r\n  task: TaskoratorTask = getDefaultTask(); // Start with a default task\r\n\r\n  repeatOptions: RepeatOptions[] = [\r\n    'never',\r\n    'once',\r\n    'half-hourly',\r\n    'hourly',\r\n    'half-daily',\r\n    'daily',\r\n    'weekly',\r\n    'monthly',\r\n    'yearly',\r\n  ];\r\n\r\n  constructor(\r\n    private taskService: TaskUpdateService,\r\n    private errorService: ErrorService\r\n  ) {}\r\n\r\n  saveTask(): void {\r\n    if (this.task.name.trim() === '') {\r\n      this.errorService.warn('Task name cannot be empty');\r\n      return;\r\n    }\r\n    this.task.lastUpdated = 0;\r\n    this.taskService.create(this.task);\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.task = getDefaultTask(); // Reset to default task\r\n  }\r\n}\r\n",
            "styleUrl": "./create-repetitive-task.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"component-width\">\r\n  <h2>Create Repetitive Task</h2>\r\n\r\n  <form #taskForm=\"ngForm\" (ngSubmit)=\"saveTask()\">\r\n    <!-- Task Name -->\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Name</mat-label>\r\n      <input\r\n        matInput\r\n        [(ngModel)]=\"task.name\"\r\n        name=\"name\"\r\n        required\r\n        placeholder=\"Enter task name\"\r\n      />\r\n    </mat-form-field>\r\n\r\n    <!-- Task Description -->\r\n    <!-- <mat-form-field appearance=\"fill\">\r\n      <mat-label>Task Description</mat-label>\r\n      <textarea\r\n        matInput\r\n        [(ngModel)]=\"task.todo\"\r\n        name=\"todo\"\r\n        placeholder=\"Describe the task\"\r\n        rows=\"1\"\r\n        required\r\n      ></textarea>\r\n    </mat-form-field> -->\r\n\r\n    <!-- Repetition -->\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Repeat</mat-label>\r\n      <mat-select [(ngModel)]=\"task.repeat\" name=\"repeat\" required>\r\n        <mat-option *ngFor=\"let option of repeatOptions\" [value]=\"option\">\r\n          {{ option }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <!-- Duration -->\r\n    <!-- <mat-form-field appearance=\"fill\">\r\n      <mat-label>Duration (minutes)</mat-label>\r\n      <input\r\n        matInput\r\n        type=\"number\"\r\n        [(ngModel)]=\"task.duration\"\r\n        name=\"duration\"\r\n        required\r\n        placeholder=\"Enter duration\"\r\n        min=\"0\"\r\n      />\r\n    </mat-form-field> -->\r\n\r\n    <!-- Priority -->\r\n    <!-- <mat-form-field appearance=\"fill\">\r\n      <mat-label>Priority (1-10)</mat-label>\r\n      <input\r\n        matInput\r\n        type=\"number\"\r\n        [(ngModel)]=\"task.priority\"\r\n        name=\"priority\"\r\n        required\r\n        placeholder=\"Enter priority\"\r\n        min=\"1\"\r\n        max=\"10\"\r\n      />\r\n    </mat-form-field> -->\r\n\r\n    <!-- Submit and Reset Buttons -->\r\n    <div class=\"button-group\">\r\n      <!-- <button mat-raised-button color=\"primary\" type=\"submit\">\r\n        Create Task\r\n      </button> -->\r\n      <!-- <button\r\n        mat-stroked-button\r\n        color=\"warn\"\r\n        type=\"button\"\r\n        (click)=\"resetForm()\"\r\n      >\r\n        Reset Form\r\n      </button> -->\r\n      <button class=\"task-btn\" type=\"submit\"><mat-icon>save</mat-icon></button>\r\n      <button class=\"task-btn\" (click)=\"resetForm()\">\r\n        <mat-icon>clear</mat-icon>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "CreateTaskComponent",
            "id": "component-CreateTaskComponent-2c953533d186f69346d7070a4a047fd22b9d63b81fd2fa94879c4fe9e5a98b623b1d0b87864b930c5b0e4d9f7a5cb213f4737c54aecffbfd8a8fcd616c639743",
            "file": "src/app/components/task/create-task/create-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedOverlord$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedOverlordName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showAdditionalFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "taskForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "createTask",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAdditionalFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "SearchOverlordComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  TaskoratorTask,\r\n  getDefaultTask,\r\n} from '../../../models/taskModelManager';\r\nimport { SelectedOverlordService } from '../../../services/tasks/selected-overlord.service';\r\nimport { NgIf } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { SearchOverlordComponent } from '../../search-overlord/search-overlord.component';\r\nimport { TaskService } from '../../../services/sync-api-cache/task.service';\r\nimport { TaskUpdateService } from '../../../services/tasks/task-update.service';\r\n\r\n@Component({\r\n  selector: 'app-create-task',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatIcon,\r\n    SearchOverlordComponent,\r\n  ],\r\n  templateUrl: './create-task.component.html',\r\n  styleUrl: './create-task.component.scss',\r\n})\r\nexport class CreateTaskComponent {\r\n  taskForm: FormGroup;\r\n  selectedOverlord$: Observable<string | null>;\r\n  selectedOverlordName: string = '';\r\n  showAdditionalFields = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskService: TaskService,\r\n    private taskUpdateService: TaskUpdateService\r\n  ) {\r\n    this.taskForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      todo: [''],\r\n      why: [''],\r\n      // duration: [''],\r\n    });\r\n\r\n    this.selectedOverlord$ =\r\n      this.selectedOverlordService.getSelectedOverlordObservable();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.selectedOverlord$.subscribe((overlord) => {\r\n      if (overlord) {\r\n        this.taskService\r\n          .getTaskById(overlord)\r\n          .then((t) => (this.selectedOverlordName = t?.name || ''));\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleAdditionalFields(): void {\r\n    this.showAdditionalFields = !this.showAdditionalFields;\r\n  }\r\n\r\n  async createTask(): Promise<void> {\r\n    if (this.taskForm.valid) {\r\n      const task: TaskoratorTask = getDefaultTask();\r\n      const overlord: string | null =\r\n        this.selectedOverlordService.getSelectedOverlord();\r\n\r\n      if (overlord) {\r\n        task.name = this.taskForm.get('name')?.value;\r\n\r\n        if (this.showAdditionalFields) {\r\n          task.todo = this.taskForm.get('todo')?.value;\r\n          task.why = this.taskForm.get('why')?.value;\r\n          // task.duration = this.taskForm.get('duration')?.value;\r\n        }\r\n\r\n        task.overlord = overlord;\r\n\r\n        await this.taskUpdateService.create(task);\r\n        this.taskForm.reset();\r\n      } else {\r\n        console.error('No overlord selected');\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./create-task.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div *ngIf=\"selectedOverlordName\">\r\n  <form [formGroup]=\"taskForm\" (ngSubmit)=\"createTask()\" class=\"task-form\">\r\n    <div class=\"input-group\">\r\n      <!-- Button to toggle additional fields -->\r\n      <button\r\n        mat-icon-button\r\n        type=\"button\"\r\n        (click)=\"toggleAdditionalFields()\"\r\n        aria-label=\"Toggle Additional Fields\"\r\n      >\r\n        <mat-icon>\r\n          {{ showAdditionalFields ? \"expand_less\" : \"expand_more\" }}\r\n        </mat-icon>\r\n      </button>\r\n\r\n      <!-- Task Name Input -->\r\n      <mat-form-field class=\"full-width\">\r\n        <input\r\n          matInput\r\n          id=\"name\"\r\n          formControlName=\"name\"\r\n          placeholder=\"to: {{ selectedOverlordName }}\"\r\n        />\r\n      </mat-form-field>\r\n\r\n      <!-- Save Button: only submit form when this button is clicked -->\r\n      <button\r\n        mat-icon-button\r\n        type=\"submit\"\r\n        color=\"primary\"\r\n        [disabled]=\"!taskForm.valid\"\r\n        aria-label=\"Save Task\"\r\n      >\r\n        <mat-icon>save</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Additional Fields -->\r\n    <div *ngIf=\"showAdditionalFields\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>To Do</mat-label>\r\n        <input\r\n          matInput\r\n          id=\"todo\"\r\n          formControlName=\"todo\"\r\n          placeholder=\"Todo or Description\"\r\n        />\r\n      </mat-form-field>\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Why</mat-label>\r\n        <input\r\n          matInput\r\n          id=\"why\"\r\n          formControlName=\"why\"\r\n          placeholder=\"Goal or Reason\"\r\n        />\r\n      </mat-form-field>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<!-- If no overlord is selected, show the search component -->\r\n<!-- <div *ngIf=\"!selectedOverlordName\">\r\n  <app-search-overlord></app-search-overlord>\r\n</div> -->\r\n"
        },
        {
            "name": "CrucibleComponent",
            "id": "component-CrucibleComponent-a15b2a51071f6a4d6a47c6832e577159861d81a833f0d646afb9f89e3a1bd22dcd3fb8487c4b43e4199e032b01bd8a8f04f7a3b82879e2a84106c7dc6ca6fcd8",
            "file": "src/app/features/core/crucible/crucible/crucible.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-crucible",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./crucible.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['crucible']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n\r\n@Component({\r\n  selector: 'app-crucible',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './crucible.component.html',\r\n  styleUrl: './crucible.component.scss',\r\n})\r\nexport class CrucibleComponent {\r\n  data = CORE_APP_METADATA['crucible'];\r\n}\r\n",
            "styleUrl": "./crucible.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>{{ data.title }}</h2>\r\n  <h3>{{ data.description }}</h3>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "DailyTaskListComponent",
            "id": "component-DailyTaskListComponent-c5c9649a20846475ab5812e6451ebbfe6306c693273cfa65fd625a612ea307ee027ac3fbd132b4d13cc09525de2c06c8decca14e26bcf5b92b3de1a7da29e10e",
            "file": "src/app/features/core/sentinel/lists/daily-task-list/daily-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-daily-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./daily-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport {\r\n  TaskListRules,\r\n  TaskListKey,\r\n  TaskListType,\r\n  TaskListSubtype,\r\n} from '../../../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../../../services/tasks/task-list-rules.service';\r\n\r\n@Component({\r\n  selector: 'app-daily-task-list',\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  templateUrl: './daily-task-list.component.html',\r\n  styleUrl: './daily-task-list.component.scss',\r\n})\r\nexport class DailyTaskListComponent implements OnInit {\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListRulesService: TaskListRulesService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadTasks();\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.DAILY,\r\n        data: TaskListSubtype.REPEATING,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./daily-task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- create task now is in search field on header area anyway -->\r\n<!-- <div class=\"center-horizontal\">\r\n  <div class=\"task-form-container\"><app-create-task></app-create-task></div>\r\n</div> -->\r\n<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n"
        },
        {
            "name": "DreamforgeComponent",
            "id": "component-DreamforgeComponent-46ab81fca9605421082e6715b6268ede6e79614b273e47767d89ed7aa10c0194ee5a81b2d67ad4a0fde5c9476a78a9d2fb49b480684423ffd89dc42d1df321ea",
            "file": "src/app/features/core/dreamforge/dreamforge/dreamforge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dreamforge",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dreamforge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['dreamforge']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n\r\n@Component({\r\n  selector: 'app-dreamforge',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './dreamforge.component.html',\r\n  styleUrl: './dreamforge.component.scss',\r\n})\r\nexport class DreamforgeComponent {\r\n  data = CORE_APP_METADATA['dreamforge'];\r\n}\r\n",
            "styleUrl": "./dreamforge.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>{{ data.title }}</h2>\r\n  <h3>{{ data.description }}</h3>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-57d882d70b9457b1719fc115387972e7f0825309cb72951cebcb8f6e4657142aeebd8317a2f06b988e9cd6246b06c557127700b95ef795b6fcd6aef7e3a714aa",
            "file": "src/app/components/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error",
            "styleUrls": [
                "./error.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-error',\r\n  standalone: true,\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.css'],\r\n})\r\nexport class ErrorComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./error.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p>error works!</p>\r\n"
        },
        {
            "name": "FavoriteTaskComponent",
            "id": "component-FavoriteTaskComponent-223948b19a379e4ee04c09ed30adfa4a65aea340013e240dcd388338d6704cb858bbbd1f92bfd94221bf74a987b231f0b4ce8095aa5e1cdbe25d5c1f9329e1e7",
            "file": "src/app/features/core/dreamforge/favorite/favorite-task/favorite-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-favorite-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./favorite-task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[] | ",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "settings",
                    "defaultValue": "getDefaultTaskSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[] | ",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadFavoriteTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2157,
                                "end": 2169,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2151,
                                "end": 2156,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1967,
                                "end": 1979,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1961,
                                "end": 1966,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "StagedTaskListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TaskTree } from '../../../../../models/taskTree';\r\nimport {\r\n  TaskSettings,\r\n  getDefaultTaskSettings,\r\n} from '../../../../../models/settings';\r\nimport { SettingsService } from '../../../../../services/sync-api-cache/settings.service';\r\nimport { SelectedMultipleService } from '../../../../../services/tasks/selected-multiple.service';\r\nimport { TaskoratorTask } from '../../../../../models/taskModelManager';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { StagedTaskListComponent } from '../../../../../components/task/staged-task-list/staged-task-list.component';\r\nimport { TaskListService } from '../../../../../services/sync-api-cache/task-list.service';\r\n\r\n@Component({\r\n  selector: 'app-favorite-task',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIcon, StagedTaskListComponent],\r\n  templateUrl: './favorite-task.component.html',\r\n  styleUrl: './favorite-task.component.scss',\r\n})\r\nexport class FavoriteTaskComponent implements OnInit {\r\n  settings: TaskSettings = getDefaultTaskSettings();\r\n  tree: TaskTree | undefined;\r\n  tasks: TaskoratorTask[] | [] = [];\r\n  selectedTasks: TaskoratorTask[] | [] = [];\r\n\r\n  constructor(\r\n    private settingsService: SettingsService,\r\n    private taskListService: TaskListService,\r\n    private selectedTasksService: SelectedMultipleService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.settingsService.getSettings().subscribe((s: TaskSettings | null) => {\r\n      if (!s) return;\r\n      this.settings = s;\r\n      this.loadFavoriteTasks().then();\r\n    });\r\n    this.selectedTasksService\r\n      .getSelectedTasks()\r\n      .subscribe((t: TaskoratorTask[]) => {\r\n        this.selectedTasks = t;\r\n      });\r\n  }\r\n\r\n  save() {\r\n    const ids = this.tasks.map((t) => t.taskId);\r\n    this.settings.favoriteTaskIds = ids;\r\n    this.settingsService.updateSettings(this.settings);\r\n  }\r\n\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.tasks = updatedTasks;\r\n  }\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateSelectedTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.selectedTasks = updatedTasks;\r\n  }\r\n\r\n  add() {\r\n    const ids = this.selectedTasks.map((t) => t.taskId);\r\n    this.tasks = [...this.tasks, ...this.selectedTasks];\r\n    this.settings.favoriteTaskIds = [...this.settings.favoriteTaskIds, ...ids];\r\n    this.settingsService.updateSettings(this.settings);\r\n  }\r\n\r\n  async loadFavoriteTasks() {\r\n    this.tasks = (await this.taskListService.getFavoriteTasks()) || [];\r\n  }\r\n}\r\n",
            "styleUrl": "./favorite-task.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedTasksService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedTasksService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"component-width\">\r\n  <h1>Favorite Tasks</h1>\r\n  <app-staged-task-list [tasks]=\"tasks\" (tasksChange)=\"updateTasks($event)\">\r\n  </app-staged-task-list>\r\n  <button class=\"task-btn\" (click)=\"save()\">\r\n    <mat-icon>save</mat-icon>Save Settings\r\n  </button>\r\n</div>\r\n<div class=\"component-width\">\r\n  <h1>Selected Tasks</h1>\r\n  <app-staged-task-list\r\n    [tasks]=\"selectedTasks\"\r\n    (tasksChange)=\"updateSelectedTasks($event)\"\r\n  >\r\n  </app-staged-task-list>\r\n  <button class=\"task-btn\" (click)=\"add()\">\r\n    <mat-icon>add</mat-icon>Add To Favorite\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "FocusComponent",
            "id": "component-FocusComponent-0482b4caf60bb9be8d90a8f1b5f718cbd41fdb34c11e3dce9fd26e78299b7c8ad5d699bbe0858021ad6c63b3e6266cf2d7527e6bf8de5ac8d00812f35ba1d11f",
            "file": "src/app/features/core/dreamforge/focus/focus/focus.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-focus",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./focus.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[] | ",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "settings",
                    "defaultValue": "getDefaultTaskSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[] | ",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadFocusTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1941,
                                "end": 1953,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1935,
                                "end": 1940,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1751,
                                "end": 1763,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1745,
                                "end": 1750,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "StagedTaskListComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgFor } from '@angular/common';\r\nimport {\r\n  TaskSettings,\r\n  getDefaultTaskSettings,\r\n} from '../../../../../models/settings';\r\nimport { TaskTree } from '../../../../../models/taskTree';\r\nimport { SettingsService } from '../../../../../services/sync-api-cache/settings.service';\r\nimport { TaskoratorTask } from '../../../../../models/taskModelManager';\r\nimport { StagedTaskListComponent } from '../../../../../components/task/staged-task-list/staged-task-list.component';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { SelectedMultipleService } from '../../../../../services/tasks/selected-multiple.service';\r\nimport { TaskListService } from '../../../../../services/sync-api-cache/task-list.service';\r\n\r\n@Component({\r\n  selector: 'app-focus',\r\n  standalone: true,\r\n  imports: [NgFor, StagedTaskListComponent, MatIcon],\r\n  templateUrl: './focus.component.html',\r\n  styleUrl: './focus.component.scss',\r\n})\r\nexport class FocusComponent implements OnInit {\r\n  settings: TaskSettings = getDefaultTaskSettings();\r\n  tree: TaskTree | undefined;\r\n  tasks: TaskoratorTask[] | [] = [];\r\n  selectedTasks: TaskoratorTask[] | [] = [];\r\n\r\n  constructor(\r\n    private settingsService: SettingsService,\r\n    private taskListService: TaskListService,\r\n    private selectedTasksService: SelectedMultipleService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.settingsService.getSettings().subscribe((s: TaskSettings | null) => {\r\n      if (!s) return;\r\n      this.settings = s;\r\n      this.loadFocusTasks().then();\r\n    });\r\n    this.selectedTasksService\r\n      .getSelectedTasks()\r\n      .subscribe((t: TaskoratorTask[]) => {\r\n        this.selectedTasks = t;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.tasks = updatedTasks;\r\n  }\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateSelectedTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.selectedTasks = updatedTasks;\r\n  }\r\n\r\n  save() {\r\n    const ids = this.tasks.map((t) => t.taskId);\r\n    this.settings.focusTaskIds = ids;\r\n    this.settingsService.updateSettings(this.settings);\r\n  }\r\n\r\n  add() {\r\n    const ids = this.selectedTasks.map((t) => t.taskId);\r\n    this.tasks = [...this.tasks, ...this.selectedTasks];\r\n    this.settings.focusTaskIds = [...this.settings.focusTaskIds, ...ids];\r\n    this.settingsService.updateSettings(this.settings);\r\n  }\r\n\r\n  async loadFocusTasks() {\r\n    this.tasks = (await this.taskListService.getFocusTasks()) || [];\r\n  }\r\n}\r\n",
            "styleUrl": "./focus.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedTasksService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedTasksService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"component-width\">\r\n  <h1>Focus Tasks</h1>\r\n  <app-staged-task-list [tasks]=\"tasks\" (tasksChange)=\"updateTasks($event)\">\r\n  </app-staged-task-list>\r\n  <button class=\"task-btn\" (click)=\"save()\">\r\n    <mat-icon>save</mat-icon>Save Settings\r\n  </button>\r\n</div>\r\n<div class=\"component-width\">\r\n  <h1>Selected Tasks</h1>\r\n  <app-staged-task-list\r\n    [tasks]=\"selectedTasks\"\r\n    (tasksChange)=\"updateSelectedTasks($event)\"\r\n  >\r\n  </app-staged-task-list>\r\n  <button class=\"task-btn\" (click)=\"add()\">\r\n    <mat-icon>add</mat-icon>Add To Focus\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "FocusTaskListComponent",
            "id": "component-FocusTaskListComponent-bddb424ed4569087bb8c339a7bee689b5b37f5daf4dbeb49faeaa2e0ec054eeec201ef9b52213e6644ed76fb15e92663508356f8002bf18b71e0f317db5b3ad9",
            "file": "src/app/features/core/sentinel/lists/focus-task-list/focus-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-focus-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./focus-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport {\r\n  TaskListRules,\r\n  TaskListKey,\r\n  TaskListType,\r\n  TaskListSubtype,\r\n} from '../../../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../../../services/tasks/task-list-rules.service';\r\n\r\n@Component({\r\n  selector: 'app-focus-task-list',\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  templateUrl: './focus-task-list.component.html',\r\n  styleUrl: './focus-task-list.component.scss',\r\n})\r\nexport class FocusTaskListComponent implements OnInit {\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListRulesService: TaskListRulesService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadTasks();\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.FOCUS,\r\n        data: TaskListSubtype.SETTINGS,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./focus-task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- create task now is in search field on header area anyway -->\r\n<!-- <div class=\"center-horizontal\">\r\n  <div class=\"task-form-container\"><app-create-task></app-create-task></div>\r\n</div> -->\r\n<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-36c55c4c1002281ae7abf68f9efded91165efa1a52e8b81112d43f54cf13f272f5af3287318bf2410749a300a6c8a865ab2a5463885bcaf7decd96368043ef7c",
            "file": "src/app/components/task/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "taskToClone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TaskoratorTask",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "taskForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getTaskDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Partial<TaskoratorTask>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeFormWithTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  standalone: true,\r\n  imports: [MatFormField, MatLabel, ReactiveFormsModule],\r\n  templateUrl: './form.component.html',\r\n  styleUrl: './form.component.scss',\r\n})\r\nexport class FormComponent {\r\n  @Input() taskToClone?: TaskoratorTask; // Optional task to initialize form with\r\n  taskForm: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.taskForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      todo: [''],\r\n      why: [''],\r\n      // Other fields can be added here as needed\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Populate form with task details if `taskToClone` is provided\r\n    if (this.taskToClone) {\r\n      this.initializeFormWithTask(this.taskToClone);\r\n    }\r\n  }\r\n\r\n  // Populate form fields based on the given task\r\n  initializeFormWithTask(task: TaskoratorTask): void {\r\n    this.taskForm.patchValue({\r\n      name: '', // Keep name empty for user to specify a unique name\r\n      todo: task.todo || '',\r\n      why: task.why || '',\r\n      // Add other fields as needed\r\n    });\r\n  }\r\n\r\n  // Get the form values to create or update a task\r\n  getTaskDetails(): Partial<TaskoratorTask> {\r\n    return this.taskForm.value;\r\n  }\r\n}\r\n",
            "styleUrl": "./form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<form [formGroup]=\"taskForm\" class=\"task-form\">\r\n  <mat-form-field class=\"full-width\">\r\n    <mat-label>Name</mat-label>\r\n    <input matInput formControlName=\"name\" placeholder=\"Task name\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"full-width\">\r\n    <mat-label>To Do</mat-label>\r\n    <input matInput formControlName=\"todo\" placeholder=\"Task to-do details\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"full-width\">\r\n    <mat-label>Why</mat-label>\r\n    <input matInput formControlName=\"why\" placeholder=\"Purpose or reason\" />\r\n  </mat-form-field>\r\n\r\n  <!-- Additional fields can be added here as needed -->\r\n</form>\r\n"
        },
        {
            "name": "FrogTaskComponent",
            "id": "component-FrogTaskComponent-9d7f41a9616d220d79d8c4757afee2eb89ac7af4ea92ec4bd25d19a7f5854baad17d1d44657be85ad670994a347ec5bc37baaa86397f3336d4a88004a489fbac",
            "file": "src/app/features/core/dreamforge/frog/frog-task/frog-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-frog-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./frog-task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[] | ",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "settings",
                    "defaultValue": "getDefaultTaskSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[] | ",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadFrogTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1969,
                                "end": 1981,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1963,
                                "end": 1968,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1779,
                                "end": 1791,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1773,
                                "end": 1778,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "StagedTaskListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TaskTree } from '../../../../../models/taskTree';\r\nimport {\r\n  TaskSettings,\r\n  getDefaultTaskSettings,\r\n} from '../../../../../models/settings';\r\nimport { SettingsService } from '../../../../../services/sync-api-cache/settings.service';\r\nimport { SelectedMultipleService } from '../../../../../services/tasks/selected-multiple.service';\r\nimport { TaskoratorTask } from '../../../../../models/taskModelManager';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { StagedTaskListComponent } from '../../../../../components/task/staged-task-list/staged-task-list.component';\r\nimport { TaskListService } from '../../../../../services/sync-api-cache/task-list.service';\r\n\r\n@Component({\r\n  selector: 'app-frog-task',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIcon, StagedTaskListComponent],\r\n  templateUrl: './frog-task.component.html',\r\n  styleUrl: './frog-task.component.scss',\r\n})\r\nexport class FrogTaskComponent implements OnInit {\r\n  settings: TaskSettings = getDefaultTaskSettings();\r\n  tree: TaskTree | undefined;\r\n  tasks: TaskoratorTask[] | [] = [];\r\n  selectedTasks: TaskoratorTask[] | [] = [];\r\n\r\n  constructor(\r\n    private settingsService: SettingsService,\r\n    private taskListService: TaskListService,\r\n    private selectedTasksService: SelectedMultipleService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.settingsService.getSettings().subscribe((s: TaskSettings | null) => {\r\n      if (!s) return;\r\n      this.settings = s;\r\n      this.loadFrogTasks().then();\r\n    });\r\n    this.selectedTasksService\r\n      .getSelectedTasks()\r\n      .subscribe((t: TaskoratorTask[]) => {\r\n        this.selectedTasks = t;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.tasks = updatedTasks;\r\n  }\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateSelectedTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.selectedTasks = updatedTasks;\r\n  }\r\n\r\n  save() {\r\n    const ids = this.tasks.map((t) => t.taskId);\r\n    this.settings.frogTaskIds = ids;\r\n    this.settingsService.updateSettings(this.settings);\r\n  }\r\n\r\n  add() {\r\n    const ids = this.selectedTasks.map((t) => t.taskId);\r\n    this.tasks = [...this.tasks, ...this.selectedTasks];\r\n    this.settings.frogTaskIds = [...this.settings.frogTaskIds, ...ids];\r\n    this.settingsService.updateSettings(this.settings);\r\n  }\r\n\r\n  async loadFrogTasks() {\r\n    this.tasks = (await this.taskListService.getFrogTasks()) || [];\r\n  }\r\n}\r\n",
            "styleUrl": "./frog-task.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedTasksService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedTasksService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"component-width\">\r\n  <h1>Focus Tasks</h1>\r\n  <app-staged-task-list [tasks]=\"tasks\" (tasksChange)=\"updateTasks($event)\">\r\n  </app-staged-task-list>\r\n  <button class=\"task-btn\" (click)=\"save()\">\r\n    <mat-icon>save</mat-icon>Save Settings\r\n  </button>\r\n</div>\r\n<div class=\"component-width\">\r\n  <h1>Selected Tasks</h1>\r\n  <app-staged-task-list\r\n    [tasks]=\"selectedTasks\"\r\n    (tasksChange)=\"updateSelectedTasks($event)\"\r\n  >\r\n  </app-staged-task-list>\r\n  <button class=\"task-btn\" (click)=\"add()\">\r\n    <mat-icon>add</mat-icon>Add To Focus\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "GatewayComponent",
            "id": "component-GatewayComponent-61381e7ca69de4afb17eca853aaf95ce1adcabfdec331620753ce96fd349e80be8c4f6615c36c68a7e76e805d83f6098c413a14966a36389e06f46fc35643904",
            "file": "src/app/features/core/gateway/gateway/gateway.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gateway",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./gateway.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['gateway']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n\r\n@Component({\r\n  selector: 'app-gateway',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './gateway.component.html',\r\n  styleUrl: './gateway.component.scss',\r\n})\r\nexport class GatewayComponent {\r\n  data = CORE_APP_METADATA['gateway'];\r\n}\r\n",
            "styleUrl": "./gateway.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>{{ data.title }}</h2>\r\n  <h3>{{ data.description }}</h3>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<button class=\"btn btn-secondary\">Hello DaisyUI</button>\r\n"
        },
        {
            "name": "GptCreateComponent",
            "id": "component-GptCreateComponent-5f5fd75d246e2cd5c81e8c3a749c954eddf4f75a5dfefffacd379f24ae96d968360d3274a7792a3dbf2e646ae99a7247ddccb74ff338b1b0d50e924fb8598b46",
            "file": "src/app/features/gpt/gpt-create/gpt-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gpt-create",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./gpt-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canUseComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "currentOverlordId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "mainPrompt",
                    "defaultValue": "'please give me a list of tasks, that are on new line each, try suggest useful ideas without just mentioning what is in the request please: '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "prompt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "result",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "taskTree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePromptRequest",
                    "args": [
                        {
                            "name": "treeChain",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "treeChain",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMainPrompt",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getOverlordChildren",
                    "args": [
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskoratorTask[]>",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuggestion",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTaskFromResponse",
                    "args": [
                        {
                            "name": "t",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskoratorTask",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTreeChain",
                    "args": [
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  getDefaultTask,\r\n  TaskoratorTask,\r\n} from '../../../models/taskModelManager';\r\nimport { TaskTree } from '../../../models/taskTree';\r\nimport { SelectedOverlordService } from '../../../services/tasks/selected-overlord.service';\r\nimport { TreeService } from '../../../services/sync-api-cache/tree.service';\r\nimport { CurrentInputService } from '../../../services/current-input.service';\r\nimport { GptRequestService } from '../services/gpt-request.service';\r\nimport { NgIf } from '@angular/common';\r\nimport { GptTasksService } from '../services/gpt-tasks.service';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { TaskService } from '../../../services/sync-api-cache/task.service';\r\nimport { TaskListService } from '../../../services/sync-api-cache/task-list.service';\r\nimport { SessionManagerService } from '../../../services/session-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-gpt-create',\r\n  standalone: true,\r\n  imports: [NgIf, MatButtonModule, MatIcon, MatProgressSpinnerModule],\r\n  templateUrl: './gpt-create.component.html',\r\n  styleUrl: './gpt-create.component.scss',\r\n})\r\nexport class GptCreateComponent implements OnInit {\r\n  currentOverlordId: string | undefined;\r\n  taskTree: TaskTree | undefined;\r\n  prompt: string | undefined;\r\n  mainPrompt =\r\n    'please give me a list of tasks, that are on new line each, try suggest useful ideas without just mentioning what is in the request please: ';\r\n\r\n  isLoading = false;\r\n  result: string[] | null = null;\r\n  canUseComponent: boolean = true;\r\n\r\n  constructor(\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private treeService: TreeService,\r\n    private currentInputService: CurrentInputService,\r\n    private taskService: TaskService,\r\n    private taskListService: TaskListService,\r\n    private gptService: GptRequestService,\r\n    private gptTasksService: GptTasksService,\r\n    private sessionService: SessionManagerService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((t: string | null) => {\r\n        if (!t) return;\r\n        this.currentOverlordId = t;\r\n      });\r\n\r\n    this.treeService.getTree().subscribe((tree) => {\r\n      if (!tree) return;\r\n      this.taskTree = tree;\r\n    });\r\n\r\n    this.currentInputService\r\n      .getCurrentInput()\r\n      .subscribe((input) => (this.prompt = input));\r\n\r\n    const sessionType = this.sessionService.getSessionType();\r\n    if (sessionType === 'offline') {\r\n      this.canUseComponent = false;\r\n    }\r\n  }\r\n\r\n  async getSuggestion() {\r\n    if (!this.canUseComponent) alert('Must login online to use gpt');\r\n    const overlordId = this.currentOverlordId;\r\n    if (!overlordId) {\r\n      console.log('Missing userId or selectedOverlord.');\r\n      return;\r\n    }\r\n\r\n    const tree = this.taskTree;\r\n\r\n    if (!tree) {\r\n      console.log('Missing tree.');\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n\r\n    try {\r\n      if (!this.currentOverlordId) return;\r\n      const overlord = await this.taskService.getTaskById(\r\n        this.currentOverlordId\r\n      );\r\n      if (!overlord) return;\r\n\r\n      const treeChain = await this.getTreeChain(overlord, tree);\r\n      const tasks = await this.getOverlordChildren(overlord);\r\n      const currentInput = this.prompt || '';\r\n      const request = this.generatePromptRequest(\r\n        treeChain,\r\n        tasks,\r\n        currentInput,\r\n        overlord\r\n      );\r\n      const response = await this.gptService.makeGptRequest(request);\r\n      this.result = response.text.split('\\n');\r\n      this.result?.forEach((t: string) => {\r\n        const task = this.getTaskFromResponse(t, overlord);\r\n        this.gptTasksService.addTask(task);\r\n      });\r\n    } catch (error) {\r\n      console.error('Error in getSuggestion():', error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  getTaskFromResponse(t: string, overlord: TaskoratorTask): TaskoratorTask {\r\n    const task = getDefaultTask();\r\n    if (!overlord) return task;\r\n\r\n    // Remove leading numbers and trim the result\r\n    const cleanInput = t.replace(/^\\d+\\.\\s*/, '').trim();\r\n\r\n    // Split the input string into name and todo parts\r\n    // Assuming the format is \"Task Name: Task Description.\"\r\n    const splitIndex = cleanInput.indexOf(':');\r\n    if (splitIndex !== -1) {\r\n      task.name = cleanInput.substring(0, splitIndex).trim();\r\n      task.todo = cleanInput.substring(splitIndex + 1).trim();\r\n    } else {\r\n      // Fallback if no colon is found\r\n      // if task designed as long task then we can't really do much to make it more readable\r\n      task.name = cleanInput; // First three words\r\n\r\n      // const words = cleanInput.split(' ');\r\n      // task.name = words.slice(0, 3).join(' '); // First three words\r\n      // task.todo = words.slice(3).join(' '); // Rest of the words\r\n    }\r\n\r\n    task.overlord = overlord.taskId;\r\n\r\n    return task;\r\n  }\r\n\r\n  private generatePromptRequest(\r\n    treeChain: string,\r\n    tasks: TaskoratorTask[],\r\n    currentInput: string,\r\n    overlord: TaskoratorTask\r\n  ): string {\r\n    const mainPrompt = this.getMainPrompt();\r\n    const parts: string[] = [mainPrompt];\r\n\r\n    if (currentInput) {\r\n      parts.push(`Current user input: ${currentInput}`);\r\n    }\r\n\r\n    if (treeChain) {\r\n      parts.push(`Tree chain to current overlord: ${treeChain}`);\r\n    }\r\n\r\n    if (overlord?.name) {\r\n      parts.push(`Selected overlord name: ${overlord.name}`);\r\n    }\r\n\r\n    if (overlord?.why) {\r\n      parts.push(`Selected overlord why: ${overlord.why}`);\r\n    }\r\n\r\n    if (tasks && tasks.length > 0) {\r\n      const tasksList = tasks.map((t) => t.name).join(', ');\r\n      parts.push(`Tasks already there and are related: ${tasksList}`);\r\n    }\r\n\r\n    return parts.join('. ');\r\n  }\r\n\r\n  private getMainPrompt(): string {\r\n    return 'Please give me a list of tasks each on a new line. Try to suggest useful ideas without just mentioning what is in the request. Here is additional information for context: ';\r\n  }\r\n\r\n  private async getTreeChain(\r\n    overlord: TaskoratorTask,\r\n    tree: TaskTree\r\n  ): Promise<string> {\r\n    if (!tree || !overlord) {\r\n      return '';\r\n    }\r\n\r\n    return this.treeService.findPathStringToTask(overlord.taskId);\r\n  }\r\n\r\n  private async getOverlordChildren(\r\n    overlord: TaskoratorTask\r\n  ): Promise<TaskoratorTask[]> {\r\n    if (!overlord) {\r\n      return [];\r\n    }\r\n    const tasks = await this.taskListService.getOverlordTasks(overlord.taskId);\r\n    const filtered = tasks?.filter((t) => {\r\n      t.stage !== 'completed';\r\n    });\r\n\r\n    return filtered ? filtered : [];\r\n  }\r\n}\r\n",
            "styleUrl": "./gpt-create.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentInputService",
                        "type": "CurrentInputService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gptService",
                        "type": "GptRequestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gptTasksService",
                        "type": "GptTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentInputService",
                        "type": "CurrentInputService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gptService",
                        "type": "GptRequestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gptTasksService",
                        "type": "GptTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Component's HTML -->\r\n<div class=\"action-container\">\r\n  <button (click)=\"getSuggestion()\" [disabled]=\"isLoading\" class=\"task-btn\">\r\n    <mat-icon>search</mat-icon>\r\n  </button>\r\n\r\n  <div *ngIf=\"isLoading\" class=\"loading-container\">\r\n    <mat-progress-spinner\r\n      mode=\"indeterminate\"\r\n      diameter=\"20\"\r\n    ></mat-progress-spinner>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "GptTasksComponent",
            "id": "component-GptTasksComponent-f837c3c372aa2c94ac024a333e78556867228a6d0ad815d69233f21d3641aba0f21d1a647e5f97704782225048ae60ca4c8d41e070e38fb1cc8d7bd4f2559786",
            "file": "src/app/features/gpt/gpt-tasks/gpt-tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gpt-tasks",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./gpt-tasks.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "defaultValue": "this.gptTaskService.getTasks()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "approveTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { GptTasksService } from '../services/gpt-tasks.service';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { CommonModule, NgFor } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { TaskService } from '../../../services/sync-api-cache/task.service';\r\n\r\n@Component({\r\n  selector: 'app-gpt-tasks',\r\n  standalone: true,\r\n  imports: [NgFor, CommonModule, MatButtonModule, MatListModule, MatIcon],\r\n  templateUrl: './gpt-tasks.component.html',\r\n  styleUrl: './gpt-tasks.component.scss',\r\n})\r\nexport class GptTasksComponent {\r\n  tasks$ = this.gptTaskService.getTasks();\r\n\r\n  constructor(\r\n    private gptTaskService: GptTasksService,\r\n    private taskService: TaskService\r\n  ) {}\r\n\r\n  // addTask(task: Task) {\r\n  //   this.gptTaskService.addTask(task);\r\n  // }\r\n\r\n  removeTask(task: TaskoratorTask) {\r\n    this.gptTaskService.removeTask(task.taskId);\r\n  }\r\n\r\n  approveTask(task: TaskoratorTask) {\r\n    if (task.name.trim().length > 0) {\r\n      this.taskService.createTask(task);\r\n      this.removeTask(task);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./gpt-tasks.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gptTaskService",
                        "type": "GptTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "gptTaskService",
                        "type": "GptTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- task-list.component.html -->\r\n<div *ngFor=\"let task of tasks$ | async\" class=\"task-item\">\r\n  <div class=\"task-info\">\r\n    <span class=\"task-name\">{{ task.name }}</span>\r\n    <span class=\"task-todo\">{{ task.todo }}</span>\r\n    <span class=\"task-why\">{{ task.why }}</span>\r\n  </div>\r\n  <div class=\"task-actions\">\r\n    <button mat-button color=\"primary\" (click)=\"approveTask(task)\">\r\n      <mat-icon>check_circle</mat-icon>\r\n    </button>\r\n    <button mat-button color=\"warn\" (click)=\"removeTask(task)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HorizontalNavigationComponent",
            "id": "component-HorizontalNavigationComponent-979094cbb5e8ecbf113ba1fc166b4751f8a38c7cbae6f027fda890a88c4657cbcdb19a121ed46bbfed6ca62d5fde225d9ecfdf3153e139816a50e7a0bd251e02",
            "file": "src/app/components/horizontal-navigation/horizontal-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horizontal-navigation",
            "styleUrls": [
                "./horizontal-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizontal-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "childItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drawer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isCompact",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isHandset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "navItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "parentItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "selectedChild",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedFeature",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "viewingChildren",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "canGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkViewport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBackClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChildClick",
                    "args": [
                        {
                            "name": "child",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "child",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNavItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onParentClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', undefined"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "showTopLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatDivider"
                },
                {
                    "name": "MatNavList"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "OverlordNavigatorComponent",
                    "type": "component"
                },
                {
                    "name": "SearchCreateComponent",
                    "type": "component"
                },
                {
                    "name": "NotificationComponent",
                    "type": "component"
                },
                {
                    "name": "NotificationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDrawer, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { RouteMetadata } from '../../app.routes-models';\r\nimport { NavigationService } from '../../services/navigation.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { OverlordNavigatorComponent } from '../overlord-navigator/overlord-navigator.component';\r\nimport { SearchCreateComponent } from '../search-create/search-create.component';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { NotificationComponent } from '../notification/notification.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDivider } from '@angular/material/divider';\r\nimport { MatNavList } from '@angular/material/list';\r\n\r\n@Component({\r\n  selector: 'app-horizontal-navigation',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatSidenavModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatToolbarModule,\r\n    MatDivider,\r\n    MatNavList,\r\n    RouterOutlet,\r\n    OverlordNavigatorComponent,\r\n    SearchCreateComponent,\r\n    NotificationComponent,\r\n    NotificationComponent,\r\n  ],\r\n  templateUrl: './horizontal-navigation.component.html',\r\n  styleUrls: ['./horizontal-navigation.component.scss'],\r\n})\r\nexport class HorizontalNavigationComponent implements OnInit {\r\n  navItems: { path: string; metadata: RouteMetadata }[] = [];\r\n  viewingChildren = false;\r\n  selectedFeature: string | null = null;\r\n  selectedChild: string | null = null;\r\n  isHandset = false;\r\n\r\n  @ViewChild('drawer') drawer!: MatDrawer;\r\n  isCompact: boolean = false;\r\n\r\n  constructor(\r\n    private navigationService: NavigationService,\r\n    private router: Router,\r\n    private breakpointObserver: BreakpointObserver\r\n  ) {}\r\n\r\n  parentItems: { path: string; metadata: RouteMetadata }[] = [];\r\n  childItems: { path: string; metadata: RouteMetadata }[] = [];\r\n\r\n  ngOnInit() {\r\n    this.parentItems = this.navigationService.getTopLevelFeatures();\r\n\r\n    this.breakpointObserver\r\n      .observe([Breakpoints.Handset])\r\n      .subscribe((result) => {\r\n        this.isHandset = result.matches;\r\n      });\r\n  }\r\n\r\n  onParentClick(item: { path: string; metadata: RouteMetadata }) {\r\n    const childrenPaths = this.navigationService.getChildrenPaths(item.path);\r\n    this.childItems = childrenPaths.map((child) => ({\r\n      path: `${item.path}/${child}`,\r\n      metadata: this.navigationService.getRouteMetadata(child),\r\n    }));\r\n    this.viewingChildren = !!this.childItems.length;\r\n    this.router.navigate([item.path]);\r\n  }\r\n\r\n  onChildClick(child: { path: string; metadata: RouteMetadata }) {\r\n    this.router.navigate([child.path]);\r\n    if (this.isHandset) this.drawer.close();\r\n  }\r\n\r\n  @HostListener('window:resize', [])\r\n  onResize() {\r\n    this.checkViewport();\r\n  }\r\n\r\n  checkViewport() {\r\n    this.isCompact = window.innerWidth < 600;\r\n  }\r\n\r\n  toggleDrawer() {\r\n    if (this.drawer) {\r\n      this.drawer.toggle();\r\n    }\r\n  }\r\n\r\n  showTopLevel() {\r\n    this.navItems = this.navigationService.getTopLevelFeatures();\r\n    this.viewingChildren = false;\r\n  }\r\n\r\n  onNavItemClick(item: { path: string; metadata: RouteMetadata }) {\r\n    const childrenPaths = this.navigationService.getChildrenPaths(item.path);\r\n\r\n    if (childrenPaths.length > 0) {\r\n      this.navItems = childrenPaths.map((childPath) => ({\r\n        path: `${item.path}/${childPath}`,\r\n        metadata: item.metadata,\r\n      }));\r\n      this.viewingChildren = true;\r\n      this.router.navigate([item.path]);\r\n    } else {\r\n      this.router.navigate([item.path]);\r\n      if (this.isHandset && this.drawer) {\r\n        this.drawer.close();\r\n      }\r\n    }\r\n  }\r\n\r\n  onBackClick() {\r\n    this.showTopLevel();\r\n  }\r\n\r\n  isSelected(path: string) {\r\n    return this.router.url.startsWith('/' + path);\r\n  }\r\n\r\n  canGoBack() {\r\n    return this.viewingChildren;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Toolbar */\r\n.nav-alt {\r\n  font-size: 12px;\r\n  color: rgb(88, 87, 87);\r\n  margin-top: -4px;\r\n  display: block;\r\n}\r\n\r\n.toolbar {\r\n  background-color: #7d4fbf;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 64px;\r\n  padding: 0 8px;\r\n\r\n  button {\r\n    margin-right: 5px;\r\n  }\r\n\r\n  .app-title {\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    flex-grow: 1; /* Push search bar to the right */\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    text-align: center;\r\n  }\r\n\r\n  .app-icon {\r\n    height: 40px;\r\n    margin-right: auto;\r\n  }\r\n\r\n  // .search-bar {\r\n  //   margin-left: auto;\r\n  //   max-width: 100px;\r\n  //   flex-grow: 1;\r\n  //   display: flex;\r\n  //   align-items: center;\r\n  //   justify-content: flex-end;\r\n  // }\r\n\r\n  @media (max-width: 600px) {\r\n    // .app-title {\r\n    //   display: none; /* Hide title on smaller screens */\r\n    // }\r\n\r\n    .app-icon {\r\n      display: inline-block; /* Show icon on mobile */\r\n    }\r\n\r\n    // .search-bar {\r\n    //   display: none; /* Hide search bar by default */\r\n    // }\r\n\r\n    // .search-bar.active {\r\n    //   display: flex; /* Show search bar when toggled */\r\n    //   width: 100%;\r\n    //   justify-content: center;\r\n    // }\r\n  }\r\n}\r\n\r\n/* Ensure the sidenav container takes full height */\r\n.sidenav-container {\r\n  height: calc(\r\n    100vh - 64px\r\n  ); // Adjust to take full viewport minus toolbar height\r\n  display: flex;\r\n  flex-direction: column;\r\n  // background-color: #7f60ab;\r\n}\r\n\r\n/* Sidenav Styling */\r\n.sidenav {\r\n  width: 250px;\r\n  background-color: #f8f9fa;\r\n  border-right: 1px solid #e0e0e0;\r\n  display: flex;\r\n  flex-direction: column; // Flexbox layout for consistent spacing\r\n}\r\n\r\n/* Navigation list */\r\n.nav-list {\r\n  list-style: none;\r\n  padding: 0px;\r\n  margin: 0;\r\n  flex-grow: 1; // Ensure the list expands to fill available space\r\n  overflow-y: auto; // Allow scrolling if items overflow\r\n\r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 12px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n\r\n    mat-icon {\r\n      margin-right: 16px;\r\n      font-size: 24px;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: #eceff1;\r\n    }\r\n\r\n    &.selected {\r\n      background-color: #7f60ab;\r\n      color: white;\r\n\r\n      mat-icon {\r\n        color: white;\r\n      }\r\n      .nav-alt {\r\n        color: rgb(222, 220, 220);\r\n      }\r\n    }\r\n\r\n    .nav-text {\r\n      flex-grow: 1;\r\n    }\r\n  }\r\n}\r\n\r\n/* Back Button */\r\n.back-button {\r\n  width: 100%;\r\n  text-align: left;\r\n  margin-top: 16px;\r\n  color: #6200ea;\r\n\r\n  mat-icon {\r\n    margin-right: 8px;\r\n  }\r\n}\r\n\r\n/* Floating Button for Mobile */\r\n// .nav-fab {\r\n//   display: none; // Hidden by default (shown only on mobile)\r\n// }\r\n\r\n@media (max-width: 600px) {\r\n  .nav-fab {\r\n    display: inline-flex; // Show the floating button on mobile\r\n  }\r\n\r\n  /* Ensure the navigation text remains visible on mobile */\r\n  .nav-list .nav-text {\r\n    display: block; // Show the text for nav items on mobile\r\n  }\r\n\r\n  /* Sidenav width for mobile */\r\n  .sidenav {\r\n    width: 250px; // Keep the same width on mobile\r\n  }\r\n}\r\n\r\n// @media (min-width: 600px) {\r\n//   .nav-fab {\r\n//     display: none; // Hide the floating button on larger screens\r\n//   }\r\n// }\r\n",
                    "styleUrl": "./horizontal-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar\r\n  color=\"primary\"\r\n  class=\"mat-elevation-z4 flex justify-between items-center px-4\"\r\n>\r\n  <div class=\"flex items-center gap-2\">\r\n    <button mat-icon-button (click)=\"toggleDrawer()\">\r\n      <mat-icon>menu</mat-icon>\r\n    </button>\r\n    <span class=\"font-semibold text-lg tracking-wide\">Taskorator</span>\r\n  </div>\r\n  <div class=\"flex items-center gap-2\">\r\n    <app-notification></app-notification>\r\n    <app-search-create></app-search-create>\r\n  </div>\r\n</mat-toolbar>\r\n\r\n<mat-sidenav-container class=\"h-[calc(100vh-64px)]\">\r\n  <mat-sidenav\r\n    #drawer\r\n    [mode]=\"isHandset ? 'over' : 'side'\"\r\n    [opened]=\"!isHandset || drawer.opened\"\r\n    class=\"!w-[320px] lg:!w-[400px] max-w-full bg-base-100\"\r\n  >\r\n    <div class=\"flex h-full w-full overflow-hidden\">\r\n      <!-- Parent list -->\r\n      <ul class=\"w-1/2 overflow-y-auto p-2 break-words\">\r\n        <li\r\n          *ngFor=\"let item of parentItems\"\r\n          class=\"p-2 rounded cursor-pointer hover:bg-base-200 text-sm truncate\"\r\n          [class.bg-primary]=\"router.url.startsWith('/' + item.path)\"\r\n          [class.text-white]=\"router.url.startsWith('/' + item.path)\"\r\n          (click)=\"onParentClick(item)\"\r\n        >\r\n          <div class=\"flex items-center gap-2\">\r\n            <mat-icon>{{ item.metadata.icon || \"folder\" }}</mat-icon>\r\n            <span class=\"whitespace-normal break-words\">{{\r\n              item.metadata.title\r\n            }}</span>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n\r\n      <!-- Child list -->\r\n      <ul\r\n        class=\"w-1/2 overflow-y-auto border-l border-base-300 p-2 break-words\"\r\n        *ngIf=\"viewingChildren\"\r\n      >\r\n        <li\r\n          *ngFor=\"let child of childItems\"\r\n          class=\"p-2 rounded cursor-pointer hover:bg-base-200 text-sm truncate\"\r\n          [class.bg-accent]=\"router.url.startsWith('/' + child.path)\"\r\n          [class.text-white]=\"router.url.startsWith('/' + child.path)\"\r\n          (click)=\"onChildClick(child)\"\r\n        >\r\n          <div class=\"flex items-center gap-2\">\r\n            <mat-icon>chevron_right</mat-icon>\r\n            <span class=\"whitespace-normal break-words\">{{\r\n              child.metadata.altName || child.metadata.title\r\n            }}</span>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content class=\"p-4\">\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "HorizontalNavigationComponentTest",
            "id": "component-HorizontalNavigationComponentTest-6184dd3e7c8b6f21db6c8db8c65f0326fd7b2a9453e0055a83f2dae246731d2022bcf5642e9b5775d9941fb704b841bd8d3c580d4369ba616db1fada540b6bcb",
            "file": "src/app/components/horizontal-navigation/horizontal-navigation-test/horizontal-navigation-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horizontal-navigation",
            "styleUrls": [
                "../horizontal-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizontal-navigation-test.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drawer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isCompact",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isHandset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "navItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "searchActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedChild",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedFeature",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "viewingChildren",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "canGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkViewport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeDrawerOnMobile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBackClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn to the top-level navigation.\n",
                    "description": "<p>Return to the top-level navigation.</p>\n"
                },
                {
                    "name": "onNavItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow children for the selected feature or navigate directly.\n",
                    "description": "<p>Show children for the selected feature or navigate directly.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3110,
                                "end": 3114,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3104,
                                "end": 3109,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The selected navigation item.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', undefined"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "showTopLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow top-level features.\n",
                    "description": "<p>Show top-level features.</p>\n"
                },
                {
                    "name": "toggleDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TaskNavigatorTestComponent",
                    "type": "component"
                },
                {
                    "name": "SearchOverlordTestComponent",
                    "type": "component"
                },
                {
                    "name": "SearchCreateTestComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { MatDrawer, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { RouteMetadata } from '../../../app.routes-models';\r\nimport { NavigationBuilderService } from '../../../services/navigation-builder.service';\r\nimport { TaskNavigatorTestComponent } from '../../task-navigator/task-navigator-test/task-navigator-test.component';\r\nimport { SearchOverlordComponent } from '../../search-overlord/search-overlord.component';\r\nimport { SearchOverlordTestComponent } from '../../search-overlord/search-overlord-test.component';\r\nimport { SearchCreateComponent } from '../../search-create/search-create.component';\r\nimport { SearchCreateTestComponent } from '../../search-create/search-create-test.component';\r\n\r\n@Component({\r\n  selector: 'app-horizontal-navigation',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatSidenavModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatToolbarModule,\r\n    RouterOutlet,\r\n    TaskNavigatorTestComponent,\r\n    SearchOverlordTestComponent,\r\n    SearchCreateTestComponent,\r\n  ],\r\n  templateUrl: './horizontal-navigation-test.component.html',\r\n  styleUrls: ['../horizontal-navigation.component.scss'],\r\n})\r\nexport class HorizontalNavigationComponentTest implements OnInit {\r\n  navItems: { path: string; metadata: RouteMetadata }[] = [];\r\n  viewingChildren = false;\r\n  isHandset = false;\r\n  searchActive = false;\r\n  isCompact = false; // Determines if the toolbar is in compact mode\r\n\r\n  selectedFeature = '';\r\n  selectedChild = '';\r\n\r\n  @ViewChild('drawer') drawer!: MatDrawer;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private navigationService: NavigationBuilderService,\r\n    private breakpointObserver: BreakpointObserver\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.showTopLevel(); // Initialize at top level\r\n    this.breakpointObserver\r\n      .observe([Breakpoints.Handset])\r\n      .subscribe((result) => {\r\n        this.isHandset = result.matches;\r\n      });\r\n    this.checkViewport();\r\n  }\r\n\r\n  @HostListener('window:resize', [])\r\n  onResize() {\r\n    this.checkViewport();\r\n  }\r\n\r\n  checkViewport() {\r\n    this.isCompact = window.innerWidth < 600; // Adjust breakpoint as needed\r\n  }\r\n\r\n  toggleSearch() {\r\n    this.searchActive = !this.searchActive;\r\n  }\r\n  isSelected(path: string) {\r\n    return this.router.url === path;\r\n  }\r\n\r\n  /**\r\n   * Show top-level features.\r\n   */\r\n  showTopLevel() {\r\n    this.navItems = this.navigationService\r\n      .getTopLevelFeatures()\r\n      .map((feature) => ({\r\n        path: feature.path,\r\n        metadata: feature.metadata,\r\n      }));\r\n    this.viewingChildren = false;\r\n  }\r\n\r\n  /**\r\n   * Show children for the selected feature or navigate directly.\r\n   * @param item - The selected navigation item.\r\n   */\r\n  onNavItemClick(item: { path: string; metadata: RouteMetadata }) {\r\n    const childrenPaths = this.navigationService.getChildrenPaths(item.path);\r\n\r\n    if (childrenPaths.length > 0) {\r\n      // its a feature\r\n\r\n      this.navItems = childrenPaths.map((childPath) => ({\r\n        path: `${item.path}/${childPath}`,\r\n        metadata: this.navigationService.getRouteMetadata(childPath),\r\n      }));\r\n      this.viewingChildren = true;\r\n      this.selectedChild = item.path;\r\n      // prenavigate automatically to default path for convenience\r\n      // or inconvenience\r\n      this.router.navigate([item.path]);\r\n    } else {\r\n      // child of feature\r\n      this.router.navigate([item.path]); // Navigate directly\r\n      this.closeDrawerOnMobile();\r\n      this.selectedFeature = item.path;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return to the top-level navigation.\r\n   */\r\n  onBackClick() {\r\n    this.showTopLevel();\r\n  }\r\n\r\n  toggleDrawer() {\r\n    if (this.drawer) {\r\n      this.drawer.toggle();\r\n    }\r\n  }\r\n\r\n  closeDrawerOnMobile() {\r\n    if (this.isHandset && this.drawer) {\r\n      this.drawer.close();\r\n    }\r\n  }\r\n\r\n  canGoBack() {\r\n    return this.viewingChildren;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Toolbar */\r\n.nav-alt {\r\n  font-size: 12px;\r\n  color: rgb(88, 87, 87);\r\n  margin-top: -4px;\r\n  display: block;\r\n}\r\n\r\n.toolbar {\r\n  background-color: #7d4fbf;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 64px;\r\n  padding: 0 8px;\r\n\r\n  button {\r\n    margin-right: 5px;\r\n  }\r\n\r\n  .app-title {\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    flex-grow: 1; /* Push search bar to the right */\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    text-align: center;\r\n  }\r\n\r\n  .app-icon {\r\n    height: 40px;\r\n    margin-right: auto;\r\n  }\r\n\r\n  // .search-bar {\r\n  //   margin-left: auto;\r\n  //   max-width: 100px;\r\n  //   flex-grow: 1;\r\n  //   display: flex;\r\n  //   align-items: center;\r\n  //   justify-content: flex-end;\r\n  // }\r\n\r\n  @media (max-width: 600px) {\r\n    // .app-title {\r\n    //   display: none; /* Hide title on smaller screens */\r\n    // }\r\n\r\n    .app-icon {\r\n      display: inline-block; /* Show icon on mobile */\r\n    }\r\n\r\n    // .search-bar {\r\n    //   display: none; /* Hide search bar by default */\r\n    // }\r\n\r\n    // .search-bar.active {\r\n    //   display: flex; /* Show search bar when toggled */\r\n    //   width: 100%;\r\n    //   justify-content: center;\r\n    // }\r\n  }\r\n}\r\n\r\n/* Ensure the sidenav container takes full height */\r\n.sidenav-container {\r\n  height: calc(\r\n    100vh - 64px\r\n  ); // Adjust to take full viewport minus toolbar height\r\n  display: flex;\r\n  flex-direction: column;\r\n  // background-color: #7f60ab;\r\n}\r\n\r\n/* Sidenav Styling */\r\n.sidenav {\r\n  width: 250px;\r\n  background-color: #f8f9fa;\r\n  border-right: 1px solid #e0e0e0;\r\n  display: flex;\r\n  flex-direction: column; // Flexbox layout for consistent spacing\r\n}\r\n\r\n/* Navigation list */\r\n.nav-list {\r\n  list-style: none;\r\n  padding: 0px;\r\n  margin: 0;\r\n  flex-grow: 1; // Ensure the list expands to fill available space\r\n  overflow-y: auto; // Allow scrolling if items overflow\r\n\r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 12px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n\r\n    mat-icon {\r\n      margin-right: 16px;\r\n      font-size: 24px;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: #eceff1;\r\n    }\r\n\r\n    &.selected {\r\n      background-color: #7f60ab;\r\n      color: white;\r\n\r\n      mat-icon {\r\n        color: white;\r\n      }\r\n      .nav-alt {\r\n        color: rgb(222, 220, 220);\r\n      }\r\n    }\r\n\r\n    .nav-text {\r\n      flex-grow: 1;\r\n    }\r\n  }\r\n}\r\n\r\n/* Back Button */\r\n.back-button {\r\n  width: 100%;\r\n  text-align: left;\r\n  margin-top: 16px;\r\n  color: #6200ea;\r\n\r\n  mat-icon {\r\n    margin-right: 8px;\r\n  }\r\n}\r\n\r\n/* Floating Button for Mobile */\r\n// .nav-fab {\r\n//   display: none; // Hidden by default (shown only on mobile)\r\n// }\r\n\r\n@media (max-width: 600px) {\r\n  .nav-fab {\r\n    display: inline-flex; // Show the floating button on mobile\r\n  }\r\n\r\n  /* Ensure the navigation text remains visible on mobile */\r\n  .nav-list .nav-text {\r\n    display: block; // Show the text for nav items on mobile\r\n  }\r\n\r\n  /* Sidenav width for mobile */\r\n  .sidenav {\r\n    width: 250px; // Keep the same width on mobile\r\n  }\r\n}\r\n\r\n// @media (min-width: 600px) {\r\n//   .nav-fab {\r\n//     display: none; // Hide the floating button on larger screens\r\n//   }\r\n// }\r\n",
                    "styleUrl": "../horizontal-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar class=\"toolbar\">\r\n  <!-- Conditional Rendering: Show all items -->\r\n  <ng-container *ngIf=\"!isCompact\">\r\n    <!-- Menu Button -->\r\n    <button mat-icon-button (click)=\"toggleDrawer()\">\r\n      <mat-icon>menu</mat-icon>\r\n    </button>\r\n\r\n    <!-- App Title -->\r\n    <span class=\"app-title\">Taskorator</span>\r\n\r\n    <!-- Search Toggle Button -->\r\n    <app-search-create-test></app-search-create-test>\r\n  </ng-container>\r\n\r\n  <!-- Compact View: One item at a time -->\r\n  <ng-container *ngIf=\"isCompact\">\r\n    <button mat-icon-button (click)=\"toggleDrawer()\">\r\n      <mat-icon>menu</mat-icon>\r\n    </button>\r\n    <app-search-create-test></app-search-create-test>\r\n  </ng-container>\r\n</mat-toolbar>\r\n\r\n<!-- Main Sidenav Container -->\r\n<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav\r\n    #drawer\r\n    [mode]=\"isCompact ? 'over' : 'side'\"\r\n    [opened]=\"!isCompact || drawer.opened\"\r\n    class=\"sidenav\"\r\n  >\r\n    <ul class=\"nav-list\">\r\n      <li\r\n        *ngFor=\"let item of navItems\"\r\n        [class.selected]=\"isSelected(item.path)\"\r\n        (click)=\"onNavItemClick(item)\"\r\n      >\r\n        <mat-icon>{{ item.metadata.icon }}</mat-icon>\r\n        <span class=\"nav-text\">{{ item.metadata.title }}</span>\r\n        <span class=\"nav-alt\">{{ item.metadata.altName }}</span>\r\n      </li>\r\n    </ul>\r\n    <button\r\n      *ngIf=\"canGoBack()\"\r\n      mat-button\r\n      class=\"back-button\"\r\n      (click)=\"onBackClick()\"\r\n    >\r\n      <mat-icon>arrow_back</mat-icon>\r\n      <span>Back</span>\r\n    </button>\r\n  </mat-sidenav>\r\n\r\n  <!-- Main Content Area -->\r\n  <mat-sidenav-content>\r\n    <!-- <div *ngIf=\"isHandset\" class=\"mobile-overlord-navigator\">\r\n      <app-overlord-navigator></app-overlord-navigator>\r\n    </div> -->\r\n    <!-- <router-outlet></router-outlet> -->\r\n    <app-task-navigator-test [showArtificer]=\"true\"></app-task-navigator-test>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "ImportExportComponent",
            "id": "component-ImportExportComponent-4a4f8adc6b8568f28edfa4d3f96c41a3c6deec0016d242a6b804c35dc37643b7be79daef94aaf294cddbf6284652cbc1d186bb8e8250b2d60935eeaa23155536",
            "file": "src/app/features/core/citadel/import-export/import-export.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-export",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./import-export.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-import-export',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './import-export.component.html',\r\n  styleUrl: './import-export.component.scss'\r\n})\r\nexport class ImportExportComponent {\r\n\r\n}\r\n",
            "styleUrl": "./import-export.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>import-export works!</p>\r\n"
        },
        {
            "name": "InputToTasksComponent",
            "id": "component-InputToTasksComponent-d21ffe737e9de9ae30f038d2a7c94f318117836fa717c47fbbce87ef30973b4a7bdb69adb756d56944a6b6b9766b14582d6f0108a2d583e80d87ab0f05974247",
            "file": "src/app/features/core/crucible/input-to-tasks/input-to-tasks/input-to-tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-to-tasks",
            "styleUrls": [
                "./input-to-tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-to-tasks.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "overlord",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "TaskoratorTask | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isAutoParse",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isFilterUniques",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "isFunctionsWithTypes",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isLongNamesShortened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectedOverlord",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "taskSummary",
                    "defaultValue": "{\r\n    taskCount: 0,\r\n    uniqueTaskCount: 0,\r\n    inputType: TextType.UNKNOWN,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterUniques",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateUniqueId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "importTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "importToOverlord",
                    "args": [
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "overlord",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importToSelectedOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNewOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "updatedTasks",
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4458,
                                "end": 4470,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updatedTasks"
                            },
                            "type": "TaskoratorTask[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4452,
                                "end": 4457,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>come from staged task list allowing us delete them easily</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "StagedTaskListComponent",
                    "type": "component"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  TaskoratorTask,\r\n  ExtendedTask,\r\n} from '../../../../../models/taskModelManager';\r\nimport { InputToTasksService } from '../services/input-to-tasks.service';\r\nimport { StagedTaskListComponent } from '../../../../../components/task/staged-task-list/staged-task-list.component';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { TextType } from '../services/text-type-detector.service';\r\nimport { TaskUtilityService } from '../../../../../services/tasks/task-utility.service';\r\nimport { TaskBatchService } from '../../../../../services/sync-api-cache/task-batch.service';\r\n\r\n@Component({\r\n  selector: 'app-input-to-tasks',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    StagedTaskListComponent,\r\n    MatFormField,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  templateUrl: './input-to-tasks.component.html',\r\n  styleUrls: ['./input-to-tasks.component.scss'],\r\n})\r\nexport class InputToTasksComponent implements OnInit {\r\n  inputText = '';\r\n  tasks: TaskoratorTask[] = [];\r\n  taskSummary: {\r\n    taskCount: number;\r\n    uniqueTaskCount: number;\r\n    inputType: TextType | null;\r\n  } = {\r\n    taskCount: 0,\r\n    uniqueTaskCount: 0,\r\n    inputType: TextType.UNKNOWN,\r\n  };\r\n  selectedOverlord: TaskoratorTask | null = null;\r\n  isAutoParse = true;\r\n  isFunctionsWithTypes = true;\r\n  isLongNamesShortened: boolean = true;\r\n  isFilterUniques: boolean = true;\r\n  @Input() overlord: TaskoratorTask | null = null;\r\n\r\n  constructor(\r\n    private inputToTasksService: InputToTasksService,\r\n    private utilityService: TaskUtilityService,\r\n    private taskBatchService: TaskBatchService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.selectedOverlord = { name: 'Default Overlord' } as ExtendedTask;\r\n\r\n    if (!this.overlord) {\r\n      this.utilityService.getSelectedOverlord().subscribe((t) => {\r\n        if (!t) return;\r\n        this.selectedOverlord = t;\r\n      });\r\n    }\r\n    if (this.overlord) {\r\n      this.setNewOverlord();\r\n    }\r\n  }\r\n\r\n  setNewOverlord() {\r\n    this.selectedOverlord = this.overlord;\r\n  }\r\n\r\n  onInputChange(): void {\r\n    if (this.isAutoParse) {\r\n      this.parseTasks();\r\n    }\r\n  }\r\n\r\n  parseTasks(): void {\r\n    this.inputToTasksService.setInput(\r\n      this.inputText,\r\n      this.isAutoParse,\r\n      this.isFunctionsWithTypes,\r\n      this.isLongNamesShortened\r\n    );\r\n    // this.updateSummary();\r\n    this.taskSummary = this.inputToTasksService.getTaskSummary();\r\n    this.tasks = this.inputToTasksService\r\n      .parseTasks(this.isFunctionsWithTypes, this.isLongNamesShortened)\r\n      .map((task) => ({\r\n        ...task,\r\n        taskId: task.taskId === '0' ? this.generateUniqueId() : task.taskId,\r\n      }));\r\n\r\n    if (this.isFilterUniques) {\r\n      this.filterUniques();\r\n    }\r\n  }\r\n\r\n  private generateUniqueId(): string {\r\n    return Math.random().toString(36).substring(2, 9);\r\n  }\r\n\r\n  filterUniques(): void {\r\n    const uniqueTaskNames = new Set<string>();\r\n    this.tasks = this.tasks.filter((task) => {\r\n      if (uniqueTaskNames.has(task.name)) {\r\n        return false; // Duplicate, exclude from filtered list\r\n      }\r\n      uniqueTaskNames.add(task.name); // Mark this name as seen\r\n      return true; // Unique, include in filtered list\r\n    });\r\n  }\r\n\r\n  importTasks(): void {\r\n    if (!this.overlord) {\r\n      // selected overlord\r\n      this.importToSelectedOverlord();\r\n    } else {\r\n      // local overlord\r\n      this.importToOverlord(this.overlord);\r\n    }\r\n  }\r\n\r\n  importToSelectedOverlord() {\r\n    if (!this.selectedOverlord) {\r\n      alert('Select Overlord in search before creating tasks!');\r\n    } else {\r\n      if (!this.selectedOverlord.taskId) return;\r\n      this.importToOverlord(this.selectedOverlord);\r\n      // action completed, no need to allow re adding\r\n      this.clearInput();\r\n    }\r\n  }\r\n\r\n  importToOverlord(overlord: TaskoratorTask) {\r\n    this.tasks.forEach((t) => {\r\n      if (this.selectedOverlord?.taskId) t.overlord = overlord.taskId;\r\n    });\r\n    this.taskBatchService.createTaskBatch(this.tasks, overlord.taskId);\r\n  }\r\n\r\n  /**\r\n   * @param updatedTasks come from staged task list allowing us delete them easily\r\n   */\r\n  updateTasks(updatedTasks: TaskoratorTask[]): void {\r\n    this.tasks = updatedTasks;\r\n  }\r\n\r\n  clearInput(): void {\r\n    this.inputText = '';\r\n    this.tasks = [];\r\n    this.taskSummary = { taskCount: 0, uniqueTaskCount: 0, inputType: null };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".overlord {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  color: #007bff;\r\n}\r\n.task-importer {\r\n  max-width: 650px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    font-size: 1.5rem;\r\n    color: #333;\r\n  }\r\n\r\n  .input-section {\r\n    margin-bottom: 20px;\r\n\r\n    mat-form-field {\r\n      width: 100%;\r\n    }\r\n\r\n    .input-actions {\r\n      margin-top: 0px;\r\n      display: flex;\r\n      justify-content: right;\r\n      gap: 10px;\r\n    }\r\n  }\r\n\r\n  .toggles {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin-top: 10px;\r\n    padding: 10px;\r\n    background-color: #fff;\r\n    border-radius: 4px;\r\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\r\n\r\n    mat-slide-toggle {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n\r\n  .summary {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n    padding: 10px;\r\n    background-color: #fff;\r\n    border-radius: 4px;\r\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\r\n\r\n    div {\r\n      flex: 1;\r\n      p {\r\n        margin: 0;\r\n        font-size: 0.95rem;\r\n        color: #555;\r\n\r\n        strong {\r\n          color: #333;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .task-list {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .action-buttons {\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    button {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 5px;\r\n      min-width: 150px;\r\n      font-size: 1rem;\r\n\r\n      mat-icon {\r\n        font-size: 1.25rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-to-tasks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "inputToTasksService",
                        "type": "InputToTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilityService",
                        "type": "TaskUtilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "inputToTasksService",
                        "type": "InputToTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilityService",
                        "type": "TaskUtilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"task-importer\">\r\n  <h2>Mass Add Tasks</h2>\r\n\r\n  <!-- Input Section -->\r\n  <div class=\"input-section\">\r\n    <!-- Text Input -->\r\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n      <textarea\r\n        matInput\r\n        [(ngModel)]=\"inputText\"\r\n        placeholder=\"Enter tasks (CSV, JSON, list, or code)\"\r\n        (input)=\"onInputChange()\"\r\n        rows=\"1\"\r\n      ></textarea>\r\n    </mat-form-field>\r\n\r\n    <!-- Input Action Buttons -->\r\n    <div class=\"input-actions\">\r\n      <button\r\n        mat-icon-button\r\n        class=\"task-btn\"\r\n        color=\"primary\"\r\n        (click)=\"parseTasks()\"\r\n        aria-label=\"Parse Tasks\"\r\n      >\r\n        <mat-icon>check</mat-icon>\r\n      </button>\r\n      <button\r\n        mat-icon-button\r\n        class=\"task-btn\"\r\n        color=\"warn\"\r\n        (click)=\"clearInput()\"\r\n        aria-label=\"Clear Input\"\r\n      >\r\n        <mat-icon>clear</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Toggles -->\r\n    <div class=\"toggles\">\r\n      <mat-slide-toggle\r\n        [(ngModel)]=\"isAutoParse\"\r\n        color=\"primary\"\r\n        aria-label=\"Auto-Parse\"\r\n      >\r\n        Auto-Parse\r\n      </mat-slide-toggle>\r\n      <mat-slide-toggle\r\n        [(ngModel)]=\"isFunctionsWithTypes\"\r\n        color=\"primary\"\r\n        aria-label=\"With Function Types\"\r\n      >\r\n        With Function Types\r\n      </mat-slide-toggle>\r\n      <mat-slide-toggle\r\n        [(ngModel)]=\"isLongNamesShortened\"\r\n        color=\"primary\"\r\n        aria-label=\"Shorten Names\"\r\n      >\r\n        Names Shortened\r\n      </mat-slide-toggle>\r\n      <mat-slide-toggle\r\n        [(ngModel)]=\"isFilterUniques\"\r\n        color=\"primary\"\r\n        aria-label=\"Filter Uniques\"\r\n      >\r\n        Filter Uniques\r\n      </mat-slide-toggle>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Task Summary -->\r\n\r\n  <div class=\"summary\">\r\n    <div>\r\n      <p>\r\n        <strong>Input Type:</strong> {{ taskSummary.inputType || \"Unknown\" }}\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <p><strong>Total Tasks:</strong> {{ taskSummary.taskCount }}</p>\r\n      <p><strong>Unique Tasks:</strong> {{ taskSummary.uniqueTaskCount }}</p>\r\n    </div>\r\n  </div>\r\n  <p>\r\n    <strong>Target:</strong>\r\n    <span class=\"overlord\">{{ selectedOverlord?.name || \"Unknown\" }}</span>\r\n  </p>\r\n\r\n  <!-- Staged Task List -->\r\n  <div class=\"task-list\">\r\n    <app-staged-task-list [tasks]=\"tasks\" (tasksChange)=\"updateTasks($event)\">\r\n    </app-staged-task-list>\r\n  </div>\r\n\r\n  <!-- Save Button -->\r\n  <div class=\"action-buttons\">\r\n    <button\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"importTasks()\"\r\n      [disabled]=\"tasks.length === 0\"\r\n    >\r\n      <mat-icon>save</mat-icon>\r\n      Save Tasks\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LatestCreatedTaskListComponent",
            "id": "component-LatestCreatedTaskListComponent-3e696e6f16ddd7e7a92e3d25f79e1b40660b8a77f69686c836721ec08f64285e7547376d20c8f0ee1b154a989cb792ff867b4181d889b4959f12826ea5e2c851",
            "file": "src/app/features/core/sentinel/lists/latest-created-task-list/latest-created-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-latest-created-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./latest-created-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport {\r\n  TaskListRules,\r\n  TaskListKey,\r\n  TaskListType,\r\n  TaskListSubtype,\r\n} from '../../../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../../../services/tasks/task-list-rules.service';\r\n\r\n@Component({\r\n  selector: 'app-latest-created-task-list',\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  templateUrl: './latest-created-task-list.component.html',\r\n  styleUrl: './latest-created-task-list.component.scss',\r\n})\r\nexport class LatestCreatedTaskListComponent implements OnInit {\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListRulesService: TaskListRulesService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadTasks();\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.LATEST_CREATED,\r\n        data: TaskListSubtype.API,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./latest-created-task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- create task now is in search field on header area anyway -->\r\n<!-- <div class=\"center-horizontal\">\r\n  <div class=\"task-form-container\"><app-create-task></app-create-task></div>\r\n</div> -->\r\n<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n"
        },
        {
            "name": "LatestUpdatedTaskListComponent",
            "id": "component-LatestUpdatedTaskListComponent-6e0e072a141bc00051859fcd417c1671135c4c41850d5aa264acda20ec3bad1c966a5f38739183178c4da12d13150a37a67954137c5e80d99a5ba8274a4c9134",
            "file": "src/app/features/core/sentinel/lists/latest-updated-task-list/latest-updated-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-latest-updated-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./latest-updated-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport {\r\n  TaskListKey,\r\n  TaskListRules,\r\n  TaskListSubtype,\r\n  TaskListType,\r\n} from '../../../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../../../services/tasks/task-list-rules.service';\r\n\r\n@Component({\r\n  selector: 'app-latest-updated-task-list',\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  templateUrl: './latest-updated-task-list.component.html',\r\n  styleUrl: './latest-updated-task-list.component.scss',\r\n})\r\nexport class LatestUpdatedTaskListComponent implements OnInit {\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListRulesService: TaskListRulesService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadTasks();\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.LATEST_UPDATED,\r\n        data: TaskListSubtype.API,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./latest-updated-task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"center-horizontal\">\r\n  <div class=\"task-form-container\"><app-create-task></app-create-task></div>\r\n</div> -->\r\n<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-75613a871a6486f1fc37e6740852446f426ea12a098ad3fb419b2e9f3c3a0a47f965212ab0c5be0fd438dbb0344ff3d33bbe5d464f1d08a7d272808598117c31",
            "file": "src/app/features/core/gateway/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "userAuthInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthUser | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "userInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskUserInfo | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "delay",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGptApiKey",
                    "args": [
                        {
                            "name": "loggedInUser",
                            "type": "LoggedInUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loggedInUser",
                            "type": "LoggedInUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginOffline",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loginWithGmail",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popup",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TaskUserInfo } from '../../../../models/service-strategies/user';\r\nimport { LoggedInUser } from '../../../../models/user';\r\nimport { ErrorService } from '../../../../services/core/error.service';\r\nimport { RegistrationService } from '../../../../services/core/registration.service';\r\nimport { NavigationService } from '../../../../services/navigation.service';\r\nimport { SessionManagerService } from '../../../../services/session-manager.service';\r\nimport { CacheOrchestratorService } from '../../../../services/core/cache-orchestrator.service';\r\nimport {\r\n  appConfig,\r\n  NAVIGATION_CONFIG,\r\n  OTHER_CONFIG,\r\n} from '../../../../app.config';\r\nimport { AuthUser } from '../../../../models/service-strategies/auth-strategy.interface';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  email = '';\r\n  password = '';\r\n  isLoggedIn = false;\r\n  userInfo: TaskUserInfo | undefined;\r\n  userAuthInfo: AuthUser | undefined;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private registration: RegistrationService,\r\n    private navigationService: NavigationService,\r\n    private sessionManagerService: SessionManagerService,\r\n    private cacheService: CacheOrchestratorService,\r\n    private errorService: ErrorService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getAuth()\r\n      .getCurrentUser()\r\n      .subscribe((r) => {\r\n        if (!r) return;\r\n        this.userAuthInfo = r;\r\n        if (this.registration.isInitialized()) {\r\n          this.registration.getUserInfo().then((u) => {\r\n            this.userInfo = u;\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  delay(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async logout() {\r\n    this.getAuth().logOut();\r\n  }\r\n\r\n  getAuth() {\r\n    return this.sessionManagerService.getAuthStrategy();\r\n  }\r\n\r\n  async loginOffline() {\r\n    try {\r\n      this.cacheService.clearCache();\r\n      localStorage.removeItem(OTHER_CONFIG.OFFLINE_USER_ID);\r\n      const loggedInUser: LoggedInUser = await this.getAuth().login();\r\n\r\n      if (loggedInUser.isNewUser) {\r\n        console.log('New user detected.');\r\n        const userInfo = await this.registration.registerNewUser();\r\n        if (userInfo) {\r\n          userInfo.registered = true;\r\n          this.registration.updateUser(userInfo);\r\n          // offline no gpt\r\n          // this.handleGptApiKey(loggedInUser);\r\n        }\r\n      } else {\r\n        if (!this.userInfo?.registered) {\r\n          alert('registration failed');\r\n        }\r\n      }\r\n\r\n      const redirectUrl = await this.navigationService.getRedirectUrl();\r\n      if (redirectUrl) {\r\n        this.navigationService.clearRedirectUrl();\r\n        this.router.navigate([redirectUrl]);\r\n      } else {\r\n        this.router.navigate(['/' + NAVIGATION_CONFIG.ON_LOGIN_ROUTE_URL]); // Default route\r\n      }\r\n    } catch (error) {\r\n      this.error(error);\r\n      this.popup('Login failed. Please try again.');\r\n    }\r\n  }\r\n\r\n  async loginWithGmail(): Promise<void> {\r\n    try {\r\n      this.cacheService.clearCache();\r\n      localStorage.removeItem('test_user_id');\r\n      const loggedInUser: LoggedInUser = await this.getAuth().loginWithGoogle();\r\n\r\n      if (loggedInUser.isNewUser) {\r\n        console.log('New user detected.');\r\n        const userInfo = await this.registration.registerNewUser();\r\n        if (userInfo) {\r\n          userInfo.registered = true;\r\n          this.registration.updateUser(userInfo);\r\n          this.handleGptApiKey(loggedInUser);\r\n        }\r\n      } else {\r\n        if (!this.userInfo?.registered) {\r\n          alert('registration failed');\r\n        }\r\n      }\r\n\r\n      const redirectUrl = await this.navigationService.getRedirectUrl();\r\n      if (redirectUrl) {\r\n        this.navigationService.clearRedirectUrl();\r\n        this.router.navigate([redirectUrl]);\r\n      } else {\r\n        this.router.navigate(['/' + NAVIGATION_CONFIG.ON_LOGIN_ROUTE_URL]); // Default route\r\n      }\r\n    } catch (error) {\r\n      this.error(error);\r\n      this.popup('Login failed. Please try again.');\r\n    }\r\n  }\r\n\r\n  handleGptApiKey(loggedInUser: LoggedInUser) {\r\n    if (loggedInUser.isNewUser) return;\r\n    this.registration.getUserInfo().then((u) => {\r\n      if (!u) return;\r\n      if (u.canUseGpt) this.registration.generateApiKey();\r\n    });\r\n  }\r\n\r\n  login(email: string, password: string): void {\r\n    // Future implementation for email-password login\r\n  }\r\n\r\n  error(msg: unknown) {\r\n    this.errorService.error(msg);\r\n  }\r\n  popup(msg: string) {\r\n    this.errorService.popup(msg);\r\n  }\r\n  feedback(msg: string) {\r\n    this.errorService.feedback(msg);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 80vh;\r\n  background: #f0f2f5;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.login-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px; /* Adds space between buttons */\r\n}\r\n\r\n.btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  color: white;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #4285f4; /* Google blue */\r\n}\r\n\r\n.btn-danger {\r\n  background-color: #d32f2f; /* Red for danger actions */\r\n}\r\n\r\n.btn i.material-icons {\r\n  margin-right: 8px; /* Adds spacing between icon and text */\r\n}\r\n\r\n.btn:hover {\r\n  opacity: 0.9; /* Slight opacity change on hover for feedback */\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registration",
                        "type": "RegistrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionManagerService",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registration",
                        "type": "RegistrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionManagerService",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheOrchestratorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-container\">\n  <h2>Login</h2>\n  <form class=\"login-form\">\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"loginWithGmail()\">\n      <i class=\"material-icons\">login</i> Login with Google\n    </button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"loginOffline()\">\n      <i class=\"material-icons\">login</i> Use Offline\n    </button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"logout()\">\n      <i class=\"material-icons\">logout</i> Logout\n    </button>\n    <!-- <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteUser()\">\n      <i class=\"material-icons\">delete_forever</i> Delete User (test only)\n    </button> -->\n  </form>\n</div>\n<hr />\n<h3>UserInfo</h3>\n<p>{{ userInfo?.allowedTemplates }}</p>\n<p>{{ userInfo?.canCreate }}</p>\n<p>{{ userInfo?.canUseGpt }}</p>\n<p>{{ userInfo?.registered }}</p>\n<p>{{ userInfo?.role }}</p>\n<hr />\n<h3>UserAuthInfo</h3>\n<hr />\n<p>{{ userAuthInfo?.displayName }}</p>\n<p>{{ userAuthInfo?.email }}</p>\n<p>{{ userAuthInfo?.emailVerified }}</p>\n<p>{{ userAuthInfo?.isAnonymous }}</p>\n<p>{{ userAuthInfo?.isNewUser }}</p>\n<p>{{ userAuthInfo?.uid }}</p>\n"
        },
        {
            "name": "MassAddPopupComponent",
            "id": "component-MassAddPopupComponent-0f310a28eb64db06d5ee9ef1d61d6d9e627c4b2417da15e9104d4b544b0a8142906f527593ead60f854ea47f31c55e2e3a39ce82b8b8a44be6515241c1cc337a",
            "file": "src/app/components/mass-add-popup/mass-add-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mass-add-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./mass-add-popup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<MassAddPopupComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "overlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "InputToTasksComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatDialogActions"
                },
                {
                    "name": "MatDialogContent"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { InputToTasksComponent } from '../../features/core/crucible/input-to-tasks/input-to-tasks/input-to-tasks.component';\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n  MatDialog,\r\n  MatDialogActions,\r\n  MatDialogContent,\r\n} from '@angular/material/dialog';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\n\r\n@Component({\r\n  selector: 'app-mass-add-popup',\r\n  standalone: true,\r\n  imports: [InputToTasksComponent, MatIcon, MatDialogActions, MatDialogContent],\r\n  templateUrl: './mass-add-popup.component.html',\r\n  styleUrl: './mass-add-popup.component.scss',\r\n})\r\nexport class MassAddPopupComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MassAddPopupComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public overlord: TaskoratorTask\r\n  ) {}\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSave(): void {\r\n    console.log('OnSave popup mass import:');\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "styleUrl": "./mass-add-popup.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MassAddPopupComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlord",
                        "type": "TaskoratorTask",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MassAddPopupComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlord",
                        "type": "TaskoratorTask",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h2 mat-dialog-title class=\"dialog-title\">Mass Add</h2>\r\n<!-- <mat-dialog-title>Edit Task</mat-dialog-title> -->\r\n<mat-dialog-content>\r\n  <app-input-to-tasks [overlord]=\"overlord\"></app-input-to-tasks>\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <button\r\n    mat-icon-button\r\n    color=\"primary\"\r\n    style=\"color: rgb(15, 177, 75)\"\r\n    class=\"task-btn\"\r\n    (click)=\"onSave()\"\r\n    aria-label=\"Save Task\"\r\n  >\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "NextTaskManagerComponent",
            "id": "component-NextTaskManagerComponent-2ef9ffbd2c5ca168614e7ae421767e0cbac95e6ab7e69ae8408f763390a56170ff7efea8dc4ee481856aa9054cf6f1945f1cea8b5b07fba95b349e0706c48bc0",
            "file": "src/app/features/next-task-manager/next-task-manager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-next-task-manager",
            "styleUrls": [
                "./next-task-manager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./next-task-manager.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "initialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "latestNextTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "newTaskName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "createNextTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchLatestNextTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "LatestCreatedTaskListComponent",
                    "type": "component"
                },
                {
                    "name": "SearchCreateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { getDefaultTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgIf } from '@angular/common';\r\nimport { TaskUpdateService } from '../../services/tasks/task-update.service';\r\nimport { TaskListService } from '../../services/sync-api-cache/task-list.service';\r\nimport { SearchCreateComponent } from '../../components/search-create/search-create.component';\r\nimport { SessionManagerService } from '../../services/session-manager.service';\r\nimport { LatestCreatedTaskListComponent } from '../core/sentinel/lists/latest-created-task-list/latest-created-task-list.component';\r\n\r\n@Component({\r\n  selector: 'app-next-task-manager',\r\n  templateUrl: './next-task-manager.component.html',\r\n  styleUrls: ['./next-task-manager.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    NgIf,\r\n    LatestCreatedTaskListComponent,\r\n    SearchCreateComponent,\r\n  ],\r\n})\r\nexport class NextTaskManagerComponent implements OnInit {\r\n  newTaskName: string = '';\r\n  latestNextTasks: TaskoratorTask[] = [];\r\n  initialized: boolean = false;\r\n\r\n  constructor(\r\n    private taskService: TaskUpdateService,\r\n    private taskListService: TaskListService,\r\n    private sessionManager: SessionManagerService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.initialized = await this.sessionManager.waitForInitialization();\r\n\r\n    console.log('Session is ready:', this.sessionManager.getSessionType());\r\n    // Your component logic here\r\n    this.fetchLatestNextTasks();\r\n  }\r\n\r\n  createNextTask(): void {\r\n    const newTask: TaskoratorTask = getDefaultTask();\r\n\r\n    (newTask.name = this.newTaskName),\r\n      (newTask.type = 'next'),\r\n      this.taskService.create(newTask);\r\n    this.newTaskName = '';\r\n    // TODO: consider on register create base tasks that are often used, not just root\r\n    // 127: tasks\r\n    // 129 daily tasks\r\n    // ???\r\n    // this.taskService.createTask(newTask).then(() => {\r\n    //   this.newTaskName = ''; // Reset input field\r\n    // });\r\n  }\r\n\r\n  fetchLatestNextTasks(): void {\r\n    // TODO: USE TASK LIST SIMPLE SERVICE (WHY ??? don't remember)\r\n    this.taskListService.getLatestTasks().then((tasks) => {\r\n      if (!tasks) return;\r\n      this.latestNextTasks = tasks;\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./next-task-manager.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionManager",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionManager",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"component-width\" *ngIf=\"initialized\">\r\n  <h2>Next Task Manager</h2>\r\n  <app-search-create></app-search-create>\r\n  <app-latest-created-task-list></app-latest-created-task-list>\r\n</div>\r\n"
        },
        {
            "name": "NexusComponent",
            "id": "component-NexusComponent-7310eb71847e04ead918c25a552e8abfa18b8ef0739d3f4cc7aca3ec9e02fb4a6aa212a67ba80537ba3df96fd9c627b029e1ff537f6e4799ccf028c01528e329",
            "file": "src/app/features/core/nexus/nexus/nexus.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nexus",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nexus.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['nexus']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n\r\n@Component({\r\n  selector: 'app-nexus',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './nexus.component.html',\r\n  styleUrl: './nexus.component.scss',\r\n})\r\nexport class NexusComponent {\r\n  data = CORE_APP_METADATA['nexus'];\r\n}\r\n",
            "styleUrl": "./nexus.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>{{ data.title }}</h2>\r\n  <h3>{{ data.description }}</h3>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-3c92587f234efe72af66284ed31b36d20ea1145359dc7e789f744c0697fae85641d5aeed377ffecdb22bf25de312e052efc3e6bbe972f97da1a9ab09b595c5cd",
            "file": "src/app/components/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appTitle",
                    "defaultValue": "'Taskorator'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "feedbackUpdated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "message",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFeedbackView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ErrorService } from '../../services/core/error.service';\r\nimport { NgIf } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-notification',\r\n  standalone: true,\r\n  imports: [NgIf],\r\n  templateUrl: './notification.component.html',\r\n  styleUrls: ['./notification.component.scss'],\r\n})\r\nexport class NotificationComponent implements OnInit {\r\n  appTitle = 'Taskorator';\r\n  message: string | null = null;\r\n  feedbackUpdated = false;\r\n\r\n  constructor(private errorService: ErrorService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.errorService.getFeedback().subscribe((s) => {\r\n      if (s) {\r\n        this.message = s;\r\n        this.feedbackUpdated = true; // Trigger blinker\r\n        setTimeout(() => (this.feedbackUpdated = false), 3000); // Stop blinking after 3 seconds\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleFeedbackView(): void {\r\n    if (this.message) this.feedbackUpdated = !this.feedbackUpdated; // Clear the message on toggle\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  position: relative;\r\n\r\n  .app-title {\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    animation: fadeIn 0.5s ease-in-out;\r\n  }\r\n\r\n  .feedback-message {\r\n    font-size: 1.2rem;\r\n    font-weight: normal;\r\n    color: #ff5722;\r\n    animation: fadeIn 0.5s ease-in-out;\r\n    display: block; /* Default for large screens */\r\n  }\r\n\r\n  .blinker {\r\n    width: 12px;\r\n    height: 12px;\r\n    background-color: #ff5722;\r\n    border-radius: 50%;\r\n    animation: blinker 1.5s infinite;\r\n    display: none; /* Hidden by default */\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    .app-title {\r\n      display: none; /* Hide feedback message on small screens */\r\n    }\r\n    .feedback-message {\r\n      display: none; /* Hide feedback message on small screens */\r\n    }\r\n\r\n    .blinker {\r\n      display: inline-block; /* Show blinker on small screens */\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n@keyframes blinker {\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n",
                    "styleUrl": "./notification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"notification-container\" (click)=\"toggleFeedbackView()\">\r\n  <!-- App title when no feedback -->\r\n  <h1 *ngIf=\"!feedbackUpdated\" class=\"app-title\">\r\n    {{ appTitle }}\r\n  </h1>\r\n\r\n  <!-- Feedback message for larger screens -->\r\n  <div *ngIf=\"message && feedbackUpdated\" class=\"feedback-message\">\r\n    {{ message }}\r\n  </div>\r\n\r\n  <!-- Blinker for smaller screens -->\r\n  <div *ngIf=\"feedbackUpdated\" class=\"blinker\"></div>\r\n</div>\r\n"
        },
        {
            "name": "OverlordNavigatorComponent",
            "id": "component-OverlordNavigatorComponent-c098e85b8138f288d9a2eb9277383037adf13e7ad7e2d9df867a1d5b1fc554b4438eda0b4ab6cd80f9f7c74adbd3c7d4cd688bc147b65501fb37d74b10809925",
            "file": "src/app/components/overlord-navigator/overlord-navigator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-overlord-navigator",
            "styleUrls": [
                "./overlord-navigator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlord-navigator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedList",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedOverlord",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToSuperParent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIcon"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "SearchOverlordComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { TaskNavigatorUltraService } from '../../services/tasks/task-navigator-ultra.service';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { NgIf } from '@angular/common';\r\nimport { TaskService } from '../../services/sync-api-cache/task.service';\r\nimport { ExtendedTask } from '../../models/taskModelManager';\r\nimport { SearchOverlordComponent } from '../search-overlord/search-overlord.component';\r\nimport { TaskListRulesService } from '../../services/tasks/task-list-rules.service';\r\nimport { TaskViewService } from '../../services/tasks/task-view.service';\r\nimport { TaskListKey, TaskListRules } from '../../models/task-list-model';\r\nimport { SelectedListService } from '../../services/tasks/selected-list.service';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [MatIcon, NgIf, SearchOverlordComponent],\r\n  selector: 'app-overlord-navigator',\r\n  templateUrl: './overlord-navigator.component.html',\r\n  styleUrls: ['./overlord-navigator.component.scss'],\r\n})\r\nexport class OverlordNavigatorComponent implements OnInit {\r\n  selectedOverlord: ExtendedTask | null = null;\r\n  selectedList: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private taskNavigator: TaskNavigatorUltraService,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskService: TaskService,\r\n    private selectedListService: SelectedListService,\r\n    private taskListRules: TaskListRulesService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((id: string | null) => {\r\n        if (id)\r\n          this.taskService.getTaskById(id).then((o: ExtendedTask | null) => {\r\n            this.selectedOverlord = o;\r\n          });\r\n      });\r\n\r\n    this.selectedListService.selectedListKey$.subscribe(\r\n      (l: TaskListKey | null) => {\r\n        if (l) {\r\n          this.selectedList = this.taskListRules.getList(l);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  goToSuperParent(): void {\r\n    if (!this.selectedOverlord) return;\r\n    this.taskNavigator.previous(this.selectedOverlord.taskId);\r\n  }\r\n\r\n  goBack(): void {\r\n    if (!this.selectedOverlord) return;\r\n    this.taskNavigator.backToPrevious();\r\n  }\r\n\r\n  goToOverlord(): void {\r\n    if (!this.selectedOverlord) return;\r\n    this.taskNavigator.next(this.selectedOverlord.taskId);\r\n  }\r\n\r\n  goToRoot(): void {\r\n    this.taskNavigator.backToStart();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Navigation Buttons */\r\n\r\n// /* Search Overlord Component */\r\n// app-search-overlord {\r\n//   flex-grow: 1;\r\n//   max-width: 400px;\r\n//   min-width: 200px;\r\n\r\n//   @media (max-width: 600px) {\r\n//     width: 100%;\r\n//   }\r\n// }\r\n",
                    "styleUrl": "./overlord-navigator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskNavigator",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedListService",
                        "type": "SelectedListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRules",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "taskNavigator",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedListService",
                        "type": "SelectedListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRules",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"overlord-navigator-container\">\r\n  <!-- Overlord Name with Icon -->\r\n  <div class=\"overlord-title\">\r\n    <!-- <mat-icon class=\"overlord-icon\">account_tree</mat-icon> -->\r\n    <span class=\"overlord-name\">{{ selectedList?.title }}</span>\r\n    <span class=\"overlord-name\">/</span>\r\n    <span class=\"overlord-name\">{{ selectedOverlord?.name }}</span>\r\n  </div>\r\n\r\n  <!-- Navigation Buttons -->\r\n  <div class=\"overlord-navigator\">\r\n    <button mat-icon-button class=\"task-btn\" (click)=\"goToSuperParent()\">\r\n      <mat-icon>arrow_upward</mat-icon>\r\n    </button>\r\n    <button mat-icon-button class=\"task-btn\" (click)=\"goBack()\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <button mat-icon-button class=\"task-btn\" (click)=\"goToRoot()\">\r\n      <mat-icon>home</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "OverlordNavigatorComponentTest",
            "id": "component-OverlordNavigatorComponentTest-3aa3995e06faf16fe9f4e8b7dd9381bcc9c1c383c072a9e29d675a3ce733a07806107d00c459b69f166724081f7e4d27a0206b7d897e240dba4dc9b5d6514baa",
            "file": "src/app/components/overlord-navigator/overlord-navigator-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-overlord-navigator-test",
            "styleUrls": [
                "./overlord-navigator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlord-navigator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedList",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedOverlord",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToSuperParent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIcon"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "SearchOverlordComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { TaskNavigatorUltraService } from '../../services/tasks/task-navigator-ultra.service';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { NgIf } from '@angular/common';\r\nimport { TaskService } from '../../services/sync-api-cache/task.service';\r\nimport { ExtendedTask, getRootTaskObject } from '../../models/taskModelManager';\r\nimport { SearchOverlordComponent } from '../search-overlord/search-overlord.component';\r\nimport { TaskListRulesService } from '../../services/tasks/task-list-rules.service';\r\nimport { TaskViewService } from '../../services/tasks/task-view.service';\r\nimport { TaskListKey, TaskListRules } from '../../models/task-list-model';\r\nimport { SelectedListService } from '../../services/tasks/selected-list.service';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [MatIcon, NgIf, SearchOverlordComponent],\r\n  selector: 'app-overlord-navigator-test',\r\n  templateUrl: './overlord-navigator.component.html',\r\n  styleUrls: ['./overlord-navigator.component.scss'],\r\n})\r\nexport class OverlordNavigatorComponentTest implements OnInit {\r\n  selectedOverlord: ExtendedTask | null = null;\r\n  selectedList: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    // private taskNavigator: TaskNavigatorUltraService,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private selectedListService: SelectedListService,\r\n    private taskListRules: TaskListRulesService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((id: string | null) => {\r\n        if (id) {\r\n          const base = getRootTaskObject();\r\n          base.name = 'Selected Overlord Placeholder';\r\n          const e: ExtendedTask = {\r\n            isVisible: false,\r\n            animationState: 'highlighted',\r\n            ...base,\r\n          };\r\n          this.selectedOverlord = e;\r\n        }\r\n      });\r\n\r\n    this.selectedListService.selectedListKey$.subscribe(\r\n      (l: TaskListKey | null) => {\r\n        if (l) {\r\n          this.selectedList = this.taskListRules.getList(l);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  goToSuperParent(): void {\r\n    if (!this.selectedOverlord) return;\r\n    console.log('this.taskNavigator.previous(this.selectedOverlord.taskId);');\r\n  }\r\n\r\n  goBack(): void {\r\n    if (!this.selectedOverlord) return;\r\n    console.log('this.taskNavigator.backToPrevious();');\r\n  }\r\n\r\n  goToOverlord(): void {\r\n    if (!this.selectedOverlord) return;\r\n    console.log('this.taskNavigator.next(this.selectedOverlord.taskId);');\r\n  }\r\n\r\n  goToRoot(): void {\r\n    console.log('this.taskNavigator.backToStart()');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Navigation Buttons */\r\n\r\n// /* Search Overlord Component */\r\n// app-search-overlord {\r\n//   flex-grow: 1;\r\n//   max-width: 400px;\r\n//   min-width: 200px;\r\n\r\n//   @media (max-width: 600px) {\r\n//     width: 100%;\r\n//   }\r\n// }\r\n",
                    "styleUrl": "./overlord-navigator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedListService",
                        "type": "SelectedListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRules",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedListService",
                        "type": "SelectedListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRules",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"overlord-navigator-container\">\r\n  <!-- Overlord Name with Icon -->\r\n  <div class=\"overlord-title\">\r\n    <!-- <mat-icon class=\"overlord-icon\">account_tree</mat-icon> -->\r\n    <span class=\"overlord-name\">{{ selectedList?.title }}</span>\r\n    <span class=\"overlord-name\">/</span>\r\n    <span class=\"overlord-name\">{{ selectedOverlord?.name }}</span>\r\n  </div>\r\n\r\n  <!-- Navigation Buttons -->\r\n  <div class=\"overlord-navigator\">\r\n    <button mat-icon-button class=\"task-btn\" (click)=\"goToSuperParent()\">\r\n      <mat-icon>arrow_upward</mat-icon>\r\n    </button>\r\n    <button mat-icon-button class=\"task-btn\" (click)=\"goBack()\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <button mat-icon-button class=\"task-btn\" (click)=\"goToRoot()\">\r\n      <mat-icon>home</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PromoterComponent",
            "id": "component-PromoterComponent-66935b6d22fe200417b215769e89d6adc389435ba92e7a5c843369fb946b454be13ca63cf5e3139cbe4a626c6051055851f5384a2a6829484121e188618e4388",
            "file": "src/app/components/task/promoter/promoter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-promoter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./promoter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "TaskoratorTask | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "demote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "promote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { TaskUpdateService } from '../../../services/tasks/task-update.service';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-promoter',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n  templateUrl: './promoter.component.html',\r\n  styleUrl: './promoter.component.scss',\r\n})\r\nexport class PromoterComponent {\r\n  @Input() task: TaskoratorTask | undefined;\r\n\r\n  constructor(private taskService: TaskUpdateService) {}\r\n\r\n  promote() {\r\n    if (this.task) this.taskService.increasePriority(this.task);\r\n  }\r\n  demote() {\r\n    if (this.task) this.taskService.decreasePriority(this.task);\r\n  }\r\n}\r\n",
            "styleUrl": "./promoter.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"promoter\">\r\n  <button\r\n    class=\"task-btn add\"\r\n    mat-icon-button\r\n    aria-label=\"Increase priority\"\r\n    (click)=\"promote()\"\r\n  >\r\n    <mat-icon>expand_less</mat-icon>\r\n  </button>\r\n  <span class=\"priority-text\">{{ task?.priority }}</span>\r\n  <button\r\n    class=\"task-btn add\"\r\n    mat-icon-button\r\n    aria-label=\"Decrease priority\"\r\n    (click)=\"demote()\"\r\n  >\r\n    <mat-icon>expand_more</mat-icon>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "RootTaskListComponent",
            "id": "component-RootTaskListComponent-0538cdb1c4eebdf67bb4deb424221fe24eb47f9c746eac75b95a38782b6f72a337a450f20c31d105350e2fe905d95d44a30e1440c0a855ff68d9d9aa989a44bf",
            "file": "src/app/features/core/sentinel/lists/root-task-list/root-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./root-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ROOT_TASK_ID } from '../../../../../models/taskModelManager';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport {\r\n  TaskListType,\r\n  TaskListKey,\r\n  TaskListRules,\r\n} from '../../../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../../../services/tasks/task-list-rules.service';\r\n\r\n@Component({\r\n  selector: 'app-root-task-list',\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  templateUrl: './root-task-list.component.html',\r\n  styleUrl: './root-task-list.component.scss',\r\n})\r\nexport class RootTaskListComponent implements OnInit {\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListRulesService: TaskListRulesService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadTasks();\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.OVERLORD,\r\n        data: ROOT_TASK_ID,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./root-task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- create task now is in search field on header area anyway -->\r\n<!-- <div class=\"center-horizontal\">\r\n  <div class=\"task-form-container\"><app-create-task></app-create-task></div>\r\n</div> -->\r\n<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n"
        },
        {
            "name": "SearchCreateComponent",
            "id": "component-SearchCreateComponent-fc51ce7650afa244bc83d34cf4024ae51f6db5d139d5cb3f0353117ed1da763c1920b960ab36887708536642c1fc6906d6386d6dc5b323a7929b28a3ef9eaf80",
            "file": "src/app/components/search-create/search-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-create",
            "styleUrls": [
                "./search-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "searchResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedOverlord",
                    "defaultValue": "{\r\n    isVisible: true,\r\n    animationState: 'normal',\r\n    ...getRootTaskObject(),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears input and search results.\n",
                    "description": "<p>Clears input and search results.</p>\n"
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToSelectedTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateTask",
                    "args": [
                        {
                            "name": "taskName",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles creating a new task with the input value.\n",
                    "description": "<p>Handles creating a new task with the input value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskName",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets input and results to initial state.\n",
                    "description": "<p>Resets input and results to initial state.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgForOf, NgIf } from '@angular/common';\r\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs';\r\nimport {\r\n  ExtendedTask,\r\n  getDefaultTask,\r\n  getRootTaskObject,\r\n  ROOT_TASK_ID,\r\n  TaskoratorTask,\r\n} from '../../models/taskModelManager';\r\nimport { TaskService } from '../../services/sync-api-cache/task.service';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { SearchTasksService } from '../../services/tasks/search-tasks.service';\r\nimport { TaskTreeNode } from '../../models/taskTree';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { TaskUpdateService } from '../../services/tasks/task-update.service';\r\nimport { TaskNavigatorUltraService } from '../../services/tasks/task-navigator-ultra.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-search-create',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    NgForOf,\r\n    NgIf,\r\n    MatIcon,\r\n  ],\r\n  templateUrl: './search-create.component.html',\r\n  styleUrls: ['./search-create.component.scss'],\r\n})\r\nexport class SearchCreateComponent {\r\n  searchControl = new FormControl('');\r\n  searchResults: TaskTreeNode[] = [];\r\n  selectedOverlord: ExtendedTask | null = {\r\n    isVisible: true,\r\n    animationState: 'normal',\r\n    ...getRootTaskObject(),\r\n  };\r\n\r\n  constructor(\r\n    private taskService: TaskService,\r\n    private taskupdateService: TaskUpdateService,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskSearchService: SearchTasksService,\r\n    private taskNavigator: TaskNavigatorUltraService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Subscribe to input changes for search\r\n    this.searchControl.valueChanges\r\n      .pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged(),\r\n        switchMap((query) => {\r\n          if (!query) return [];\r\n          if (query.trim()) {\r\n            return this.taskSearchService.searchTasks(query); // Fetch matching results\r\n          }\r\n          return []; // Return empty array for empty input\r\n        })\r\n      )\r\n      .subscribe((tasks) => (this.searchResults = tasks));\r\n\r\n    // Watch for selected overlord changes\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((taskId: string | null) => {\r\n        if (!taskId) return;\r\n        this.taskService.getTaskById(taskId).then((task) => {\r\n          if (!task) return;\r\n          this.selectedOverlord = task;\r\n        });\r\n      });\r\n  }\r\n\r\n  // onSelectTask(task: TaskTreeNode): void {\r\n  //   this.selectedOverlordService.setSelectedOverlord(task.taskId); // Select task as overlord\r\n  //   this.navigatorService.next(task.taskId);\r\n  //   this.resetState();\r\n  // }\r\n\r\n  onSelectTask(task: TaskTreeNode): void {\r\n    this.router.navigate(['/tasks', task.taskId]);\r\n    this.resetState();\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new task with the input value.\r\n   */\r\n  onCreateTask(taskName: string | null): void {\r\n    if (!taskName) return;\r\n    if (!taskName.trim()) {\r\n      console.error('Task name cannot be empty.');\r\n      return;\r\n    }\r\n\r\n    const task: TaskoratorTask = {\r\n      ...getDefaultTask(),\r\n      name: taskName.trim(),\r\n      overlord: this.selectedOverlord?.taskId || ROOT_TASK_ID,\r\n    };\r\n\r\n    this.taskupdateService.create(task); //.then(() => {\r\n    this.resetState();\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * Clears input and search results.\r\n   */\r\n  clearInput(): void {\r\n    this.resetState();\r\n  }\r\n\r\n  /**\r\n   * Resets input and results to initial state.\r\n   */\r\n  private resetState(): void {\r\n    this.searchControl.reset();\r\n    this.searchResults = [];\r\n  }\r\n\r\n  goToSelectedTask() {}\r\n\r\n  goBack(): void {\r\n    if (!this.selectedOverlord) return;\r\n    this.taskNavigator.backToPrevious();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-create-container {\r\n  position: relative; /* Make the container a positioning reference for the absolute list */\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  padding: 1px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  background-color: #ffffff72;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  @media (max-width: 800px) {\r\n    max-width: 400px;\r\n  }\r\n  @media (max-width: 600px) {\r\n    max-width: 300px;\r\n  }\r\n  @media (max-width: 400px) {\r\n    max-width: 250px;\r\n  }\r\n}\r\n\r\n.search-create-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n\r\n  .search-bar {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n}\r\n\r\n.search-results {\r\n  position: absolute; /* Position the results list outside the container */\r\n  top: 100%; /* Align it just below the container */\r\n  left: 0;\r\n  width: 100%; /* Make it match the container width */\r\n  background-color: #ffffff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Elevate the list */\r\n  z-index: 1000; /* Ensure it stays above other elements */\r\n  max-height: 200px; /* Limit the height for large result sets */\r\n  overflow-y: auto; /* Add scrolling for long lists */\r\n}\r\n\r\n.search-results p {\r\n  margin: 8px;\r\n  padding: 4px 8px;\r\n  font-size: 0.85rem;\r\n  line-height: 1.2;\r\n  cursor: pointer;\r\n  background-color: #f5f5f5;\r\n  transition: background-color 0.2s, color 0.2s;\r\n  color: #333;\r\n\r\n  &:hover {\r\n    background-color: #e0e0e0;\r\n    color: #000;\r\n  }\r\n\r\n  &.selected {\r\n    background-color: #d1e7dd;\r\n    color: #155724;\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\nmat-icon-button {\r\n  padding: 2px;\r\n  min-width: 24px;\r\n  height: 24px;\r\n  color: black;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .search-results {\r\n    max-height: 150px; /* Adjust for small screens */\r\n  }\r\n\r\n  mat-icon-button {\r\n    min-width: 20px;\r\n    height: 20px;\r\n  }\r\n\r\n  .search-results p {\r\n    font-size: 0.8rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./search-create.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskupdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskSearchService",
                        "type": "SearchTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskNavigator",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskupdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskSearchService",
                        "type": "SearchTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskNavigator",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"search-create-container\">\r\n  <!-- Search and Actions Row -->\r\n  <div class=\"search-create-row\">\r\n    <!-- Search Input -->\r\n    <mat-form-field\r\n      class=\"search-bar\"\r\n      subscriptSizing=\"dynamic\"\r\n      appearance=\"outline\"\r\n    >\r\n      <mat-label>{{ selectedOverlord?.name }}</mat-label>\r\n      <input matInput [formControl]=\"searchControl\" />\r\n      <button\r\n        mat-icon-button\r\n        matSuffix\r\n        (click)=\"clearInput()\"\r\n        *ngIf=\"searchControl.value\"\r\n        aria-label=\"Clear Input\"\r\n      >\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n\r\n    <!-- Action Buttons -->\r\n    <button\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      (click)=\"onCreateTask(searchControl.value)\"\r\n      aria-label=\"Save Task\"\r\n    >\r\n      <mat-icon>save</mat-icon>\r\n    </button>\r\n    <!-- !not needed, it auto goes in once selected -->\r\n    <!-- <button\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      (click)=\"goToSelectedTask()\"\r\n      aria-label=\"Go To Task\"\r\n    >\r\n      <mat-icon>arrow_forward</mat-icon>\r\n    </button> -->\r\n    <button\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      (click)=\"goBack()\"\r\n      aria-label=\"Go Back\"\r\n    >\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Search Results -->\r\n  <div class=\"search-results\" *ngIf=\"searchResults && searchResults.length > 0\">\r\n    <p\r\n      *ngFor=\"let task of searchResults\"\r\n      (click)=\"onSelectTask(task)\"\r\n      [class.selected]=\"task.taskId === selectedOverlord?.taskId\"\r\n    >\r\n      {{ task.name }}\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SearchCreateTestComponent",
            "id": "component-SearchCreateTestComponent-143b1e02dec5d5f27f4e7115f3367a41d0f48c09658d14efbb5b32973c224d1bd840d81f20590504193805cd2eef2b64b9ab1b7b70e1fdd7b5498aefe5796572",
            "file": "src/app/components/search-create/search-create-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-create-test",
            "styleUrls": [
                "./search-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "searchResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectedOverlord",
                    "defaultValue": "{\r\n    isVisible: true,\r\n    animationState: 'normal',\r\n    ...getRootTaskObject(),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears input and search results.\n",
                    "description": "<p>Clears input and search results.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateTask",
                    "args": [
                        {
                            "name": "taskName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles creating a new task with the input value.\n",
                    "description": "<p>Handles creating a new task with the input value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles task selection from search results.\n",
                    "description": "<p>Handles task selection from search results.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets input and results to initial state.\n",
                    "description": "<p>Resets input and results to initial state.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgForOf, NgIf } from '@angular/common';\r\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs';\r\nimport {\r\n  ExtendedTask,\r\n  getRootTaskObject,\r\n  TaskoratorTask,\r\n} from '../../models/taskModelManager';\r\nimport { TaskService } from '../../services/sync-api-cache/task.service';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { SearchTasksService } from '../../services/tasks/search-tasks.service';\r\nimport { TaskTreeNode } from '../../models/taskTree';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-search-create-test',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    NgForOf,\r\n    NgIf,\r\n    MatIcon,\r\n  ],\r\n  templateUrl: './search-create.component.html',\r\n  styleUrls: ['./search-create.component.scss'],\r\n})\r\nexport class SearchCreateTestComponent {\r\n  searchControl = new FormControl('');\r\n  searchResults: TaskTreeNode[] = [];\r\n  selectedOverlord: ExtendedTask | null = {\r\n    isVisible: true,\r\n    animationState: 'normal',\r\n    ...getRootTaskObject(),\r\n  };\r\n\r\n  constructor(\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskSearchService: SearchTasksService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Subscribe to input changes for search\r\n    this.searchControl.valueChanges\r\n      .pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged(),\r\n        switchMap((query) => {\r\n          if (!query) return [];\r\n          if (query.trim()) {\r\n            return this.taskSearchService.searchTasks(query); // Fetch matching results\r\n          }\r\n          return []; // Return empty array for empty input\r\n        })\r\n      )\r\n      .subscribe((tasks) => (this.searchResults = tasks));\r\n\r\n    // Watch for selected overlord changes\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((taskId: string | null) => {\r\n        if (!taskId) return;\r\n        // this.taskService.getTaskById(taskId).then((task) => {\r\n        //   if (!task) return;\r\n        //   console.log('getting task named: ' + task.name);\r\n        //   console.log('getting task: ');\r\n        //   this.selectedOverlord = task;\r\n        // });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Handles task selection from search results.\r\n   */\r\n  onSelectTask(taskId: string): void {\r\n    this.selectedOverlordService.setSelectedOverlord(taskId); // Select task as overlord\r\n    this.resetState();\r\n  }\r\n\r\n  /**\r\n   * Handles creating a new task with the input value.\r\n   */\r\n  onCreateTask(taskName: string): void {\r\n    if (!taskName.trim()) {\r\n      console.error('Task name cannot be empty.');\r\n      return;\r\n    }\r\n\r\n    const task: TaskoratorTask = {\r\n      ...getRootTaskObject(),\r\n      name: taskName.trim(),\r\n      overlord: this.selectedOverlord?.taskId || null,\r\n    };\r\n\r\n    // this.taskService.createTask(task).then(() => {\r\n    //   this.resetState();\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * Clears input and search results.\r\n   */\r\n  clearInput(): void {\r\n    this.resetState();\r\n  }\r\n\r\n  /**\r\n   * Resets input and results to initial state.\r\n   */\r\n  private resetState(): void {\r\n    this.searchControl.reset();\r\n    this.searchResults = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-create-container {\r\n  position: relative; /* Make the container a positioning reference for the absolute list */\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  padding: 1px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  background-color: #ffffff72;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  @media (max-width: 800px) {\r\n    max-width: 400px;\r\n  }\r\n  @media (max-width: 600px) {\r\n    max-width: 300px;\r\n  }\r\n  @media (max-width: 400px) {\r\n    max-width: 250px;\r\n  }\r\n}\r\n\r\n.search-create-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n\r\n  .search-bar {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n}\r\n\r\n.search-results {\r\n  position: absolute; /* Position the results list outside the container */\r\n  top: 100%; /* Align it just below the container */\r\n  left: 0;\r\n  width: 100%; /* Make it match the container width */\r\n  background-color: #ffffff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Elevate the list */\r\n  z-index: 1000; /* Ensure it stays above other elements */\r\n  max-height: 200px; /* Limit the height for large result sets */\r\n  overflow-y: auto; /* Add scrolling for long lists */\r\n}\r\n\r\n.search-results p {\r\n  margin: 8px;\r\n  padding: 4px 8px;\r\n  font-size: 0.85rem;\r\n  line-height: 1.2;\r\n  cursor: pointer;\r\n  background-color: #f5f5f5;\r\n  transition: background-color 0.2s, color 0.2s;\r\n  color: #333;\r\n\r\n  &:hover {\r\n    background-color: #e0e0e0;\r\n    color: #000;\r\n  }\r\n\r\n  &.selected {\r\n    background-color: #d1e7dd;\r\n    color: #155724;\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\nmat-icon-button {\r\n  padding: 2px;\r\n  min-width: 24px;\r\n  height: 24px;\r\n  color: black;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .search-results {\r\n    max-height: 150px; /* Adjust for small screens */\r\n  }\r\n\r\n  mat-icon-button {\r\n    min-width: 20px;\r\n    height: 20px;\r\n  }\r\n\r\n  .search-results p {\r\n    font-size: 0.8rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./search-create.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskSearchService",
                        "type": "SearchTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskSearchService",
                        "type": "SearchTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"search-create-container\">\r\n  <!-- Search and Actions Row -->\r\n  <div class=\"search-create-row\">\r\n    <!-- Search Input -->\r\n    <mat-form-field\r\n      class=\"search-bar\"\r\n      subscriptSizing=\"dynamic\"\r\n      appearance=\"outline\"\r\n    >\r\n      <mat-label>{{ selectedOverlord?.name }}</mat-label>\r\n      <input matInput [formControl]=\"searchControl\" />\r\n      <button\r\n        mat-icon-button\r\n        matSuffix\r\n        (click)=\"clearInput()\"\r\n        *ngIf=\"searchControl.value\"\r\n        aria-label=\"Clear Input\"\r\n      >\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n\r\n    <!-- Action Buttons -->\r\n    <button\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      (click)=\"onCreateTask(searchControl.value)\"\r\n      aria-label=\"Save Task\"\r\n    >\r\n      <mat-icon>save</mat-icon>\r\n    </button>\r\n    <!-- !not needed, it auto goes in once selected -->\r\n    <!-- <button\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      (click)=\"goToSelectedTask()\"\r\n      aria-label=\"Go To Task\"\r\n    >\r\n      <mat-icon>arrow_forward</mat-icon>\r\n    </button> -->\r\n    <button\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      (click)=\"goBack()\"\r\n      aria-label=\"Go Back\"\r\n    >\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Search Results -->\r\n  <div class=\"search-results\" *ngIf=\"searchResults && searchResults.length > 0\">\r\n    <p\r\n      *ngFor=\"let task of searchResults\"\r\n      (click)=\"onSelectTask(task)\"\r\n      [class.selected]=\"task.taskId === selectedOverlord?.taskId\"\r\n    >\r\n      {{ task.name }}\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SearchOverlordComponent",
            "id": "component-SearchOverlordComponent-d5658b2bc8ad03bc246ff1168515cf81028825e3eae88770320845efcf5446139fc4a1a4592c2210151760711b799a8b9bed292aa0b2bd5dd1279508d4528e67",
            "file": "src/app/components/search-overlord/search-overlord.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-overlord",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-overlord.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredTaskOptions",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | null> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectedOverlordId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "taskOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "taskSearchCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "filterTasks",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOverlordSelection",
                    "args": [
                        {
                            "name": "selectedTaskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedTaskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTaskOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "SlicePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgxMatSelectSearchModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { map, Observable, startWith } from 'rxjs';\r\nimport { TaskTreeNode } from '../../models/taskTree';\r\nimport { TreeNodeService } from '../../services/tree/tree-node.service';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { AsyncPipe, NgForOf, NgIf, SlicePipe } from '@angular/common';\r\nimport { TaskService } from '../../services/sync-api-cache/task.service';\r\nimport { TreeService } from '../../services/sync-api-cache/tree.service';\r\nimport { TaskTreeNodeToolsService } from '../../services/tree/task-tree-node-tools.service';\r\n\r\n@Component({\r\n  selector: 'app-search-overlord',\r\n  standalone: true,\r\n  imports: [\r\n    NgForOf,\r\n    AsyncPipe,\r\n    MatFormField,\r\n    MatLabel,\r\n    SlicePipe,\r\n    MatSelect,\r\n    MatOption,\r\n    ReactiveFormsModule,\r\n    NgxMatSelectSearchModule,\r\n    NgIf,\r\n  ],\r\n  templateUrl: './search-overlord.component.html',\r\n  styleUrl: './search-overlord.component.scss',\r\n})\r\nexport class SearchOverlordComponent implements OnInit {\r\n  filteredTaskOptions: Observable<TaskTreeNode[] | null> | null = null;\r\n  selectedOverlordId = '';\r\n  taskSearchCtrl: FormControl = new FormControl();\r\n\r\n  taskOptions: TaskTreeNode[] = []; // Initialize with an empty list\r\n\r\n  constructor(\r\n    private treeService: TreeService,\r\n    private treeNodeToolsService: TaskTreeNodeToolsService,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskService: TaskService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // this.authService\r\n    //   .isAuthenticatedObservable()\r\n    //   .subscribe((isAuthenticated) => {\r\n    //     if (isAuthenticated) {\r\n    //       this.loadTaskOptions();\r\n    //     }\r\n    //   });\r\n\r\n    // Set up the filter for the select options\r\n    this.filteredTaskOptions = this.taskSearchCtrl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((value) => this.filterTasks(value || ''))\r\n    );\r\n  }\r\n\r\n  // ngOnInit() {\r\n  //   this.loadTaskOptions();\r\n\r\n  //   // Set up the filter for the select options\r\n  //   this.filteredTaskOptions = this.taskSearchCtrl.valueChanges.pipe(\r\n  //     startWith(''), // Ensure it starts with an empty string\r\n  //     map((value) => this.filterTasks(value || ''))\r\n  //   );\r\n  // }\r\n\r\n  loadTaskOptions() {\r\n    this.treeService.getTree().subscribe((taskTree) => {\r\n      if (taskTree) {\r\n        console.log('Task tree loaded @ search overlord:', taskTree);\r\n        this.taskOptions = this.treeNodeToolsService.getFlattened(taskTree);\r\n        // Re-trigger the filtering logic to include newly loaded options\r\n        this.taskSearchCtrl.setValue(this.taskSearchCtrl.value || '');\r\n      }\r\n    });\r\n  }\r\n\r\n  filterTasks(value: string): TaskTreeNode[] {\r\n    if (!this.taskOptions || this.taskOptions.length === 0) {\r\n      console.warn('No task options available for filtering.');\r\n      return [];\r\n    }\r\n\r\n    if (value.trim() === '') {\r\n      // If the search value is empty, return all options\r\n      return this.taskOptions;\r\n    }\r\n\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.taskOptions\r\n      .filter(\r\n        (option) =>\r\n          option.name?.toLowerCase().includes(filterValue) && // Safely check for name\r\n          option.stage !== 'completed'\r\n      )\r\n      .sort((a, b) => b.children.length - a.children.length); // Sort by number of children\r\n  }\r\n\r\n  handleOverlordSelection(selectedTaskId: string) {\r\n    this.selectedOverlordId = selectedTaskId;\r\n    if (!this.selectedOverlordId) return;\r\n\r\n    this.taskService\r\n      .getTaskById(this.selectedOverlordId)\r\n      .then((task: TaskoratorTask | null) => {\r\n        if (!task) {\r\n          /**\r\n           * TODO:\r\n           * if task is not found, means it is in tree, but not in database anymore\r\n           * means tree is kinda broken, on task deletion it doesnt react?\r\n           */\r\n          console.error('Task not found for ID:', this.selectedOverlordId);\r\n          return;\r\n        }\r\n        this.selectedOverlordService.setSelectedOverlord(task.taskId);\r\n      });\r\n  }\r\n}\r\n",
            "styleUrl": "./search-overlord.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeToolsService",
                        "type": "TaskTreeNodeToolsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"fill\">\r\n  <mat-label>Select an Overlord Task</mat-label>\r\n  <mat-select (selectionChange)=\"handleOverlordSelection($event.value)\">\r\n    <mat-option>\r\n      <ngx-mat-select-search\r\n        [formControl]=\"taskSearchCtrl\"\r\n        placeholderLabel=\"find task...\"\r\n        noEntriesFoundLabel=\"task not found\"\r\n      ></ngx-mat-select-search>\r\n    </mat-option>\r\n    <mat-option\r\n      *ngFor=\"let option of filteredTaskOptions | async\"\r\n      [value]=\"option.taskId\"\r\n    >\r\n      {{ option.name }}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "SearchOverlordTestComponent",
            "id": "component-SearchOverlordTestComponent-e24976ddb2e720cf3b681eed2c0387ea52bd7cc306098aba4b3c56c99531a1c03e36145fdbde2ac376749e3a68b1c9d2d0ec32415e44a164e1776c87cd207f24",
            "file": "src/app/components/search-overlord/search-overlord-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-overlord-test",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-overlord.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredTaskOptions",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | null> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedOverlordId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "taskOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "taskSearchCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "filterTasks",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode[]",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOverlordSelection",
                    "args": [
                        {
                            "name": "selectedTaskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedTaskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTaskOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "SlicePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgxMatSelectSearchModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { map, Observable, startWith } from 'rxjs';\r\nimport { TaskTreeNode } from '../../models/taskTree';\r\nimport { TreeService } from '../../services/sync-api-cache/tree.service';\r\nimport { TreeNodeService } from '../../services/tree/tree-node.service';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { TaskoratorTask } from '../../models/taskModelManager';\r\nimport { AsyncPipe, NgForOf, NgIf, SlicePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-search-overlord-test',\r\n  standalone: true,\r\n  imports: [\r\n    NgForOf,\r\n    AsyncPipe,\r\n    MatFormField,\r\n    MatLabel,\r\n    SlicePipe,\r\n    MatSelect,\r\n    MatOption,\r\n    ReactiveFormsModule,\r\n    NgxMatSelectSearchModule,\r\n    NgIf,\r\n  ],\r\n  templateUrl: './search-overlord.component.html',\r\n  styleUrl: './search-overlord.component.scss',\r\n})\r\nexport class SearchOverlordTestComponent implements OnInit {\r\n  filteredTaskOptions: Observable<TaskTreeNode[] | null> | null = null;\r\n  selectedOverlordId = '';\r\n  taskSearchCtrl: FormControl = new FormControl();\r\n\r\n  taskOptions: TaskTreeNode[] = []; // Initialize with an empty list\r\n\r\n  constructor(\r\n    private treeService: TreeService,\r\n    private treeNodeService: TreeNodeService,\r\n    private selectedOverlordService: SelectedOverlordService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // this.authService\r\n    //   .isAuthenticatedObservable()\r\n    //   .subscribe((isAuthenticated) => {\r\n    //     if (isAuthenticated) {\r\n    //       this.loadTaskOptions();\r\n    //     }\r\n    //   });\r\n\r\n    // Set up the filter for the select options\r\n    this.filteredTaskOptions = this.taskSearchCtrl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((value) => this.filterTasks(value || ''))\r\n    );\r\n  }\r\n\r\n  // ngOnInit() {\r\n  //   this.loadTaskOptions();\r\n\r\n  //   // Set up the filter for the select options\r\n  //   this.filteredTaskOptions = this.taskSearchCtrl.valueChanges.pipe(\r\n  //     startWith(''), // Ensure it starts with an empty string\r\n  //     map((value) => this.filterTasks(value || ''))\r\n  //   );\r\n  // }\r\n\r\n  loadTaskOptions() {\r\n    this.treeService.getTree().subscribe((taskTree) => {\r\n      if (taskTree) {\r\n        this.taskOptions = []; //this.treeNodeService.getFlattened(taskTree);\r\n        // Re-trigger the filtering logic to include newly loaded options\r\n        this.taskSearchCtrl.setValue(this.taskSearchCtrl.value || '');\r\n      }\r\n    });\r\n  }\r\n\r\n  filterTasks(value: string): TaskTreeNode[] {\r\n    if (!this.taskOptions || this.taskOptions.length === 0) {\r\n      console.warn('No task options available for filtering.');\r\n      return [];\r\n    }\r\n\r\n    if (value.trim() === '') {\r\n      // If the search value is empty, return all options\r\n      return this.taskOptions;\r\n    }\r\n\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.taskOptions\r\n      .filter(\r\n        (option) => option.name?.toLowerCase().includes(filterValue) //&& // Safely check for name\r\n        // !option.isCompleted\r\n      )\r\n      .sort((a, b) => b.children.length - a.children.length); // Sort by number of children\r\n  }\r\n\r\n  handleOverlordSelection(selectedTaskId: string) {\r\n    this.selectedOverlordId = selectedTaskId;\r\n    if (!this.selectedOverlordId) return;\r\n\r\n    // this.taskService\r\n    //   .getTaskById(this.selectedOverlordId)\r\n    //   .then((task: Task | null) => {\r\n    //     if (!task) {\r\n    //       /**\r\n    //        * TODO:\r\n    //        * if task is not found, means it is in tree, but not in database anymore\r\n    //        * means tree is kinda broken, on task deletion it doesnt react?\r\n    //        */\r\n    //       console.error('Task not found for ID:', this.selectedOverlordId);\r\n    //       return;\r\n    //     }\r\n    //     this.selectedOverlordService.setSelectedOverlord(task.taskId);\r\n    //   });\r\n  }\r\n}\r\n",
            "styleUrl": "./search-overlord.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeNodeService",
                        "type": "TreeNodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"fill\">\r\n  <mat-label>Select an Overlord Task</mat-label>\r\n  <mat-select (selectionChange)=\"handleOverlordSelection($event.value)\">\r\n    <mat-option>\r\n      <ngx-mat-select-search\r\n        [formControl]=\"taskSearchCtrl\"\r\n        placeholderLabel=\"find task...\"\r\n        noEntriesFoundLabel=\"task not found\"\r\n      ></ngx-mat-select-search>\r\n    </mat-option>\r\n    <mat-option\r\n      *ngFor=\"let option of filteredTaskOptions | async\"\r\n      [value]=\"option.taskId\"\r\n    >\r\n      {{ option.name }}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "SelectedMultipleComponent",
            "id": "component-SelectedMultipleComponent-5ba22daba23881b238ad066bae55f70c374d7a1c62197cfde7e7b29412afbfaa9fcda7ec1c5d48fe020ec9f5a9e880f95b04f82cbbbc0673897a5990a8c469d4",
            "file": "src/app/features/core/crucible/selected-multiple/selected-multiple.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-selected-multiple",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./selected-multiple.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredTaskOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TaskoratorTask[]> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "selectedOverlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedOverlordName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "settings",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTaskCardClick",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFavorites",
                    "args": [
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFrogs",
                    "args": [
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "reset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNewOverlordForSelectedTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskMiniComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgxMatSelectSearchModule",
                    "type": "module"
                },
                {
                    "name": "MatButton"
                },
                {
                    "name": "SearchOverlordComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { Observable } from 'rxjs';\r\nimport { SearchOverlordComponent } from '../../../../components/search-overlord/search-overlord.component';\r\nimport { TaskMiniComponent } from '../../../../components/task/task-mini/task-mini.component';\r\nimport { TaskSettings } from '../../../../models/settings';\r\nimport { TaskoratorTask } from '../../../../models/taskModelManager';\r\nimport { SettingsService } from '../../../../services/sync-api-cache/settings.service';\r\nimport { SelectedMultipleService } from '../../../../services/tasks/selected-multiple.service';\r\nimport { SelectedOverlordService } from '../../../../services/tasks/selected-overlord.service';\r\nimport { TaskSettingsTasksService } from '../../../../services/tasks/task-settings-tasks.service';\r\nimport { TaskService } from '../../../../services/sync-api-cache/task.service';\r\nimport { TaskBatchService } from '../../../../services/sync-api-cache/task-batch.service';\r\nimport { TaskActions } from '../../../../services/tasks/task-action-tracker.service';\r\n\r\n@Component({\r\n  selector: 'app-selected-multiple',\r\n  standalone: true,\r\n  imports: [\r\n    TaskMiniComponent,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    NgxMatSelectSearchModule,\r\n    MatButton,\r\n    SearchOverlordComponent,\r\n  ],\r\n  templateUrl: './selected-multiple.component.html',\r\n  styleUrl: './selected-multiple.component.scss',\r\n})\r\nexport class SelectedMultipleComponent implements OnInit {\r\n  selectedTasks: TaskoratorTask[] = [];\r\n  selectedOverlord: string | undefined;\r\n  settings: TaskSettings | undefined = undefined;\r\n  filteredTaskOptions: Observable<TaskoratorTask[]> | undefined;\r\n  selectedOverlordName: string = '';\r\n\r\n  constructor(\r\n    private selectedMultiple: SelectedMultipleService,\r\n    private taskService: TaskService,\r\n    private taskBatchService: TaskBatchService,\r\n    private settingsService: SettingsService,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private taskPriorityService: TaskSettingsTasksService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.selectedMultiple\r\n      .getSelectedTasks()\r\n      .subscribe((selectedTasks: TaskoratorTask[]) => {\r\n        this.selectedTasks = selectedTasks;\r\n      });\r\n    this.loadSettings();\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((t: string | null) => {\r\n        if (!t) return;\r\n        this.selectedOverlord = t;\r\n\r\n        this.taskService.getTaskById(this.selectedOverlord).then((t) => {\r\n          this.selectedOverlordName = t?.name || '';\r\n        });\r\n      });\r\n  }\r\n\r\n  loadSettings() {\r\n    this.settingsService.getSettings().subscribe((s: TaskSettings | null) => {\r\n      if (!s) return;\r\n      this.settings = s;\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.selectedMultiple.clear();\r\n    this.selectedTasks = [];\r\n  }\r\n\r\n  async setFocus(reset: boolean = true) {\r\n    if (\r\n      !this.settings ||\r\n      !this.selectedTasks ||\r\n      this.selectedTasks.length === 0\r\n    ) {\r\n      console.error('Settings are not initialized or no tasks are selected.');\r\n      return;\r\n    }\r\n    if (reset) {\r\n      this.settings.focusTaskIds = this.selectedTasks.map(\r\n        (task) => task.taskId\r\n      );\r\n      await this.settingsService.updateSettings(this.settings);\r\n    } else {\r\n      for (const task of this.selectedTasks) {\r\n        await this.taskPriorityService.addTaskToFocus(task);\r\n      }\r\n    }\r\n  }\r\n\r\n  async setFrogs(reset: boolean = true) {\r\n    if (\r\n      !this.settings ||\r\n      !this.selectedTasks ||\r\n      this.selectedTasks.length === 0\r\n    ) {\r\n      console.error('Settings are not initialized or no tasks are selected.');\r\n      return;\r\n    }\r\n    if (reset) {\r\n      this.settings.frogTaskIds = this.selectedTasks.map((task) => task.taskId);\r\n      await this.settingsService.updateSettings(this.settings);\r\n    } else {\r\n      for (const task of this.selectedTasks) {\r\n        await this.taskPriorityService.addTaskToFrogs(task);\r\n      }\r\n    }\r\n  }\r\n\r\n  async setFavorites(reset: boolean = true) {\r\n    if (\r\n      !this.settings ||\r\n      !this.selectedTasks ||\r\n      this.selectedTasks.length === 0\r\n    ) {\r\n      console.error('Settings are not initialized or no tasks are selected.');\r\n      return;\r\n    }\r\n    if (reset) {\r\n      this.settings.favoriteTaskIds = this.selectedTasks.map(\r\n        (task) => task.taskId\r\n      );\r\n      await this.settingsService.updateSettings(this.settings);\r\n    } else {\r\n      for (const task of this.selectedTasks) {\r\n        await this.taskPriorityService.addTaskToFavorites(task);\r\n      }\r\n    }\r\n  }\r\n\r\n  onTaskCardClick(task: TaskoratorTask) {\r\n    if (this.selectedTasks.indexOf(task) > -1) {\r\n      this.selectedMultiple.removeSelectedTask(task);\r\n    } else {\r\n      this.selectedMultiple.addSelectedTask(task);\r\n    }\r\n  }\r\n\r\n  setNewOverlordForSelectedTasks() {\r\n    const o = this.selectedOverlord;\r\n    if (!o) {\r\n      alert('Please select an overlord from the list.');\r\n      return;\r\n    }\r\n\r\n    this.selectedTasks.forEach((task) => {\r\n      task.overlord = o;\r\n    });\r\n\r\n    this.taskBatchService\r\n      .updateTaskBatch(this.selectedTasks, TaskActions.MOVED, o)\r\n      .then(() => {\r\n        console.log(\r\n          `Task ${this.selectedTasks.map(\r\n            (t) => t.name\r\n          )} updated with new overlord ${o}`\r\n        );\r\n      });\r\n  }\r\n}\r\n",
            "styleUrl": "./selected-multiple.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskPriorityService",
                        "type": "TaskSettingsTasksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskBatchService",
                        "type": "TaskBatchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskPriorityService",
                        "type": "TaskSettingsTasksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"center-horizontal\">\r\n  <div class=\"width-task fill-width\">\r\n    <div class=\"selected-tasks-container\">\r\n      <h2>Selected Overlord</h2>\r\n      <div *ngIf=\"selectedOverlord\">{{ selectedOverlordName }}</div>\r\n    </div>\r\n\r\n    <div class=\"selected-tasks-container\">\r\n      <app-search-overlord></app-search-overlord>\r\n      <div class=\"toolbar\">\r\n        <button mat-button (click)=\"setNewOverlordForSelectedTasks()\">\r\n          Set New Overlord\r\n        </button>\r\n        <button mat-button (click)=\"clear()\">Clear Selection</button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"selected-tasks-container\">\r\n      <h2>Manage Focus, Frog, and Favorite Tasks</h2>\r\n      <div class=\"button-group\">\r\n        <div mat-button-toggle-group class=\"toggle-group\">\r\n          <button mat-button (click)=\"setFocus(true)\">Reset Focus</button>\r\n          <button mat-button (click)=\"setFocus(false)\">Add to Focus</button>\r\n        </div>\r\n        <div mat-button-toggle-group class=\"toggle-group\">\r\n          <button mat-button (click)=\"setFrogs(true)\">Reset Frogs</button>\r\n          <button mat-button (click)=\"setFrogs(false)\">Add to Frogs</button>\r\n        </div>\r\n        <div mat-button-toggle-group class=\"toggle-group\">\r\n          <button mat-button (click)=\"setFavorites(true)\">\r\n            Reset Favorites\r\n          </button>\r\n          <button mat-button (click)=\"setFavorites(false)\">\r\n            Add to Favorites\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"selected-tasks-container\">\r\n      <h2>Selected Tasks</h2>\r\n      <div *ngIf=\"selectedTasks.length > 0; else noTasks\">\r\n        <div *ngFor=\"let task of selectedTasks\" class=\"task-entry\">\r\n          <app-task-mini [task]=\"task\" (click)=\"onTaskCardClick(task)\">\r\n          </app-task-mini>\r\n        </div>\r\n      </div>\r\n      <ng-template #noTasks>\r\n        <p>No tasks selected.</p>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SentinelComponent",
            "id": "component-SentinelComponent-244633c13584e33f6a70df670d9800111ac0b144d74ff5fe9aec9d35b379c44c1931950044218d61b47fe29c8fd58e7787bf979ba513da06e3353dba3b1f9a88",
            "file": "src/app/features/core/sentinel/sentinel/sentinel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sentinel",
            "styleUrls": [
                "./sentinel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sentinel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['sentinel']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n@Component({\r\n  selector: 'app-sentinel',\r\n  standalone: true,\r\n  templateUrl: './sentinel.component.html',\r\n  styleUrls: ['./sentinel.component.scss'],\r\n  imports: [RouterOutlet],\r\n})\r\nexport class SentinelComponent {\r\n  data = CORE_APP_METADATA['sentinel'];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* sentinel.component.css */\r\n.button-group {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.secondary-navigation {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 16px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n\r\n  mat-chip-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    gap: 8px;\r\n  }\r\n\r\n  mat-chip {\r\n    margin: 4px;\r\n    background-color: #e0e0e0;\r\n    cursor: pointer;\r\n\r\n    &.mat-chip-selected {\r\n      background-color: #c5e1a5; /* Change to your desired color */\r\n    }\r\n\r\n    &:hover {\r\n      background-color: #d0d0d0;\r\n    }\r\n  }\r\n}\r\n\r\nmat-list-item {\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\nmat-icon {\r\n  color: #1976d2;\r\n}\r\n\r\nmat-progress-spinner {\r\n  display: block;\r\n  margin: 20px auto;\r\n}\r\n",
                    "styleUrl": "./sentinel.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "SessionComponent",
            "id": "component-SessionComponent-1e2c43bb5109af666077a590320824d9d165d9048f582e7b53c1aabd823ccdc3b97cc723ad5ff04ff562352211b1850325fcfffec6b17e3ad3f304655e812b8b",
            "file": "src/app/features/core/nexus/session/session/session.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-session",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./session.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hours",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "minutes",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "remainingTime",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "seconds",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectedSession",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSession | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedTaskIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sessions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSession[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "timerInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timerWorker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Worker | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "convertSecondsToTime",
                    "args": [
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSession",
                    "args": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSessions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playSound",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNavigator",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSession",
                    "args": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "TaskSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { TaskSession } from '../task-session.model';\r\nimport { TaskSessionService } from '../services/task-session.service';\r\nimport { NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { map } from 'rxjs/internal/operators/map';\r\nimport { take } from 'rxjs/internal/operators/take';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { SelectedMultipleService } from '../../../../../services/tasks/selected-multiple.service';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport { TaskListService } from '../../../../../services/sync-api-cache/task-list.service';\r\n\r\n@Component({\r\n  selector: 'app-session',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    NgFor,\r\n    NgClass,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    TaskNavigatorComponent,\r\n  ],\r\n  templateUrl: './session.component.html',\r\n  styleUrl: './session.component.scss',\r\n})\r\nexport class SessionComponent implements OnInit, OnDestroy {\r\n  sessions: TaskSession[] = [];\r\n  selectedTaskIds: string[] = [];\r\n  selectedSession: TaskSession | null = null;\r\n  remainingTime = 0;\r\n  private timerInterval: any;\r\n  private timerWorker: Worker | undefined;\r\n\r\n  // Variables to collect hours, minutes, and seconds\r\n  hours: number = 0;\r\n  minutes: number = 0;\r\n  seconds: number = 0;\r\n\r\n  constructor(\r\n    private taskSessionService: TaskSessionService,\r\n    private selectedMultipleService: SelectedMultipleService,\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListService: TaskListService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadSessions();\r\n    this.selectedMultipleService\r\n      .getSelectedTasks()\r\n      .pipe(\r\n        take(1), // take one value and complete\r\n        map((tasks) => tasks.map((task) => task.taskId))\r\n      )\r\n      .subscribe((taskIds) => (this.selectedTaskIds = taskIds));\r\n  }\r\n\r\n  startSession(): void {\r\n    if (!this.selectedSession) return;\r\n\r\n    // Terminate any existing worker\r\n    if (this.timerWorker) {\r\n      this.timerWorker.terminate();\r\n    }\r\n\r\n    this.remainingTime = this.selectedSession.duration;\r\n\r\n    if (typeof Worker !== 'undefined') {\r\n      this.timerWorker = new Worker(new URL('./timer.worker', import.meta.url));\r\n      this.timerWorker.onmessage = ({ data }) => {\r\n        if (data.done) {\r\n          this.playSound();\r\n        } else {\r\n          this.remainingTime = data.remainingTime;\r\n        }\r\n      };\r\n      this.timerWorker.postMessage({ duration: this.selectedSession.duration });\r\n    } else {\r\n      // Web Workers are not supported\r\n      console.error('Web Workers are not supported in this environment.');\r\n    }\r\n  }\r\n\r\n  playSound(): void {\r\n    const audio1 = new Audio('assets/end.wav');\r\n    const audio2 = new Audio('assets/session.wav');\r\n    const audio3 = new Audio('assets/over.wav');\r\n\r\n    // Play audio2 when audio1 ends\r\n    audio1.addEventListener('ended', () => {\r\n      audio2.play();\r\n    });\r\n\r\n    // Play audio3 when audio2 ends\r\n    audio2.addEventListener('ended', () => {\r\n      audio3.play();\r\n    });\r\n\r\n    // Start by playing audio1\r\n    audio1.play();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.timerWorker) {\r\n      this.timerWorker.terminate();\r\n    }\r\n  }\r\n\r\n  setNavigator(session: TaskSession) {\r\n    this.selectedSession = session; // Set the selected session\r\n\r\n    // this.taskListService\r\n    //   .getTasks(session.taskIds)\r\n    //   .then((tasks: Task[] | null) => {\r\n    //     if (!tasks) return;\r\n    //     const taskListKey: TaskListKey = {\r\n    //       type: TaskListType.SESSION,\r\n    //       data: session.name,\r\n    //     };\r\n    //     this.navigatorService.loadAndInitializeTasks(tasks, taskListKey);\r\n    //   });\r\n  }\r\n\r\n  async loadSessions() {\r\n    this.sessions = await this.taskSessionService.getSessions();\r\n  }\r\n\r\n  async createSession(\r\n    name: string,\r\n    hours: number,\r\n    minutes: number,\r\n    seconds: number\r\n  ) {\r\n    if (!name || (!hours && !minutes && !seconds)) {\r\n      alert('Please provide a session name and duration.');\r\n      return;\r\n    }\r\n\r\n    // Calculate the total duration in seconds\r\n    const duration = hours * 3600 + minutes * 60 + seconds;\r\n\r\n    if (this.selectedTaskIds.length < 1) {\r\n      console.log(\"Can't create empty session.\");\r\n      return;\r\n    }\r\n    if (name.length < 1) {\r\n      console.log('Create name for a session.');\r\n      return;\r\n    }\r\n\r\n    const newSession: TaskSession = {\r\n      id: '', // This will be generated on the backend or Firestore\r\n      name,\r\n      taskIds: this.selectedTaskIds,\r\n      duration,\r\n    };\r\n    await this.taskSessionService.createSession(newSession);\r\n    this.loadSessions();\r\n  }\r\n\r\n  async deleteSession(sessionId: string) {\r\n    await this.taskSessionService.deleteSession(sessionId);\r\n    this.loadSessions();\r\n  }\r\n\r\n  async updateSession(session: TaskSession) {\r\n    await this.taskSessionService.updateSession(session);\r\n    this.loadSessions();\r\n  }\r\n\r\n  convertSecondsToTime(seconds: number): string {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const remainingMinutes = minutes % 60;\r\n    const remainingSeconds = seconds % 60;\r\n\r\n    if (hours > 0) {\r\n      return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\r\n    } else if (remainingMinutes > 0) {\r\n      return `${remainingMinutes}m ${remainingSeconds}s`;\r\n    } else {\r\n      return `${remainingSeconds}s`;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./session.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskSessionService",
                        "type": "TaskSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedMultipleService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "taskSessionService",
                        "type": "TaskSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedMultipleService",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"center-horizontal\">\r\n  <div class=\"fill-width width-task\">\r\n    <div class=\"task-session\">\r\n      <h2>Task Sessions</h2>\r\n\r\n      <div class=\"create-session\">\r\n        <input matInput placeholder=\"Session Name\" #sessionName />\r\n\r\n        <div class=\"time-picker\">\r\n          <mat-form-field>\r\n            <mat-label>Hours</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              placeholder=\"Hours\"\r\n              [(ngModel)]=\"hours\"\r\n            />\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <mat-label>Minutes</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              placeholder=\"Minutes\"\r\n              [(ngModel)]=\"minutes\"\r\n            />\r\n          </mat-form-field>\r\n          <mat-form-field>\r\n            <mat-label>Seconds</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              placeholder=\"Seconds\"\r\n              [(ngModel)]=\"seconds\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <button\r\n          mat-button\r\n          color=\"primary\"\r\n          (click)=\"createSession(sessionName.value, hours, minutes, seconds)\"\r\n        >\r\n          Create Session\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"sessions-list\">\r\n        <div\r\n          *ngFor=\"let session of sessions\"\r\n          class=\"session-item\"\r\n          [ngClass]=\"{ 'selected-session': session.id === selectedSession?.id }\"\r\n        >\r\n          <span (click)=\"setNavigator(session)\">{{ session.name }}</span>\r\n          <span>{{ convertSecondsToTime(session.duration) }}</span>\r\n          <mat-icon (click)=\"deleteSession(session.id)\">delete</mat-icon>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"selectedSession\" class=\"session-timer\">\r\n        <h3>{{ selectedSession.name }}</h3>\r\n        <p>Time Remaining: {{ remainingTime }}s</p>\r\n        <button mat-button color=\"primary\" (click)=\"startSession()\">\r\n          Start Session\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-a19a3ecb6e7cfb5ff71a77da9be8a48792ed3845efbdbdc817269e12ebcb191cc85f77fdd4beb643dd4ad8cd2dcd385c6bdfa634beaeea7e5c0e947b5926f1fc",
            "file": "src/app/features/core/gateway/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [
                "./settings.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "completeButtonActions",
                    "defaultValue": "[\r\n    'completed',\r\n    'archived',\r\n    'deleted',\r\n    'seen',\r\n    'todo',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompleteButtonAction[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "currentSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSettings | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "isInitializingForm",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "settingsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "task",
                    "defaultValue": "getRootTaskObject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "tree",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskUserInfo | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "editTask",
                    "args": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApi",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getButtonColor",
                    "args": [
                        {
                            "name": "action",
                            "type": "CompleteButtonAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "CompleteButtonAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActionSelected",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUpdateValid",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCurrentSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "onNavItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSettings",
                    "args": [
                        {
                            "name": "newFormValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newFormValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveTask",
                    "args": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TaskMiniComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule, NgClass } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { completeButtonColorMap } from '../../../../models/colors';\r\nimport {\r\n  CompleteButtonAction,\r\n  TaskSettings,\r\n} from '../../../../models/settings';\r\nimport { SettingsService } from '../../../../services/sync-api-cache/settings.service';\r\nimport {\r\n  getRootTaskObject,\r\n  ROOT_TASK_ID,\r\n} from '../../../../models/taskModelManager';\r\nimport { TaskoratorTask } from '../../../../models/taskModelManager';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TaskEditPopupComponent } from '../../../../components/task/task-edit-popup/task-edit-popup.component';\r\nimport { TaskUpdateService } from '../../../../services/tasks/task-update.service';\r\nimport { TaskActions } from '../../../../services/tasks/task-action-tracker.service';\r\nimport { TaskMiniComponent } from '../../../../components/task/task-mini/task-mini.component';\r\nimport { TaskService } from '../../../../services/sync-api-cache/task.service';\r\nimport { TaskUserInfo } from '../../../../models/service-strategies/user';\r\nimport { SessionManagerService } from '../../../../services/session-manager.service';\r\nimport { RouteMetadata } from '../../../../app.routes-models';\r\nimport { Router } from '@angular/router';\r\nimport { NavigationService } from '../../../../services/navigation.service';\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  standalone: true,\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.css'],\r\n  imports: [\r\n    MatIcon,\r\n    MatCardModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TaskMiniComponent,\r\n  ],\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n  settingsForm: FormGroup;\r\n  completeButtonActions: CompleteButtonAction[] = [\r\n    'completed',\r\n    'archived',\r\n    'deleted',\r\n    'seen',\r\n    'todo',\r\n  ];\r\n  currentSettings: TaskSettings | undefined;\r\n  task: TaskoratorTask = getRootTaskObject();\r\n  user: TaskUserInfo | null = null;\r\n  tree: string | null = null;\r\n\r\n  navItems: { path: string; metadata: RouteMetadata }[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private settingsService: SettingsService,\r\n    private taskUpdateService: TaskUpdateService,\r\n    private taskService: TaskService,\r\n    private dialog: MatDialog,\r\n    private sessionService: SessionManagerService,\r\n    private navigationService: NavigationService,\r\n    private router: Router,\r\n    private sessionManager: SessionManagerService\r\n  ) {\r\n    this.settingsForm = this.fb.group({\r\n      isShowArchived: [false],\r\n      isShowCompleted: [false],\r\n      isShowSeen: [true],\r\n      isShowDeleted: [false],\r\n      isShowTodo: [true],\r\n      completeButtonAction: ['completed'],\r\n    });\r\n  }\r\n\r\n  onNavItemClick(item: { path: string; metadata: RouteMetadata }) {\r\n    // const childrenPaths = this.navigationService.getChildrenPaths(item.path);\r\n\r\n    // if (childrenPaths.length > 0) {\r\n    //   this.router.navigate([item.path]);\r\n    // } else {\r\n    this.router.navigate(['gateway/' + item.path]);\r\n    // }\r\n  }\r\n\r\n  // Add a private member to control the save operation\r\n  private isInitializingForm = true;\r\n\r\n  async ngOnInit() {\r\n    // await this.sessionManager.waitForInitialization();\r\n\r\n    // this.loadCurrentSettings();\r\n\r\n    // Subscribe to form value changes with additional logic to prevent loop\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    this.settingsForm.valueChanges.subscribe((newFormValues) => {\r\n      // Only save settings if we're not initializing the form\r\n      if (!this.isInitializingForm) {\r\n        //this.saveSettings(newFormValues);\r\n      }\r\n    });\r\n    // this.treeService.getTree().subscribe((t) => {\r\n    //   if (!t) return;\r\n    //   this.tree = JSON.stringify(t, null, 2);\r\n    // });\r\n\r\n    // TODO: replace with the correct auth\r\n    this.getAuth()\r\n      .getCurrentUser()\r\n      .subscribe((u) => {\r\n        if (!u) return;\r\n        this.taskService.getTaskById(this.task.taskId).then((t) => {\r\n          if (!t) return;\r\n          this.task = t;\r\n        });\r\n\r\n        const userId = this.getAuth().getCurrentUserId();\r\n        if (!userId) return;\r\n        this.getApi()\r\n          .getUserInfo()\r\n          .then((u) => {\r\n            if (!u) return;\r\n            this.user = u;\r\n          });\r\n      });\r\n    this.navItems = this.navigationService.getSettingsPaths();\r\n  }\r\n\r\n  getApi() {\r\n    return this.sessionService.getApiStrategy();\r\n  }\r\n\r\n  getAuth() {\r\n    return this.sessionService.getAuthStrategy();\r\n  }\r\n\r\n  editTask(t: TaskoratorTask) {\r\n    const dialogRef = this.dialog.open(TaskEditPopupComponent, {\r\n      width: '600px',\r\n      data: t, // Pass the task to edit\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        // Update the task in your list or database\r\n        if (typeof result === 'object') {\r\n          console.log('Task updated on server:', result);\r\n          const taskAction: TaskActions = TaskActions.UPDATED;\r\n          const canUpdate = this.isUpdateValid(result);\r\n          if (canUpdate) this.taskUpdateService.update(result, taskAction);\r\n        }\r\n      } else {\r\n        console.log('task not updated or so dialog says...');\r\n      }\r\n    });\r\n  }\r\n\r\n  isUpdateValid(task: TaskoratorTask): boolean {\r\n    if (task.taskId === ROOT_TASK_ID) {\r\n      // Rule 1: Root task must never be marked as !completed\r\n      if (task.stage !== 'completed') {\r\n        console.error('Root task must always be completed.');\r\n        return false;\r\n      }\r\n\r\n      // Rule 3: Root task repeat can only be \"once\" or \"never\"\r\n      if (task.repeat && task.repeat !== 'once' && task.repeat !== 'never') {\r\n        console.error('Root task repeat can only be \"once\" or \"never\".');\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Add further validations for non-root tasks if needed\r\n\r\n    return true; // All validations passed\r\n  }\r\n  saveTask(t: TaskoratorTask) {}\r\n\r\n  private loadCurrentSettings(): void {\r\n    this.settingsService.getSettings().subscribe((currentSettings) => {\r\n      if (currentSettings) {\r\n        // Before patching the form, ensure we're in initialization mode\r\n        this.isInitializingForm = true;\r\n\r\n        // Populate form with current settings\r\n        this.settingsForm.patchValue(currentSettings);\r\n\r\n        // After the form is patched, we're no longer initializing\r\n        setTimeout(() => (this.isInitializingForm = false), 0);\r\n\r\n        // Store currentSettings for later use in merging\r\n        this.currentSettings = currentSettings;\r\n      }\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  private saveSettings(newFormValues: any): void {\r\n    const newSettings: TaskSettings = {\r\n      ...this.currentSettings,\r\n      ...newFormValues,\r\n    };\r\n\r\n    // Save the new, merged settings\r\n    this.settingsService.updateSettings(newSettings);\r\n  }\r\n\r\n  // Add to your existing form or component class\r\n\r\n  // TypeScript will no longer complain about potential null values\r\n  setAction(action: string) {\r\n    this.settingsForm.get('completeButtonAction')?.setValue(action);\r\n  }\r\n\r\n  getColor() {\r\n    const c = this.settingsForm.get('completeButtonAction')?.value;\r\n    return this.getButtonColor(c);\r\n  }\r\n\r\n  isActionSelected(action: string): boolean {\r\n    return this.settingsForm.get('completeButtonAction')?.value === action;\r\n  }\r\n\r\n  getButtonColor(action: CompleteButtonAction): string {\r\n    return completeButtonColorMap[action] || 'black';\r\n  }\r\n\r\n  // saveSettings() {\r\n  //   this.settingsService.setSettings(this.settingsForm.value);\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-section,\r\n.action-section {\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  background-color: #f2f2f2; /* Light grey background for distinction */\r\n  border-radius: 8px;\r\n}\r\n\r\n.filter-title,\r\n.action-title {\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.filter-options label,\r\n.action-buttons button {\r\n  margin-right: 10px;\r\n  white-space: nowrap; /* Keeps the label text on one line */\r\n}\r\n\r\n.filter-options {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows options to wrap to the next line if space is limited */\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.data {\r\n  display: block;\r\n  padding: 5px;\r\n}\r\n\r\n.user-info {\r\n  margin: 20px;\r\n}\r\n",
                    "styleUrl": "./settings.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionManager",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionManager",
                        "type": "SessionManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <form [formGroup]=\"settingsForm\">\r\n  <div class=\"filter-section\">\r\n    <div class=\"filter-title\">Task Filters:</div>\r\n    <div class=\"filter-options\">\r\n      <label\r\n        *ngFor=\"\r\n          let option of ['Archived', 'Completed', 'Deleted', 'Seen', 'Todo']\r\n        \"\r\n      >\r\n        <input type=\"checkbox\" [formControlName]=\"'isShow' + option\" />\r\n        {{ option }}\r\n      </label>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"action-section\">\r\n    <div class=\"action-title\">Complete Action:</div>\r\n    <div class=\"action-buttons\">\r\n      <button\r\n        mat-icon-button\r\n        style=\"background-color: white\"\r\n        [style.color]=\"getColor()\"\r\n      >\r\n        <mat-icon aria-label=\"Complete\">check_circle</mat-icon>\r\n      </button>\r\n      <button\r\n        mat-button\r\n        *ngFor=\"let action of completeButtonActions\"\r\n        (click)=\"setAction(action)\"\r\n        [ngClass]=\"{ active: isActionSelected(action) }\"\r\n        [style.color]=\"getButtonColor(action)\"\r\n      >\r\n        {{ action }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form> -->\r\n\r\n<div class=\"user-info\">\r\n  <span class=\"data\">Allowed Templates: {{ user?.allowedTemplates }}</span>\r\n  <span class=\"data\">Can Create Templates: {{ user?.canCreate }}</span>\r\n  <span class=\"data\">Can Use GPT: {{ user?.canUseGpt }}</span>\r\n  <span class=\"data\">Role: {{ user?.role }}</span>\r\n</div>\r\n\r\n<div class=\"task-container\">\r\n  <div class=\"left-section\">\r\n    <div class=\"navigation-actions\">\r\n      <button class=\"task-btn\" (click)=\"editTask(task)\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n    </div>\r\n    <app-task-mini [task]=\"task\"></app-task-mini>\r\n  </div>\r\n  <div class=\"right-section\">\r\n    <button class=\"task-btn\" (click)=\"saveTask(task)\">\r\n      <mat-icon>save</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"user?.role === 'admin'\">\r\n  <ul class=\"nav-list\">\r\n    <li *ngFor=\"let item of navItems\" (click)=\"onNavItemClick(item)\">\r\n      <mat-icon>{{ item.metadata.icon }}</mat-icon>\r\n      <span class=\"nav-text\">{{ item.metadata.title }}</span>\r\n      <span class=\"nav-alt\">{{ item.metadata.altName }}</span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n<!-- <div>\r\n  <pre>\r\n    {{ tree }}\r\n  </pre>\r\n</div> -->\r\n"
        },
        {
            "name": "StagedTaskListComponent",
            "id": "component-StagedTaskListComponent-7f95afcca21bd1f48424d2b6ac292cda6459d342cdc00993b9cc03f195f89732ed7e4ed885587ea406034f3fadbff6122608e3cfca548ffb667d7ec03b8eb1ff",
            "file": "src/app/components/task/staged-task-list/staged-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-staged-task-list",
            "styleUrls": [
                "./staged-task-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./staged-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TaskoratorTask[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tasksChange",
                    "defaultValue": "new EventEmitter<TaskoratorTask[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "TaskMiniComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NgFor, NgIf } from '@angular/common';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { TaskMiniComponent } from '../task-mini/task-mini.component';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TaskEditPopupComponent } from '../task-edit-popup/task-edit-popup.component';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [NgFor, NgIf, TaskMiniComponent, MatIcon],\r\n  selector: 'app-staged-task-list',\r\n  templateUrl: './staged-task-list.component.html',\r\n  styleUrls: ['./staged-task-list.component.scss'],\r\n})\r\nexport class StagedTaskListComponent {\r\n  @Input() tasks: TaskoratorTask[] = [];\r\n  @Output() tasksChange = new EventEmitter<TaskoratorTask[]>(); // Notify parent about changes\r\n\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  deleteTask(t: TaskoratorTask): void {\r\n    this.tasks = this.tasks.filter((task) => task.taskId !== t.taskId);\r\n    this.tasksChange.emit(this.tasks); // Emit the updated tasks list\r\n  }\r\n\r\n  editTask(task: TaskoratorTask): void {\r\n    const dialogRef = this.dialog.open(TaskEditPopupComponent, {\r\n      width: '600px',\r\n      data: task, // Pass the task to edit\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        console.log('Task updated in memory:', result);\r\n        // Update the task in your list or database\r\n      } else {\r\n        console.log('task not updated or so dialog says...');\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./staged-task-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"task-list\">\r\n  <!-- No Tasks Message -->\r\n  <div *ngIf=\"tasks?.length === 0\" class=\"no-tasks\">\r\n    <p>No tasks.</p>\r\n  </div>\r\n\r\n  <!-- Task List -->\r\n  <div\r\n    *ngFor=\"let task of tasks\"\r\n    class=\"task-container\"\r\n    [class.selected]=\"false\"\r\n  >\r\n    <div class=\"left-section\">\r\n      <button class=\"task-btn\" (click)=\"editTask(task)\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <app-task-mini [task]=\"task\"></app-task-mini>\r\n    </div>\r\n\r\n    <button class=\"task-btn\" (click)=\"deleteTask(task)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskCardComponent",
            "id": "component-TaskCardComponent-2f65f356fac0c04ae16361bba6de6eea16460b6c089df9212a2a2e9737e65f5ed4e4b5f064d3975c72c39db71e4a3c1d4a97ff097d221e5a5896aeb11d4909f7",
            "file": "src/app/components/task/task-card/task-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "defaultValue": "getDefaultTask()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TaskoratorTask",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "thereIsTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { getDefaultTask } from '../../../models/taskModelManager';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { DatePipe, NgClass, NgFor, NgIf } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-task-card',\r\n  standalone: true,\r\n  imports: [DatePipe, NgFor, NgIf, NgClass],\r\n  templateUrl: './task-card.component.html',\r\n  styleUrl: './task-card.component.scss',\r\n})\r\nexport class TaskCardComponent {\r\n  @Input() task: TaskoratorTask = getDefaultTask();\r\n\r\n  thereIsTags() {\r\n    const task = this.task;\r\n    return task?.tags && task.tags.length > 0 && Array.isArray(task.tags);\r\n  }\r\n}\r\n",
            "styleUrl": "./task-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- Improved Task Card -->\r\n<div\r\n  *ngIf=\"task\"\r\n  class=\"card bg-base-100 shadow-md max-w-xl mx-auto rounded-t-lg border-l-4 border-primary\"\r\n>\r\n  <div class=\"card-body p-4\">\r\n    <!-- header -->\r\n    <div class=\"flex justify-between items-start mb-2\">\r\n      <h3 class=\"text-lg font-bold break-words leading-snug\">\r\n        {{ task.name }}\r\n      </h3>\r\n\r\n      <span\r\n        class=\"badge badge-sm\"\r\n        [ngClass]=\"task.priority > 7 ? 'badge-error' : 'badge-ghost'\"\r\n      >\r\n        P: {{ task.priority }}\r\n      </span>\r\n    </div>\r\n\r\n    <!-- task details -->\r\n    <div class=\"space-y-1 text-sm\">\r\n      <p *ngIf=\"task.todo\">{{ task.todo }}</p>\r\n      <p *ngIf=\"task.why\" class=\"italic\">Reason: {{ task.why }}</p>\r\n      <a\r\n        *ngIf=\"task.backupLink\"\r\n        [href]=\"task.backupLink\"\r\n        class=\"link link-primary\"\r\n        >Link</a\r\n      >\r\n\r\n      <div *ngIf=\"thereIsTags()\" class=\"flex flex-wrap gap-1 pt-1\">\r\n        <span\r\n          *ngFor=\"let tag of task.tags\"\r\n          class=\"badge badge-ghost badge-xs\"\r\n          >{{ tag }}</span\r\n        >\r\n      </div>\r\n\r\n      <div class=\"flex flex-wrap gap-2 pt-1\">\r\n        <span *ngIf=\"task.status\" class=\"badge badge-outline badge-xs\"\r\n          >Status: {{ task.status }}</span\r\n        >\r\n        <span *ngIf=\"task.stage\" class=\"badge badge-outline badge-xs\"\r\n          >Stage: {{ task.stage }}</span\r\n        >\r\n        <span *ngIf=\"task.duration\" class=\"badge badge-outline badge-xs\"\r\n          >Dur: {{ task.duration }}</span\r\n        >\r\n        <span *ngIf=\"task.type\" class=\"badge badge-outline badge-xs\"\r\n          >Type: {{ task.type }}</span\r\n        >\r\n        <span *ngIf=\"task.subtype\" class=\"badge badge-outline badge-xs\"\r\n          >Subtype: {{ task.subtype }}</span\r\n        >\r\n        <span *ngIf=\"task.size\" class=\"badge badge-outline badge-xs\"\r\n          >Size: {{ task.size }}</span\r\n        >\r\n        <span *ngIf=\"task.owner\" class=\"badge badge-outline badge-xs\"\r\n          >Owner: {{ task.owner }}</span\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <!-- footer -->\r\n    <div\r\n      class=\"mt-3 flex flex-wrap gap-3 text-xs text-gray-500 justify-between\"\r\n    >\r\n      <span>Created: {{ task.timeCreated | date : \"short\" }}</span>\r\n      <span>Updated: {{ task.lastUpdated | date : \"short\" }}</span>\r\n      <span *ngIf=\"task.timeEnd\"\r\n        >Deadline: {{ task.timeEnd | date : \"short\" }}</span\r\n      >\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskEditComponent",
            "id": "component-TaskEditComponent-d6593f7413ef219d81b70b76984d335c96b67fb6b74f46c7d6a0e6fbf26e3540cfd9aecf8a0dd61107fa2e9ed2e731820db302bcfe030a961a7abba225dafa89",
            "file": "src/app/components/task-edit/task-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-edit",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-edit.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isPopup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "task",
                    "defaultValue": "getDefaultTask()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TaskoratorTask",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "durationDisplay",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "endTimeDisplay",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDuration",
                    "args": [
                        {
                            "name": "newDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimeEnd",
                    "args": [
                        {
                            "name": "newTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { getRandomTask } from '../../test-files/test-data/test-task';\r\nimport { getDefaultTask, TaskoratorTask } from '../../models/taskModelManager';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TaskUpdateService } from '../../services/tasks/task-update.service';\r\nimport {\r\n  TaskAction,\r\n  TaskActions,\r\n} from '../../services/tasks/task-action-tracker.service';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { NgIf } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-task-edit',\r\n  standalone: true,\r\n  imports: [FormsModule, MatIcon, NgIf],\r\n  templateUrl: './task-edit.component.html',\r\n  styleUrl: './task-edit.component.scss',\r\n})\r\nexport class TaskEditComponent {\r\n  // @Input() task: Task = getRandomTask();\r\n  @Input() task: TaskoratorTask = getDefaultTask();\r\n  @Input() isPopup: boolean = true;\r\n\r\n  // Display values for duration and end time\r\n  endTimeDisplay: string | null = null;\r\n  durationDisplay: number | null = null;\r\n  constructor(private taskUpdateService: TaskUpdateService) {}\r\n\r\n  ngOnInit() {\r\n    // Convert initial task values from milliseconds\r\n    this.endTimeDisplay = this.task.timeEnd\r\n      ? new Date(this.task.timeEnd).toISOString().slice(0, 16) // Format for datetime-local\r\n      : null;\r\n\r\n    this.durationDisplay = this.task.duration\r\n      ? this.task.duration / 60000\r\n      : null; // Convert to minutes\r\n  }\r\n\r\n  onSave(t: TaskoratorTask) {\r\n    if (t) {\r\n      const taskAction: TaskActions = TaskActions.UPDATED;\r\n      this.taskUpdateService.update(t, taskAction);\r\n    }\r\n  }\r\n\r\n  updateTimeEnd(newTime: string) {\r\n    // Convert from datetime-local string to milliseconds\r\n    this.task.timeEnd = new Date(newTime).getTime();\r\n  }\r\n\r\n  updateDuration(newDuration: number) {\r\n    // Convert from minutes to milliseconds\r\n    this.task.duration = newDuration * 60000;\r\n  }\r\n}\r\n",
            "styleUrl": "./task-edit.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "taskUpdateService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"component-width\">\r\n  <!-- Task Title -->\r\n  <div class=\"form-group\">\r\n    <label for=\"task-title\">Title:</label>\r\n    <input\r\n      id=\"task-title\"\r\n      type=\"text\"\r\n      [(ngModel)]=\"task.name\"\r\n      placeholder=\"Enter task title\"\r\n    />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"task-backup-link\">Link:</label>\r\n    <input\r\n      id=\"task-backup-link\"\r\n      type=\"url\"\r\n      [(ngModel)]=\"task.backupLink\"\r\n      placeholder=\"Enter link (URL)\"\r\n    />\r\n  </div>\r\n\r\n  <!-- Task Description -->\r\n  <div class=\"form-group\">\r\n    <label for=\"task-description\">Description:</label>\r\n    <input\r\n      id=\"task-description\"\r\n      type=\"text\"\r\n      [(ngModel)]=\"task.todo\"\r\n      placeholder=\"Enter task description\"\r\n    />\r\n  </div>\r\n  <!-- Task Why -->\r\n  <div class=\"form-group\">\r\n    <label for=\"task-why\">Why:</label>\r\n    <input\r\n      id=\"task-why\"\r\n      type=\"text\"\r\n      [(ngModel)]=\"task.why\"\r\n      placeholder=\"Enter task reason why\"\r\n    />\r\n  </div>\r\n\r\n  <!-- Task Status and Priority -->\r\n  <div class=\"form-group duo\">\r\n    <div>\r\n      <label for=\"task-priority\">Priority:</label>\r\n      <input\r\n        id=\"task-priority\"\r\n        type=\"number\"\r\n        [(ngModel)]=\"task.priority\"\r\n        min=\"1\"\r\n        max=\"10\"\r\n        placeholder=\"Enter priority (1-10)\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <label for=\"task-stage\">Stage:</label>\r\n      <select id=\"task-stage\" [(ngModel)]=\"task.stage\">\r\n        <option value=\"todo\">To Do</option>\r\n        <option value=\"seen\">Seen</option>\r\n        <option value=\"completed\">Completed</option>\r\n        <option value=\"archived\">Archived</option>\r\n        <option value=\"deleted\">Deleted</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Task Repeat and Stage -->\r\n  <div class=\"form-group duo\">\r\n    <div>\r\n      <label for=\"task-type\">Type:</label>\r\n      <select id=\"task-type\" [(ngModel)]=\"task.type\">\r\n        <option value=\"\">None</option>\r\n        <option value=\"code\">Code</option>\r\n        <option value=\"idea\">Idea</option>\r\n        <option value=\"note\">Note</option>\r\n        <option value=\"todo\">To Do</option>\r\n        <option value=\"checklist\">Checklist</option>\r\n        <option value=\"tree\">Decision Tree</option>\r\n        <option value=\"flowchart\">Flowchart</option>\r\n        <option value=\"task\">Task</option>\r\n        <option value=\"next\">Next</option>\r\n        <option value=\"job\">Job</option>\r\n        <option value=\"feature\">Feature</option>\r\n        <option value=\"schedule\">Schedule</option>\r\n        <option value=\"project\">Project</option>\r\n      </select>\r\n    </div>\r\n    <div>\r\n      <label for=\"task-repeat\">Repeat:</label>\r\n      <select id=\"task-repeat\" [(ngModel)]=\"task.repeat\">\r\n        <option value=\"once\">Once</option>\r\n        <option value=\"never\">Never</option>\r\n        <option value=\"half-hourly\">Half-Hourly</option>\r\n        <option value=\"hourly\">Hourly</option>\r\n        <option value=\"half-daily\">Half-Daily</option>\r\n        <option value=\"daily\">Daily</option>\r\n        <option value=\"weekly\">Weekly</option>\r\n        <option value=\"half-monthly\">Half-Monthly</option>\r\n        <option value=\"monthly\">Monthly</option>\r\n        <option value=\"three-monthly\">Three-Monthly</option>\r\n        <option value=\"half-yearly\">Half-Yearly</option>\r\n        <option value=\"yearly\">Yearly</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Task End Time and Duration -->\r\n  <div class=\"form-group duo\">\r\n    <div>\r\n      <label for=\"task-duration\">Duration (Minutes):</label>\r\n      <input\r\n        id=\"task-duration\"\r\n        type=\"number\"\r\n        [(ngModel)]=\"durationDisplay\"\r\n        (ngModelChange)=\"updateDuration($event)\"\r\n        min=\"0\"\r\n        placeholder=\"Enter duration\"\r\n      />\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group duo\">\r\n    <div>\r\n      <label for=\"task-end-time\">End Time (Optional):</label>\r\n      <input\r\n        id=\"task-end-time\"\r\n        type=\"datetime-local\"\r\n        [(ngModel)]=\"endTimeDisplay\"\r\n        (ngModelChange)=\"updateTimeEnd($event)\"\r\n        placeholder=\"Select end time\"\r\n      />\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!isPopup\" class=\"form-actions\">\r\n    <button\r\n      type=\"button\"\r\n      mat-icon-button\r\n      color=\"primary\"\r\n      class=\"task-btn\"\r\n      (click)=\"onSave(task)\"\r\n    >\r\n      <mat-icon>save</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Placeholder Buttons for Future Features -->\r\n  <div class=\"form-actions\">\r\n    <button\r\n      type=\"button\"\r\n      mat-raised-button\r\n      class=\"app-button future-feature-button\"\r\n      disabled\r\n    >\r\n      Edit Tags\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      mat-raised-button\r\n      class=\"app-button future-feature-button\"\r\n      disabled\r\n    >\r\n      Edit Owner\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      mat-raised-button\r\n      class=\"app-button future-feature-button\"\r\n      disabled\r\n    >\r\n      Add Image\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- TODO: task edit subtype and size to be added later if needed -->\r\n<!-- <div class=\"form-group duo\">\r\n  <div>\r\n    <label for=\"task-size\">Size:</label>\r\n    <select id=\"task-size\" [(ngModel)]=\"task.size\">\r\n      <option value=\"do now\">Do Now</option>\r\n      <option value=\"split\">Split</option>\r\n      <option value=\"delegate\">Delegate</option>\r\n    </select>\r\n  </div>\r\n  <div>\r\n    <label for=\"task-subtype\">Subtype:</label>\r\n    <select id=\"task-subtype\" [(ngModel)]=\"task.subtype\">\r\n      <option value=\"\">None</option>\r\n      <option value=\"js\">JavaScript</option>\r\n      <option value=\"ts\">TypeScript</option>\r\n      <option value=\"html\">HTML</option>\r\n      <option value=\"css\">CSS</option>\r\n      <option value=\"sound\">Sound</option>\r\n      <option value=\"android\">Android</option>\r\n      <option value=\"angular\">Angular</option>\r\n      <option value=\"nodejs\">Node.js</option>\r\n      <option value=\"java\">Java</option>\r\n      <option value=\"text\">Text</option>\r\n      <option value=\"list\">List</option>\r\n    </select>\r\n  </div>\r\n</div> -->\r\n"
        },
        {
            "name": "TaskEditPopupComponent",
            "id": "component-TaskEditPopupComponent-0d465d411832a615cd2c815b6251c9fd24a2606e2aa8586a0c5b6bf548ffb276b804a882719b26958429ad8da7e74c0dc9993ab3484875765f09e50293f01b8f",
            "file": "src/app/components/task/task-edit-popup/task-edit-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-edit-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-edit-popup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<TaskEditPopupComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogContent"
                },
                {
                    "name": "MatDialogActions"
                },
                {
                    "name": "MatDialogTitle"
                },
                {
                    "name": "TaskEditComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n  MatDialogContent,\r\n  MatDialogActions,\r\n  MatDialogTitle,\r\n} from '@angular/material/dialog';\r\nimport { TaskEditComponent } from '../../task-edit/task-edit.component';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-task-edit-popup',\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogContent,\r\n    MatDialogActions,\r\n    MatDialogTitle,\r\n    TaskEditComponent,\r\n    MatIcon,\r\n  ],\r\n  templateUrl: './task-edit-popup.component.html',\r\n  styleUrl: './task-edit-popup.component.scss',\r\n})\r\nexport class TaskEditPopupComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<TaskEditPopupComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public task: TaskoratorTask\r\n  ) {}\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSave(task: TaskoratorTask): void {\r\n    console.log('Saving task:', task);\r\n    this.dialogRef.close(task);\r\n  }\r\n}\r\n",
            "styleUrl": "./task-edit-popup.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskEditPopupComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "task",
                        "type": "TaskoratorTask",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskEditPopupComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "task",
                        "type": "TaskoratorTask",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h2 mat-dialog-title class=\"dialog-title\">Edit Task</h2>\r\n<!-- <mat-dialog-title>Edit Task</mat-dialog-title> -->\r\n<mat-dialog-content>\r\n  <app-task-edit [task]=\"task\"></app-task-edit>\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <button\r\n    mat-icon-button\r\n    color=\"primary\"\r\n    style=\"color: rgb(15, 177, 75)\"\r\n    class=\"task-btn\"\r\n    (click)=\"onSave(task)\"\r\n    aria-label=\"Save Task\"\r\n  >\r\n    <mat-icon>check</mat-icon>\r\n  </button>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "TaskMiniComponent",
            "id": "component-TaskMiniComponent-e442904fe7686c378916ff0b729fd5481b64eadd6b6ab3ee2ca9b5cab1f04275ec03b0de3eaa4a3e6975fbff13075080998b3fb19d5b8d8546562a0e2914bb00",
            "file": "src/app/components/task/task-mini/task-mini.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-mini",
            "styleUrls": [
                "./task-mini.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-mini.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "overlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TaskoratorTask | null | undefined",
                    "decorators": []
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TaskoratorTask | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "editTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatusColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTaskCardClick",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewDetails",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { completeButtonColorMap } from '../../../models/colors';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { SelectedMultipleService } from '../../../services/tasks/selected-multiple.service';\r\nimport { SelectedTaskService } from '../../../services/tasks/selected-task.service';\r\n\r\n@Component({\r\n  selector: 'app-task-mini',\r\n  standalone: true,\r\n  templateUrl: './task-mini.component.html',\r\n  styleUrls: ['./task-mini.component.scss'],\r\n  imports: [CommonModule, MatIcon],\r\n})\r\nexport class TaskMiniComponent {\r\n  @Input() task: TaskoratorTask | undefined;\r\n  @Input() overlord: TaskoratorTask | null | undefined;\r\n  expanded = false;\r\n\r\n  constructor(\r\n    private selectedMultiple: SelectedMultipleService,\r\n    private selected: SelectedTaskService\r\n  ) {}\r\n\r\n  viewDetails(task: TaskoratorTask | undefined) {\r\n    console.log(task);\r\n  }\r\n\r\n  editTask(task: TaskoratorTask | undefined) {\r\n    console.log(task);\r\n  }\r\n\r\n  getStatusColor() {\r\n    return this.task?.stage ? completeButtonColorMap[this.task.stage] : 'black';\r\n  }\r\n\r\n  onTaskCardClick(task: TaskoratorTask | undefined) {\r\n    if (!task) return;\r\n    this.selectedMultiple.addRemoveSelectedTask(task);\r\n    this.selected.setSelectedTask(task);\r\n  }\r\n\r\n  isSelected(task: TaskoratorTask | undefined): boolean {\r\n    if (!task) return false;\r\n    return this.selectedMultiple.isSelected(task);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .mini-task-details {\r\n//   flex-grow: 1;\r\n//   cursor: pointer;\r\n// }\r\n// .mini-task-details:hover {\r\n//   color: #999;\r\n// }\r\n\r\n.task-title {\r\n  margin-left: 10px;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  text-align: center;\r\n\r\n  /* Break long words and wrap text */\r\n  word-wrap: break-word; /* Ensure long words break */\r\n  overflow-wrap: anywhere; /* Allow breaking at any point for long words */\r\n\r\n  /* Prevent horizontal overflow */\r\n  max-width: 400px; /* Constrain width */\r\n  white-space: normal; /* Allow text wrapping */\r\n\r\n  @media (max-width: 480px) {\r\n    font-size: 10px;\r\n    margin-left: 3px;\r\n    margin-top: 3px;\r\n    max-width: 200px;\r\n  }\r\n\r\n  @media (min-width: 481px) and (max-width: 768px) {\r\n    font-size: 12px;\r\n    margin-left: 1px;\r\n    margin-top: 1px;\r\n    max-width: 230px;\r\n  }\r\n}\r\n\r\n.task-info {\r\n  font-size: 0.85rem;\r\n  color: #666;\r\n}\r\n\r\n.task-due-date {\r\n  margin-right: 10px;\r\n}\r\n\r\n.task-duration,\r\n.task-priority {\r\n  margin-right: 5px;\r\n}\r\n\r\n.high-priority {\r\n  color: #ff6347; /* Tomato color for high priority */\r\n}\r\n\r\n.task-actions button {\r\n  margin: 0 5px;\r\n}\r\n\r\n.selected-task {\r\n  border-color: #007bff;\r\n}\r\n",
                    "styleUrl": "./task-mini.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selected",
                        "type": "SelectedTaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selected",
                        "type": "SelectedTaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n  [ngClass]=\"{ 'selected-task': isSelected(task) }\"\r\n  (click)=\"onTaskCardClick(task)\"\r\n>\r\n  <!-- Use the safe navigation operator to safely access task properties -->\r\n  <p class=\"task-title\">{{ task?.name }}</p>\r\n</div>\r\n"
        },
        {
            "name": "TaskNavigatorComponent",
            "id": "component-TaskNavigatorComponent-40ef85b5a0ec3161ef61dd51541fecb8b58327b601f12559d0a8f3873295b3b8d70a4ae92eb93ed568627ad5056039db3ee2e21721903eae15b86aedc23e3079",
            "file": "src/app/components/task-navigator/task-navigator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-navigator",
            "styleUrls": [
                "./task-navigator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-navigator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showArtificer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "selectedOverlord",
                    "defaultValue": "getRootTaskObject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | TaskoratorTask",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "selectedTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "tasks",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "canShowInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "feedback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAgeColor",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateBasedColor",
                    "args": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressPercent",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskNodeInfo | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskNodeInfo | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskStatus",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTreeNodeData",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskNodeInfo | null",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBack",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBackPrevious",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isShowMoreEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNext",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TaskMiniComponent",
                    "type": "component"
                },
                {
                    "name": "ArtificerActionComponent",
                    "type": "component"
                },
                {
                    "name": "ArtificerComponent",
                    "type": "component"
                },
                {
                    "name": "OverlordNavigatorComponent",
                    "type": "component"
                },
                {
                    "name": "TaskEditComponent",
                    "type": "component"
                },
                {
                    "name": "TaskCardComponent",
                    "type": "component"
                }
            ],
            "description": "<ul>\n<li>on going back highlight the task we just viewed</li>\n</ul>\n",
            "rawdescription": "\n\n- on going back highlight the task we just viewed\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport {\r\n  ExtendedTask,\r\n  getRootTaskObject,\r\n  TaskoratorTask,\r\n} from '../../models/taskModelManager';\r\nimport { TaskViewService } from '../../services/tasks/task-view.service';\r\nimport { ArtificerComponent } from '../artificer/artificer.component';\r\nimport { ArtificerActionComponent } from '../task/artificer-action/artificer-action.component';\r\nimport { TaskMiniComponent } from '../task/task-mini/task-mini.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { TreeService } from '../../services/sync-api-cache/tree.service';\r\nimport { SelectedMultipleService } from '../../services/tasks/selected-multiple.service';\r\nimport { TaskNavigatorUltraService } from '../../services/tasks/task-navigator-ultra.service';\r\nimport { OverlordNavigatorComponent } from '../overlord-navigator/overlord-navigator.component';\r\nimport { TaskEditComponent } from '../task-edit/task-edit.component';\r\nimport { SelectedOverlordService } from '../../services/tasks/selected-overlord.service';\r\nimport { TaskService } from '../../services/sync-api-cache/task.service';\r\nimport { TaskCardComponent } from '../task/task-card/task-card.component';\r\nimport { TaskNodeInfo } from '../../models/taskTree';\r\nimport { ColorService } from '../../services/utils/color.service';\r\nimport { ErrorService } from '../../services/core/error.service';\r\nimport {\r\n  TaskUiStatus,\r\n  TaskStatusService,\r\n} from '../../services/tasks/task-status.service';\r\n\r\n/**\r\n * @Requirements:\r\n * - on going back highlight the task we just viewed\r\n */\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIcon,\r\n    CommonModule,\r\n    TaskMiniComponent,\r\n    ArtificerActionComponent,\r\n    ArtificerComponent,\r\n    OverlordNavigatorComponent,\r\n    TaskEditComponent,\r\n    TaskCardComponent,\r\n  ],\r\n  selector: 'app-task-navigator',\r\n  templateUrl: './task-navigator.component.html',\r\n  styleUrls: ['./task-navigator.component.scss'],\r\n})\r\nexport class TaskNavigatorComponent implements OnInit {\r\n  @Input() showArtificer: boolean = false;\r\n  tasks: ExtendedTask[] | null = null; // Support any list of tasks\r\n  selectedOverlord: ExtendedTask | TaskoratorTask = getRootTaskObject();\r\n  errorMessage: string | null = null;\r\n  selectedTasks: TaskoratorTask[] = [];\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private treeService: TreeService,\r\n    private selectedMultiple: SelectedMultipleService,\r\n    private selectedOverlordService: SelectedOverlordService,\r\n    private viewService: TaskViewService,\r\n    private taskService: TaskService,\r\n    private colorService: ColorService,\r\n    private errorService: ErrorService,\r\n    private taskStatusService: TaskStatusService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.viewService.tasks$.subscribe({\r\n      next: (tasks) => {\r\n        this.tasks = tasks;\r\n        this.errorMessage = null;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error updating tasks:', err);\r\n        this.errorMessage = 'Failed to update tasks.';\r\n      },\r\n    });\r\n\r\n    this.selectedMultiple\r\n      .getSelectedTasks()\r\n      .subscribe((selectedTasks: TaskoratorTask[]) => {\r\n        this.selectedTasks = selectedTasks;\r\n      });\r\n\r\n    this.selectedOverlordService\r\n      .getSelectedOverlordObservable()\r\n      .subscribe((id: string | null) => {\r\n        if (!id) return;\r\n        this.taskService.getTaskById(id).then((t: ExtendedTask | null) => {\r\n          if (!t) return;\r\n          this.selectedOverlord = t;\r\n        });\r\n      });\r\n  }\r\n\r\n  getTaskStatus(taskId: string) {\r\n    const status = this.taskStatusService.getStatus(taskId);\r\n    return status;\r\n  }\r\n\r\n  canShowInfo(): boolean {\r\n    if (!this.tasks) return false;\r\n    if (!this.selectedOverlord) return false;\r\n    if (this.tasks.length === 0) return false;\r\n    return true;\r\n  }\r\n\r\n  async onNext(task: ExtendedTask): Promise<void> {\r\n    try {\r\n      await this.navigatorService.next(task.taskId);\r\n      this.taskStatusService.setStatus(task.taskId, 'viewed');\r\n    } catch (error: any) {\r\n      this.errorService.warn('Failed to navigate to next tasks.');\r\n    }\r\n  }\r\n\r\n  async goBack(task?: ExtendedTask): Promise<void> {\r\n    try {\r\n      await this.navigatorService.backToStart();\r\n    } catch (error: any) {\r\n      this.errorService.warn('Failed to navigate back.');\r\n    }\r\n  }\r\n\r\n  async goBackPrevious(task?: ExtendedTask): Promise<void> {\r\n    try {\r\n      await this.navigatorService.backToPrevious();\r\n    } catch (error: any) {\r\n      console.error('Error navigating back:', error);\r\n      this.errorService.warn('Failed to navigate back.');\r\n    }\r\n  }\r\n\r\n  isShowMoreEnabled(): boolean {\r\n    return false; // Placeholder: Update this logic as needed.\r\n  }\r\n\r\n  getTreeNodeData(task: ExtendedTask): TaskNodeInfo | null {\r\n    return this.treeService.getTaskTreeData(task.taskId);\r\n  }\r\n\r\n  isSelected(task: ExtendedTask): boolean {\r\n    return this.selectedTasks.indexOf(task) > -1;\r\n  }\r\n\r\n  getDateBasedColor(timestamp: number): string {\r\n    return this.colorService.getDateBasedColor(timestamp);\r\n  }\r\n\r\n  getAgeColor(task: TaskoratorTask): string {\r\n    return this.colorService.getAgeColor(task);\r\n  }\r\n\r\n  getProgressPercent(node: TaskNodeInfo | null): number {\r\n    return this.colorService.getProgressPercent(node);\r\n  }\r\n\r\n  warn(msg: string): void {\r\n    this.errorService.warn(msg);\r\n  }\r\n\r\n  feedback(msg: string): void {\r\n    this.errorService.feedback(msg);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".gap {\r\n  height: 20px;\r\n}\r\n.task-content-wrapper {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  flex-grow: 1;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n}\r\n\r\n.left-section,\r\n.right-section {\r\n  flex: 1 1 auto;\r\n  overflow: hidden;\r\n}\r\n\r\n.left-section {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.right-section {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.navigation-actions {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-right: 10px;\r\n}\r\n\r\n.selected {\r\n  background-color: #2175ad;\r\n}\r\n\r\n/* Mini Task Styles */\r\n.mini-task {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.mini-task-details {\r\n  flex-grow: 1;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.task-title {\r\n  margin-left: 10px;\r\n  font-weight: bold;\r\n  color: #333;\r\n  text-align: left;\r\n}\r\n\r\n.task-info {\r\n  font-size: 0.85rem;\r\n  color: #666;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n/* Medium Screen Adjustments */\r\n@media (min-width: 481px) and (max-width: 768px) {\r\n  .task-navigator-layout {\r\n    padding: 8px;\r\n    width: 100%;\r\n    max-width: 360px;\r\n  }\r\n\r\n  .task-content-wrapper {\r\n    flex-direction: row;\r\n    overflow-x: auto;\r\n  }\r\n\r\n  .task-list {\r\n    padding: 8px;\r\n    max-width: calc(100% - 70px);\r\n    overflow-wrap: break-word;\r\n  }\r\n\r\n  .app-artificer {\r\n    position: relative;\r\n    width: 50px; /* Reduced size for medium screens */\r\n    height: auto;\r\n  }\r\n\r\n  .task-container {\r\n    padding: 8px;\r\n  }\r\n\r\n  .mini-task-details {\r\n    font-size: 0.85rem;\r\n  }\r\n\r\n  .task-title {\r\n    font-size: 0.9rem;\r\n  }\r\n\r\n  .task-info {\r\n    font-size: 0.8rem;\r\n  }\r\n}\r\n\r\n/* Mobile Adjustments */\r\n@media (max-width: 480px) {\r\n  .task-navigator-layout {\r\n    padding: 5px;\r\n    width: 360px;\r\n    max-width: 360px;\r\n  }\r\n\r\n  .task-content-wrapper {\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    overflow-x: auto;\r\n  }\r\n\r\n  .task-list {\r\n    padding: 5px;\r\n    max-width: calc(100% - 70px);\r\n  }\r\n\r\n  .app-artificer {\r\n    width: 60px;\r\n  }\r\n\r\n  .task-container {\r\n    padding: 6px;\r\n  }\r\n\r\n  .mini-task-details {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  .task-title {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  .task-info {\r\n    font-size: 0.7rem;\r\n  }\r\n}\r\n.task-container {\r\n  position: relative;\r\n  background-color: white; /* default */\r\n  background-image: linear-gradient(\r\n    to right,\r\n    var(--progress-color, transparent) var(--progress-percent, 0%),\r\n    transparent var(--progress-percent, 0%)\r\n  );\r\n  border-left: 4px solid transparent;\r\n  border-bottom: 4px solid transparent;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.task-container.selected {\r\n  background-color: #2175ad !important;\r\n  background-image: none !important;\r\n}\r\n\r\n.task-container.viewed {\r\n  box-shadow: 0 0 8px 2px #4caf50cc;\r\n  transition: box-shadow 0.3s ease;\r\n  z-index: 2;\r\n}\r\n\r\n.task-container.updated {\r\n  border: 2px solid #2196f3;\r\n  transition: border-color 0.3s ease;\r\n}\r\n",
                    "styleUrl": "./task-navigator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewService",
                        "type": "TaskViewService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskStatusService",
                        "type": "TaskStatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewService",
                        "type": "TaskViewService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskStatusService",
                        "type": "TaskStatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"task-navigator-layout\">\r\n  <div class=\"task-content-wrapper\">\r\n    <!-- Conditionally Render Artificer -->\r\n    <ng-container *ngIf=\"showArtificer\">\r\n      <div class=\"app-artificer-container\">\r\n        <app-artificer></app-artificer>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <!-- Task List -->\r\n    <div class=\"task-list\">\r\n      <!-- <app-overlord-navigator></app-overlord-navigator> -->\r\n\r\n      <div *ngIf=\"tasks?.length === 0\" class=\"no-tasks\">\r\n        <app-task-edit\r\n          [task]=\"selectedOverlord\"\r\n          [isPopup]=\"false\"\r\n        ></app-task-edit>\r\n        <p>No other tasks yet.</p>\r\n      </div>\r\n      <div *ngIf=\"canShowInfo()\" class=\"no-tasks\">\r\n        <app-task-card [task]=\"selectedOverlord\"></app-task-card>\r\n      </div>\r\n      <div class=\"gap\"></div>\r\n      <div\r\n        *ngFor=\"let task of tasks\"\r\n        class=\"task-container\"\r\n        [class.selected]=\"isSelected(task)\"\r\n        [class.viewed]=\"getTaskStatus(task.taskId) === 'viewed'\"\r\n        [class.updated]=\"getTaskStatus(task.taskId) === 'updated'\"\r\n        [style.borderLeftColor]=\"getDateBasedColor(task.timeCreated)\"\r\n        [style.borderBottom]=\"\r\n          getProgressPercent(getTreeNodeData(task)) > 0\r\n            ? '4px solid transparent'\r\n            : 'none'\r\n        \"\r\n        [style.--progress-color]=\"'#4caf5044'\"\r\n        [style.--progress-percent]=\"getProgressPercent(getTreeNodeData(task))\"\r\n      >\r\n        <div class=\"left-section\">\r\n          <div class=\"navigation-actions\">\r\n            <!-- <button class=\"task-btn\" (click)=\"onPrevious(task)\">\r\n              <mat-icon>arrow_back</mat-icon>\r\n            </button> -->\r\n            <button class=\"task-btn\" (click)=\"onNext(task)\">\r\n              <mat-icon>arrow_forward</mat-icon>\r\n            </button>\r\n          </div>\r\n          <app-task-mini [task]=\"task\"></app-task-mini>\r\n          <div *ngIf=\"isShowMoreEnabled()\" class=\"show-more\">\r\n            {{ task.why }} - {{ task.todo }}\r\n          </div>\r\n        </div>\r\n        <div class=\"right-section\">\r\n          <app-artificer-action\r\n            [treeNode]=\"getTreeNodeData(task)\"\r\n            [task]=\"task\"\r\n          ></app-artificer-action>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskNavigatorComponent",
            "id": "component-TaskNavigatorComponent-f71a90b3d32f6b0bcdcf8ccc0ba979aca983eb43df3380425320c750cf6c6548f23141912fe219891af9d71074a12830179dbe0581f9429a02c63d4f040f253a-1",
            "file": "src/app/test-files/test-components/task-navigator/task-navigator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-navigator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-navigator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-task-navigator',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './task-navigator.component.html',\r\n  styleUrl: './task-navigator.component.scss'\r\n})\r\nexport class TaskNavigatorComponent {\r\n\r\n}\r\n",
            "styleUrl": "./task-navigator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TaskNavigatorComponent-1",
            "templateData": "<p>task-navigator works!</p>\r\n"
        },
        {
            "name": "TaskNavigatorTestComponent",
            "id": "component-TaskNavigatorTestComponent-837d07f13c54bf480c7c78cd83e5d860223dce1e8aa48a7246ee94ff343fd21943edb693bdcf67b88d221d73ca311569ef93e8dd6b43ef99091ef4fa07a0ce51",
            "file": "src/app/components/task-navigator/task-navigator-test/task-navigator-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-navigator-test",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "../task-navigator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showArtificer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "MAX_AGE_MS",
                    "defaultValue": "365 * 24 * 60 * 60 * 1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "selectedOverlord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tasks",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask[] | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "canShowInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAgeColor",
                    "args": [
                        {
                            "name": "ageRatio",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ageRatio",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAgeRatio",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskoratorTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateBasedColor",
                    "args": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressPercent",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskNodeInfo | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskNodeInfo | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTreeNodeData",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskNodeInfo | null",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve tree node data for the specified task.\n",
                    "description": "<p>Retrieve tree node data for the specified task.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBack",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigate back to the previous view or selected overlord's tasks.\n",
                    "description": "<p>Navigate back to the previous view or selected overlord&#39;s tasks.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBackPrevious",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigate back to the previous view or selected overlord's tasks.\n",
                    "description": "<p>Navigate back to the previous view or selected overlord&#39;s tasks.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a task is selected.\n",
                    "description": "<p>Check if a task is selected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isShowMoreEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if \"Show More\" feature is enabled for the task.\n",
                    "description": "<p>Check if &quot;Show More&quot; feature is enabled for the task.</p>\n"
                },
                {
                    "name": "logError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLog errors in the console and optionally handle display.\n",
                    "description": "<p>Log errors in the console and optionally handle display.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNext",
                    "args": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigate to the next set of tasks for a given task.\n",
                    "description": "<p>Navigate to the next set of tasks for a given task.</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "ExtendedTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TaskMiniComponent",
                    "type": "component"
                },
                {
                    "name": "ArtificerComponent",
                    "type": "component"
                },
                {
                    "name": "OverlordNavigatorComponentTest",
                    "type": "component"
                },
                {
                    "name": "ArtificerActionComponentTest",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ExtendedTask } from '../../../models/taskModelManager';\r\nimport { TaskNodeInfo } from '../../../models/taskTree';\r\nimport { TreeService } from '../../../services/sync-api-cache/tree.service';\r\nimport { SelectedMultipleService } from '../../../services/tasks/selected-multiple.service';\r\nimport { TaskoratorTask } from '../../../models/taskModelManager';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { ArtificerComponent } from '../../artificer/artificer.component';\r\nimport { TaskMiniComponent } from '../../task/task-mini/task-mini.component';\r\nimport { OverlordNavigatorComponentTest } from '../../overlord-navigator/overlord-navigator-test.component';\r\nimport { TaskListKey, TaskListType } from '../../../models/task-list-model';\r\nimport { getRandomTasks } from '../../../test-files/test-data/test-task';\r\nimport { TaskTransmutationService } from '../../../services/tasks/task-transmutation.service';\r\nimport { ArtificerActionComponentTest } from '../../task/artificer-action/artificer-action-test.component';\r\nimport { ColorService } from '../../../services/utils/color.service';\r\n\r\n@Component({\r\n  selector: 'app-task-navigator-test',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIcon,\r\n    CommonModule,\r\n    TaskMiniComponent,\r\n    ArtificerComponent,\r\n    OverlordNavigatorComponentTest,\r\n    ArtificerActionComponentTest,\r\n  ],\r\n  templateUrl: '../task-navigator.component.html',\r\n  styleUrl: '../task-navigator.component.scss',\r\n})\r\nexport class TaskNavigatorTestComponent {\r\n  @Input() showArtificer: boolean = false;\r\n  tasks: ExtendedTask[] | null = null; // Support any list of tasks\r\n  selectedOverlord: ExtendedTask | undefined;\r\n  errorMessage: string | null = null;\r\n  selectedTasks: TaskoratorTask[] = [];\r\n  MAX_AGE_MS = 365 * 24 * 60 * 60 * 1000; // 365 days\r\n\r\n  constructor(\r\n    // private navigatorService: TaskNavigatorUltraService,\r\n    private treeService: TreeService,\r\n    private selectedMultiple: SelectedMultipleService,\r\n    // private viewService: TaskViewService,\r\n    private transmute: TaskTransmutationService,\r\n    private colorService: ColorService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Subscribe to TaskViewService for task updates\r\n    // if (this.tasks && this.taskGroupName) {\r\n    //   // in case tasks are passed, we can initialize them to simplify the caller job, it will only have to get data and pass that data\r\n    //   // otherwise it just has to get data, give to tasknavigatorultra to init\r\n    //   this.navigatorService.loadAndInitializeTasks(\r\n    //     this.tasks,\r\n    //     this.taskGroupName\r\n    //   );\r\n    // }\r\n\r\n    // this.viewService.tasks$.subscribe({\r\n    //   next: (tasks) => {\r\n    //     this.tasks = tasks;\r\n    //     this.errorMessage = null;\r\n    //   },\r\n    //   error: (err) => {\r\n    //     console.error('Error updating tasks:', err);\r\n    //     this.errorMessage = 'Failed to update tasks.';\r\n    //   },\r\n    // });\r\n\r\n    const tasks: TaskoratorTask[] = getRandomTasks();\r\n    const originalListGroup: TaskListKey = {\r\n      type: TaskListType.DAILY,\r\n      data: '',\r\n    };\r\n\r\n    this.tasks = this.transmute.toExtendedTasks(tasks);\r\n    // this.navigatorService.loadAndInitializeTasks(tasks, originalListGroup);\r\n\r\n    this.selectedMultiple\r\n      .getSelectedTasks()\r\n      .subscribe((selectedTasks: TaskoratorTask[]) => {\r\n        this.selectedTasks = selectedTasks;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Navigate to the previous set of tasks for a given task.\r\n   */\r\n  // async onPrevious(task: ExtendedTask): Promise<void> {\r\n  //   try {\r\n  //     await this.navigatorService.previous(task);\r\n  //   } catch (error) {\r\n  //     console.error('Error navigating to previous tasks:', error);\r\n  //     this.errorMessage = 'Failed to navigate to previous tasks.';\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Navigate to the next set of tasks for a given task.\r\n   */\r\n  async onNext(task: ExtendedTask): Promise<void> {\r\n    // try {\r\n    //   await this.navigatorService.next(task.taskId);\r\n    // } catch (error) {\r\n    //   console.error('Error navigating to next tasks:', error);\r\n    //   this.errorMessage = 'Failed to navigate to next tasks.';\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Navigate back to the previous view or selected overlord's tasks.\r\n   */\r\n  async goBack(task: ExtendedTask | undefined): Promise<void> {\r\n    // try {\r\n    //   // if (!task || !task.overlord) {\r\n    //   //   this.logError('No task or overlord available.');\r\n    //   //   return;\r\n    //   // }\r\n    //   await this.navigatorService.backToStart();\r\n    // } catch (error) {\r\n    //   console.error('Error navigating back:', error);\r\n    //   this.errorMessage = 'Failed to navigate back.';\r\n    // }\r\n  }\r\n  /**\r\n   * Navigate back to the previous view or selected overlord's tasks.\r\n   */\r\n  async goBackPrevious(task: ExtendedTask | undefined): Promise<void> {\r\n    // try {\r\n    //   // if (!task || !task.overlord) {\r\n    //   //   this.logError('No task or overlord available.');\r\n    //   //   return;\r\n    //   // }\r\n    //   await this.navigatorService.backToPrevious();\r\n    // } catch (error) {\r\n    //   console.error('Error navigating back:', error);\r\n    //   this.errorMessage = 'Failed to navigate back.';\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Check if \"Show More\" feature is enabled for the task.\r\n   */\r\n  isShowMoreEnabled(): boolean {\r\n    return false; // Placeholder: Update this logic as needed.\r\n  }\r\n\r\n  /**\r\n   * Retrieve tree node data for the specified task.\r\n   */\r\n  getTreeNodeData(task: ExtendedTask): TaskNodeInfo | null {\r\n    return this.treeService.getTaskTreeData(task.taskId);\r\n  }\r\n\r\n  /**\r\n   * Check if a task is selected.\r\n   */\r\n  isSelected(task: ExtendedTask): boolean {\r\n    return this.selectedTasks.indexOf(task) > -1;\r\n  }\r\n\r\n  /**\r\n   * Log errors in the console and optionally handle display.\r\n   */\r\n  private logError(message: string): void {\r\n    console.error(message);\r\n    this.errorMessage = message;\r\n  }\r\n\r\n  getAgeRatio(task: TaskoratorTask): number {\r\n    const ageMs = Date.now() - task.timeCreated;\r\n    return Math.min(ageMs / this.MAX_AGE_MS, 1);\r\n  }\r\n\r\n  getAgeColor(ageRatio: number): string {\r\n    // interpolate between green (#4caf50) and gray (#999999)\r\n    const green = { r: 76, g: 175, b: 80 };\r\n    const gray = { r: 153, g: 153, b: 153 };\r\n\r\n    const r = Math.round(green.r + ageRatio * (gray.r - green.r));\r\n    const g = Math.round(green.g + ageRatio * (gray.g - green.g));\r\n    const b = Math.round(green.b + ageRatio * (gray.b - green.b));\r\n\r\n    return `rgb(${r},${g},${b})`;\r\n  }\r\n\r\n  canShowInfo(): boolean {\r\n    if (!this.tasks) return false;\r\n    if (!this.selectedOverlord) return false;\r\n    if (this.tasks.length === 0) return false;\r\n    return true;\r\n  }\r\n\r\n  getDateBasedColor(timestamp: number): string {\r\n    return this.colorService.getDateBasedColor(timestamp);\r\n  }\r\n  getProgressPercent(node: TaskNodeInfo | null): number {\r\n    return this.colorService.getProgressPercent(node);\r\n  }\r\n}\r\n",
            "styleUrl": "../task-navigator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transmute",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedMultiple",
                        "type": "SelectedMultipleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transmute",
                        "type": "TaskTransmutationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"task-navigator-layout\">\r\n  <div class=\"task-content-wrapper\">\r\n    <!-- Conditionally Render Artificer -->\r\n    <ng-container *ngIf=\"showArtificer\">\r\n      <div class=\"app-artificer-container\">\r\n        <app-artificer></app-artificer>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <!-- Task List -->\r\n    <div class=\"task-list\">\r\n      <!-- <app-overlord-navigator></app-overlord-navigator> -->\r\n\r\n      <div *ngIf=\"tasks?.length === 0\" class=\"no-tasks\">\r\n        <app-task-edit\r\n          [task]=\"selectedOverlord\"\r\n          [isPopup]=\"false\"\r\n        ></app-task-edit>\r\n        <p>No other tasks yet.</p>\r\n      </div>\r\n      <div *ngIf=\"canShowInfo()\" class=\"no-tasks\">\r\n        <app-task-card [task]=\"selectedOverlord\"></app-task-card>\r\n      </div>\r\n      <div class=\"gap\"></div>\r\n      <div\r\n        *ngFor=\"let task of tasks\"\r\n        class=\"task-container\"\r\n        [class.selected]=\"isSelected(task)\"\r\n        [class.viewed]=\"getTaskStatus(task.taskId) === 'viewed'\"\r\n        [class.updated]=\"getTaskStatus(task.taskId) === 'updated'\"\r\n        [style.borderLeftColor]=\"getDateBasedColor(task.timeCreated)\"\r\n        [style.borderBottom]=\"\r\n          getProgressPercent(getTreeNodeData(task)) > 0\r\n            ? '4px solid transparent'\r\n            : 'none'\r\n        \"\r\n        [style.--progress-color]=\"'#4caf5044'\"\r\n        [style.--progress-percent]=\"getProgressPercent(getTreeNodeData(task))\"\r\n      >\r\n        <div class=\"left-section\">\r\n          <div class=\"navigation-actions\">\r\n            <!-- <button class=\"task-btn\" (click)=\"onPrevious(task)\">\r\n              <mat-icon>arrow_back</mat-icon>\r\n            </button> -->\r\n            <button class=\"task-btn\" (click)=\"onNext(task)\">\r\n              <mat-icon>arrow_forward</mat-icon>\r\n            </button>\r\n          </div>\r\n          <app-task-mini [task]=\"task\"></app-task-mini>\r\n          <div *ngIf=\"isShowMoreEnabled()\" class=\"show-more\">\r\n            {{ task.why }} - {{ task.todo }}\r\n          </div>\r\n        </div>\r\n        <div class=\"right-section\">\r\n          <app-artificer-action\r\n            [treeNode]=\"getTreeNodeData(task)\"\r\n            [task]=\"task\"\r\n          ></app-artificer-action>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskoratorMainComponent",
            "id": "component-TaskoratorMainComponent-22cb7ad6f499b72d2b8b2c51506422282bcdfdbb93ef30d34d4d6d70c44bb3333839ab356fbfd6ee2a148af0012b2529734a4263595f9398c6fc9f0f154699e6",
            "file": "src/app/features/ui-factory/taskorator-main/taskorator-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-taskorator-main",
            "styleUrls": [
                "./taskorator-main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./taskorator-main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentMode",
                    "defaultValue": "signal(this.navModes[0])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "navModes",
                    "defaultValue": "['⟳ Refresh', '✎ Edit', '✔ Done', '🗑 Delete']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "parent",
                    "defaultValue": "{ id: 0, title: 'Root objective' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tasks",
                    "defaultValue": "[\r\n    { id: 1, title: 'Scaffold feature' },\r\n    { id: 2, title: 'Write tests', children: [{ id: 3, title: 'Edge cases' }] },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "actOn",
                    "args": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "HorizontalNavigationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgFor } from '@angular/common';\r\nimport { Component, signal } from '@angular/core';\r\nimport { HorizontalNavigationComponent } from '../../../components/horizontal-navigation/horizontal-navigation.component';\r\n\r\ninterface Task {\r\n  id: number;\r\n  title: string;\r\n  children?: Task[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-taskorator-main',\r\n  standalone: true,\r\n  imports: [NgFor, HorizontalNavigationComponent],\r\n  templateUrl: './taskorator-main.component.html',\r\n  styleUrls: ['./taskorator-main.component.scss'], // keeps Tailwind utilities + any overrides\r\n})\r\nexport class TaskoratorMainComponent {\r\n  navModes = ['⟳ Refresh', '✎ Edit', '✔ Done', '🗑 Delete'];\r\n  currentMode = signal(this.navModes[0]);\r\n\r\n  parent: Task = { id: 0, title: 'Root objective' };\r\n  tasks: Task[] = [\r\n    { id: 1, title: 'Scaffold feature' },\r\n    { id: 2, title: 'Write tests', children: [{ id: 3, title: 'Edge cases' }] },\r\n  ];\r\n\r\n  setMode(mode: string) {\r\n    this.currentMode.set(mode);\r\n  }\r\n  actOn(task: Task) {\r\n    /* dispatch mode-specific action */\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./taskorator-main.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- taskorator-main.component.html -->\r\n<app-horizontal-navigation></app-horizontal-navigation>\r\n\r\n<div class=\"flex flex-col h-screen\">\r\n  <!-- Top bar -->\r\n  <!-- <div\r\n    class=\"navbar bg-gradient-to-r from-indigo-600 to-fuchsia-600 text-white shadow-lg\"\r\n  >\r\n    <div class=\"flex-1 font-bold\">Taskorator ⚡</div>\r\n    <input type=\"text\" placeholder=\"Search…\" class=\"input input-sm mr-2 w-40\" />\r\n    <button class=\"btn btn-sm btn-ghost mr-2\">★</button>\r\n    <button class=\"btn btn-sm btn-ghost\">⚙</button>\r\n  </div> -->\r\n\r\n  <div class=\"flex flex-1 overflow-hidden\">\r\n    <!-- Left mode picker -->\r\n    <aside class=\"w-24 bg-base-200 p-2 space-y-2 overflow-y-auto\">\r\n      <button\r\n        *ngFor=\"let m of navModes\"\r\n        class=\"btn btn-xs w-full\"\r\n        [class.btn-primary]=\"m === currentMode()\"\r\n        (click)=\"setMode(m)\"\r\n      >\r\n        {{ m }}\r\n      </button>\r\n    </aside>\r\n\r\n    <!-- Task list -->\r\n    <main class=\"flex-1 p-4 overflow-y-auto\">\r\n      <h2 class=\"text-xl mb-4\">{{ parent.title }}</h2>\r\n\r\n      <ul class=\"space-y-2\">\r\n        <li\r\n          *ngFor=\"let t of tasks\"\r\n          class=\"card card-compact bg-base-100 shadow hover:shadow-lg transition\"\r\n        >\r\n          <div class=\"card-body flex-row justify-between items-center\">\r\n            <span>{{ t.title }}</span>\r\n            <div class=\"space-x-2\">\r\n              <button class=\"btn btn-xs\" (click)=\"actOn(t)\">\r\n                {{ currentMode() }}\r\n              </button>\r\n              <button class=\"btn btn-xs btn-outline\">➜</button>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </main>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskSessionDialogComponent",
            "id": "component-TaskSessionDialogComponent-4420a972d736e4ec41832cfd390884dfea6ded6366506206610c765aedbbe6892f5107d2e687dcb511454e016412e4d2ed1f2b107cc97094f3cec7c1141022e7",
            "file": "src/app/features/core/nexus/session/task-session-dialog/task-session-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-session-dialog",
            "styleUrls": [
                "./task-session-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-session-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSession",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<TaskSessionDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButton"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n  MatDialogModule,\r\n} from '@angular/material/dialog';\r\nimport { TaskSession } from '../task-session.model';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButton } from '@angular/material/button';\r\n\r\n@Component({\r\n  selector: 'app-task-session-dialog',\r\n  templateUrl: './task-session-dialog.component.html',\r\n  styleUrls: ['./task-session-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    MatButton,\r\n  ],\r\n})\r\nexport class TaskSessionDialogComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<TaskSessionDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: TaskSession\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* task-sessions/task-sessions.component.scss */\r\n.task-sessions {\r\n  .mat-toolbar {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .mat-list-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .spacer {\r\n    flex: 1 1 auto;\r\n  }\r\n}\r\n\r\n/* task-sessions/task-session-dialog/task-session-dialog.component.scss */\r\n/* Add any necessary styles for dialog component */\r\n",
                    "styleUrl": "./task-session-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskSessionDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "TaskSession",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskSessionDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TaskSession",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- task-sessions/task-session-dialog/task-session-dialog.component.html -->\r\n<h1 mat-dialog-title>\r\n  {{ data.id ? \"Edit Task Session\" : \"Create Task Session\" }}\r\n</h1>\r\n<div mat-dialog-content>\r\n  <mat-form-field>\r\n    <mat-label>Name</mat-label>\r\n    <input matInput [(ngModel)]=\"data.name\" />\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Task IDs (comma separated)</mat-label>\r\n    <input\r\n      matInput\r\n      [(ngModel)]=\"data.taskIds\"\r\n      [ngModelOptions]=\"{ standalone: true }\"\r\n    />\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Duration (minutes)</mat-label>\r\n    <input matInput type=\"number\" [(ngModel)]=\"data.duration\" />\r\n  </mat-form-field>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"data\" cdkFocusInitial>Save</button>\r\n</div>\r\n"
        },
        {
            "name": "TaskViewComponent",
            "id": "component-TaskViewComponent-c9464ce6b69d68e21110d367a98dfb3164767aa59b9bbf2cafd4cb738c117463eee7be51433edaf22fe42a432120f1fb4b6417b642c905d73382bd6ce544b562",
            "file": "src/app/components/task/task-view/task-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-view",
            "styleUrls": [
                "./task-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "task",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedTask | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TaskService } from '../../../services/sync-api-cache/task.service';\r\nimport { ExtendedTask, ROOT_TASK_ID } from '../../../models/taskModelManager';\r\nimport { TaskNavigatorComponent } from '../../task-navigator/task-navigator.component';\r\nimport {\r\n  TaskListRules,\r\n  TaskListKey,\r\n  TaskListType,\r\n} from '../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../services/tasks/task-list-rules.service';\r\nimport { TaskNavigatorUltraService } from '../../../services/tasks/task-navigator-ultra.service';\r\nimport { SelectedOverlordService } from '../../../services/tasks/selected-overlord.service';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  selector: 'app-task-view',\r\n  templateUrl: './task-view.component.html',\r\n  styleUrls: ['./task-view.component.scss'],\r\n})\r\nexport class TaskViewComponent implements OnInit {\r\n  task: ExtendedTask | null = null;\r\n\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private taskService: TaskService,\r\n    private taskListRulesService: TaskListRulesService,\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private selectedOverlordService: SelectedOverlordService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(async (params) => {\r\n      const taskId = params.get('taskId');\r\n      if (taskId) {\r\n        const taskListKey: TaskListKey = {\r\n          type: TaskListType.OVERLORD,\r\n          data: taskId,\r\n        };\r\n        this.selectedOverlordService.setSelectedOverlord(taskId);\r\n        this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n        await this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n        this.loadTask(taskId); // optional, if you want single task details\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadTask(taskId: string) {\r\n    this.taskService.getTaskById(taskId).then((task) => {\r\n      this.task = task;\r\n    });\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.OVERLORD,\r\n        data: ROOT_TASK_ID,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./task-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedOverlordService",
                        "type": "SelectedOverlordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n "
        },
        {
            "name": "TemplateHandlerComponent",
            "id": "component-TemplateHandlerComponent-b56fa2848c57a8e85b09c6d615c30a502f0d8bfa6fe518b6848dfe3cea4e75be6138024ef0bab66a78a3804f1d4b53e1166ac9a67c49eeae929e66eef1207302",
            "file": "src/app/features/core/citadel/template/template-handler/template-handler.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-handler",
            "styleUrls": [
                "./template-handler.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-handler.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedOverlordId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "template",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTemplate | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addTasksToOverlord",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loadTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This component/service is deprecated and will be removed in future releases.\r\nwill be split into, CREATE templates and browse templates with ability to add...",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>will be split into, CREATE templates and browse templates with ability to add...</p>\n",
            "rawdescription": "\n\nwill be split into, CREATE templates and browse templates with ability to add...\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TaskTemplate } from '../models/template';\r\nimport { TemplateService } from '../services/template.service';\r\nimport { NgIf } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TaskService } from '../../../../../services/sync-api-cache/task.service';\r\nimport { TaskUpdateService } from '../../../../../services/tasks/task-update.service';\r\n/**\r\n * @deprecated This component/service is deprecated and will be removed in future releases.\r\n * will be split into, CREATE templates and browse templates with ability to add...\r\n */\r\n@Component({\r\n  selector: 'app-template-handler',\r\n  standalone: true,\r\n  imports: [NgIf, FormsModule],\r\n  templateUrl: './template-handler.component.html',\r\n  styleUrls: ['./template-handler.component.scss'],\r\n})\r\nexport class TemplateHandlerComponent implements OnInit {\r\n  template: TaskTemplate | null = null;\r\n  selectedOverlordId: string = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private templateService: TemplateService,\r\n    private taskService: TaskUpdateService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get templateId from URL\r\n    this.route.queryParams.subscribe((params) => {\r\n      const templateId = params['templateId'];\r\n      if (templateId) {\r\n        this.loadTemplate(templateId);\r\n      } else {\r\n        // const id = '';\r\n        // this.loadTemplate(id);\r\n        console.log('test tempalte reqtrieval');\r\n      }\r\n    });\r\n  }\r\n\r\n  async loadTemplate(templateId: string): Promise<void> {\r\n    try {\r\n      this.template = await this.templateService.getTemplate(templateId);\r\n    } catch (error) {\r\n      console.error('Error loading template:', error);\r\n    }\r\n  }\r\n\r\n  async addTasksToOverlord(): Promise<void> {\r\n    if (this.template && this.selectedOverlordId) {\r\n      for (const task of this.template.tasks) {\r\n        task.overlord = this.selectedOverlordId; // Set the overlord ID\r\n        this.taskService.create(task); // Create task under the selected overlord\r\n      }\r\n      console.log('Tasks added successfully!');\r\n    } else {\r\n      console.log('Please select an overlord and load a template.');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-handler.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateService",
                        "type": "TemplateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateService",
                        "type": "TemplateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskUpdateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"template\">\r\n  <h1>{{ template.name }}</h1>\r\n  <p>Author: {{ template.authorName }}</p>\r\n  <p>Number of tasks: {{ template.tasks.length }}</p>\r\n\r\n  <div>\r\n    <label for=\"overlord\">Select Overlord:</label>\r\n    <input type=\"text\" id=\"overlord\" [(ngModel)]=\"selectedOverlordId\" />\r\n  </div>\r\n\r\n  <button (click)=\"addTasksToOverlord()\">Add Tasks to Overlord</button>\r\n</div>\r\n<div *ngIf=\"!template\">\r\n  <p>Loading template...</p>\r\n</div>\r\n"
        },
        {
            "name": "TestAppComponent",
            "id": "component-TestAppComponent-36ba60368642c399999ad82bdb26ec642c841894bb5589228ac1b73a1d9d735155d8ec2ec4ff75f34665efbf8df0c22566cc2e74ec9e4c260ef493ab0a527c43",
            "file": "src/app/test-files/test-app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-test-root",
            "styleUrls": [
                "./test-app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test-app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authenticated",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "feedback",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "feedbackSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "testing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "defaultValue": "'taskorator'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HorizontalNavigationComponent",
                    "type": "component"
                },
                {
                    "name": "ArtificerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Subscription } from 'rxjs/internal/Subscription';\r\nimport { ErrorService } from '../services/core/error.service';\r\nimport { ArtificerComponent } from '../components/artificer/artificer.component';\r\nimport { HorizontalNavigationComponent } from '../components/horizontal-navigation/horizontal-navigation.component';\r\n\r\n@Component({\r\n  imports: [RouterOutlet, HorizontalNavigationComponent, ArtificerComponent],\r\n  standalone: true,\r\n  selector: 'app-test-root',\r\n  templateUrl: './test-app.component.html',\r\n  styleUrls: ['./test-app.component.scss'],\r\n})\r\nexport class TestAppComponent {\r\n  title = 'taskorator';\r\n  testing = false;\r\n  authenticated = true;\r\n\r\n  feedback = ''; // Change feedbacks array to a single string variable\r\n\r\n  private feedbackSubscription: Subscription;\r\n  // we init services here so their listeners are able to activate when necessary, because these services are kinda updated in background with eventBus\r\n  constructor(\r\n    // private serviceInitiator: ServiceInitiatorService,\r\n    private errorService: ErrorService\r\n  ) {\r\n    this.feedbackSubscription = this.errorService\r\n      .getFeedback()\r\n      .subscribe((message) => {\r\n        if (message) this.feedback = message; // Assign the new message to feedback\r\n      });\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    // this.config.setTesting(true); // WE ARE TESTING HERE:\r\n    // await this.serviceInitiator.waitForInitialization();\r\n    // this.testing = this.config.isTesting();\r\n\r\n    // this.authenticated = this.config.getAuthStrategy().isAuthenticated();\r\n    console.log('Authenticated: ' + this.authenticated);\r\n    // Proceed with the login process or other initialization tasks\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test-app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- <app-navigation></app-navigation> -->\r\n<!-- <app-artificer></app-artificer> -->\r\n<app-horizontal-navigation></app-horizontal-navigation>\r\n<!-- <router-outlet></router-outlet> -->\r\n"
        },
        {
            "name": "TreeViewComponent",
            "id": "component-TreeViewComponent-d79b2a4fd722e2ad9ade62a10a569ff63b0ea561ad076ac7538d4f6de051f3b0d5398771301ebad4a626095de534b9df243ed88bea01aff06a96cb5ba45d692b",
            "file": "src/app/features/core/vortex/tree-view/tree-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tree-view",
            "styleUrls": [
                "./tree-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "treeInput",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TaskTree | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "maxTasksToShow",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "originalNode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTreeNode | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "originalTree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskTree | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "showCompletedTasks",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showFilteredTree",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "svg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Selection<SVGGElement |  | HTMLElement | any> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "treeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.HierarchyNode<TreeNode> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "treemap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "d3.TreeLayout<TreeNode> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "countNodes",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSvg",
                    "args": [
                        {
                            "name": "margin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "margin",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTreeData",
                    "args": [
                        {
                            "name": "root",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "root",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTreeMap",
                    "args": [
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterCompletedTasks",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TreeNode | null",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTree",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findNodeInTree",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskTreeNode | null",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "TaskTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderTreeFromCurrentNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TaskTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilteredCompletedTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilteredTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "zoomToNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "d3.HierarchyNode<TreeNode>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "d3.HierarchyNode<TreeNode>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport * as d3 from 'd3';\r\nimport { ZoomBehavior, Selection, zoomIdentity } from 'd3';\r\nimport { TaskTreeNode, TaskTree } from '../../../../models/taskTree';\r\nimport { TreeService } from '../../../../services/sync-api-cache/tree.service';\r\n\r\ninterface TreeNode extends TaskTreeNode {\r\n  x?: number;\r\n  y?: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-tree-view',\r\n  standalone: true,\r\n  templateUrl: './tree-view.component.html',\r\n  styleUrls: ['./tree-view.component.css'],\r\n})\r\nexport class TreeViewComponent implements OnInit, OnChanges {\r\n  @Input() treeInput: TaskTree | null = null;\r\n  currentNode: TaskTreeNode | null = null;\r\n  originalNode: TaskTreeNode | null = null;\r\n\r\n  private svg: Selection<SVGGElement, unknown, HTMLElement, any> | undefined;\r\n  private treemap: d3.TreeLayout<TreeNode> | undefined;\r\n  private treeData: d3.HierarchyNode<TreeNode> | undefined;\r\n\r\n  maxTasksToShow = 5;\r\n  showFilteredTree = true;\r\n  showCompletedTasks = false;\r\n  originalTree: TaskTree | undefined;\r\n\r\n  constructor(private treeService: TreeService) {}\r\n\r\n  ngOnInit() {\r\n    if (this.treeInput) {\r\n      console.log('tree from input');\r\n      this.renderTree(this.treeInput);\r\n    } else {\r\n      this.initTree();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['treeInput']) {\r\n      const newTree = changes['treeInput'].currentValue as TaskTree | null;\r\n      if (newTree) {\r\n        console.log('tree from input');\r\n        this.renderTree(newTree);\r\n      } else {\r\n        this.initTree();\r\n      }\r\n    }\r\n  }\r\n\r\n  // ...\r\n\r\n  private renderTree(tree: TaskTree) {\r\n    this.originalNode = tree.primarch;\r\n    this.currentNode = tree.primarch;\r\n\r\n    let renderedTree: TaskTree;\r\n\r\n    // if (this.showFilteredTree) {\r\n    renderedTree = {\r\n      ...tree,\r\n      primarch: this.filterTree(tree.primarch),\r\n    };\r\n\r\n    const nodeCount = this.countNodes(renderedTree.primarch);\r\n    const margin = { top: 20, right: 220, bottom: 30, left: 220 };\r\n    const width = Math.max(960, nodeCount * 50) - margin.left - margin.right;\r\n    const height = Math.max(600, nodeCount * 30) - margin.top - margin.bottom;\r\n\r\n    this.svg = this.createSvg(margin, width, height);\r\n    this.treemap = this.createTreeMap(height, width);\r\n    this.treeData = this.createTreeData(renderedTree.primarch);\r\n\r\n    this.updateTree();\r\n  }\r\n\r\n  private zoomToNode(node: d3.HierarchyNode<TreeNode>) {\r\n    if (!this.originalTree) return;\r\n    const originalNode = this.findNodeInTree(\r\n      this.originalTree.primarch,\r\n      node.data.taskId\r\n    );\r\n    if (originalNode) {\r\n      this.originalNode = originalNode;\r\n      this.currentNode = originalNode;\r\n\r\n      const filteredNode = this.filterTree(originalNode);\r\n      this.renderTreeFromCurrentNode(filteredNode);\r\n    }\r\n  }\r\n\r\n  toggleFilteredTree() {\r\n    this.showFilteredTree = !this.showFilteredTree;\r\n    if (this.originalNode) {\r\n      // if (this.showFilteredTree) {\r\n      const filteredNode = this.filterTree(this.originalNode);\r\n      this.renderTreeFromCurrentNode(filteredNode);\r\n    }\r\n  }\r\n\r\n  toggleFilteredCompletedTree() {\r\n    this.showCompletedTasks = !this.showCompletedTasks;\r\n    if (this.originalNode) {\r\n      // if (this.showFilteredTree) {\r\n      const filteredNode = this.filterTree(this.originalNode);\r\n      this.renderTreeFromCurrentNode(filteredNode);\r\n    }\r\n  }\r\n\r\n  private findNodeInTree(node: TaskTreeNode, id: string): TaskTreeNode | null {\r\n    if (node.taskId === id) {\r\n      return node;\r\n    }\r\n\r\n    if (node.children) {\r\n      for (const child of node.children) {\r\n        const foundNode = this.findNodeInTree(child, id);\r\n        if (foundNode) {\r\n          return foundNode;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private initTree() {\r\n    this.treeService.getTree().subscribe((tree) => {\r\n      console.log(tree);\r\n      if (tree) {\r\n        this.renderTree(tree);\r\n        this.originalTree = tree;\r\n      }\r\n    });\r\n  }\r\n\r\n  filterCompletedTasks(node: TaskTreeNode): TreeNode | null {\r\n    if (node.stage === 'completed') {\r\n      return null; // Exclude this node\r\n    }\r\n\r\n    const treeNode: TreeNode = { ...node }; // Adjust this according to your actual conversion logic if necessary\r\n\r\n    if (node.children) {\r\n      // Recursively filter children, removing nulls\r\n      treeNode.children = node.children\r\n        .map(this.filterCompletedTasks)\r\n        .filter((child) => child !== null) as TreeNode[];\r\n    }\r\n\r\n    return treeNode;\r\n  }\r\n\r\n  private renderTreeFromCurrentNode(node: TaskTreeNode) {\r\n    let renderedNode: TaskTreeNode;\r\n    renderedNode = this.filterTree(node);\r\n\r\n    this.currentNode = renderedNode;\r\n\r\n    const nodeCount = this.countNodes(renderedNode);\r\n    const margin = { top: 20, right: 220, bottom: 30, left: 220 };\r\n    const width = Math.max(960, nodeCount * 50) - margin.left - margin.right;\r\n    const height = Math.max(600, nodeCount * 30) - margin.top - margin.bottom;\r\n\r\n    this.svg = this.createSvg(margin, width, height);\r\n    this.treemap = this.createTreeMap(height, width);\r\n    this.treeData = this.createTreeData(renderedNode);\r\n\r\n    this.updateTree();\r\n  }\r\n\r\n  resetTree() {\r\n    if (this.treeInput) {\r\n      this.currentNode = this.treeInput.primarch;\r\n      this.renderTreeFromCurrentNode(this.treeInput.primarch);\r\n    } else {\r\n      this.treeInput = null;\r\n      this.initTree();\r\n    }\r\n  }\r\n\r\n  private filterTree(node: TaskTreeNode): TaskTreeNode {\r\n    // Start with a copy of the current node, but clear its children to be populated later\r\n    const filteredNode: TaskTreeNode = {\r\n      ...node,\r\n      children: [],\r\n    };\r\n\r\n    if (node.children) {\r\n      // Filter children based on whether they are completed and showCompletedTasks flag\r\n      const filteredChildren = node.children.filter(\r\n        (child) => this.showCompletedTasks || child.stage !== 'completed'\r\n      );\r\n\r\n      // Recursively filter the remaining children\r\n      filteredNode.children = filteredChildren.map((child) =>\r\n        this.filterTree(child)\r\n      );\r\n\r\n      // If showing a filtered tree, limit the number of children\r\n      if (this.showFilteredTree) {\r\n        filteredNode.children = filteredNode.children.slice(\r\n          0,\r\n          this.maxTasksToShow\r\n        );\r\n      }\r\n    }\r\n\r\n    return filteredNode;\r\n  }\r\n\r\n  private countNodes(node: TaskTreeNode): number {\r\n    let count = 1;\r\n    if (node.children) {\r\n      for (const child of node.children) {\r\n        count += this.countNodes(child);\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  private createSvg(margin: any, width: number, height: number) {\r\n    d3.select('#tree-container').selectAll('svg').remove();\r\n\r\n    const svgContainer: Selection<SVGSVGElement, unknown, HTMLElement, any> = d3\r\n      .select('#tree-container')\r\n      .append('svg')\r\n      .attr(\r\n        'viewBox',\r\n        `0 0 ${width + margin.left + margin.right} ${\r\n          height - 2 * margin.top - margin.bottom\r\n        }`\r\n      )\r\n      .attr('preserveAspectRatio', 'xMidYMid meet');\r\n\r\n    const svgGroup = svgContainer\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    const zoomBehavior: ZoomBehavior<SVGSVGElement, unknown> = d3\r\n      .zoom<SVGSVGElement, unknown>()\r\n      .scaleExtent([0.3, 100])\r\n      .on('zoom', (event) => {\r\n        svgGroup.attr('transform', event.transform.toString());\r\n      });\r\n\r\n    svgContainer.call(zoomBehavior);\r\n\r\n    const initialTransform = d3.zoomIdentity.translate(width / 2, 0).scale(0.7);\r\n    svgContainer.call(zoomBehavior.transform, initialTransform);\r\n\r\n    return svgGroup;\r\n  }\r\n\r\n  private createTreeMap(height: number, width: number) {\r\n    return d3\r\n      .tree<TreeNode>()\r\n      .size([height, width])\r\n      .separation((a, b) => {\r\n        return a.parent == b.parent ? 2 : 3; // Increase the separation values\r\n      });\r\n  }\r\n\r\n  private createTreeData(root: TaskTreeNode) {\r\n    const nodes = d3.hierarchy<TreeNode>(\r\n      root as TreeNode,\r\n      (d) => d.children as TreeNode[]\r\n    );\r\n    return this.treemap!(nodes);\r\n  }\r\n\r\n  private renderLinks() {\r\n    this.svg!.selectAll('.link')\r\n      .data(this.treeData!.descendants().slice(1))\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', 'link')\r\n      .attr('d', (d: any) => {\r\n        return `M${d.parent.y},${d.parent.x}\r\n              C${(d.parent.y + d.y) / 2},${d.parent.x}\r\n               ${(d.parent.y + d.y) / 2},${d.x}\r\n               ${d.y},${d.x}`;\r\n      })\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'grey');\r\n  }\r\n  private updateTree() {\r\n    if (!this.svg) return;\r\n\r\n    const nodeCount = this.countNodes(this.treeData!.data);\r\n    const margin = { top: 20, right: 220, bottom: 30, left: 220 };\r\n    const width = Math.max(960, nodeCount * 50) - margin.left - margin.right;\r\n    const height = Math.max(600, nodeCount * 30) - margin.top - margin.bottom;\r\n\r\n    this.svg.attr(\r\n      'viewBox',\r\n      `0 0 ${width + margin.left + margin.right} ${\r\n        height - 2 * margin.top - margin.bottom\r\n      }`\r\n    );\r\n    this.treemap!.size([height, width]);\r\n\r\n    // Remove existing links and nodes\r\n    this.svg.selectAll('.link').remove();\r\n    this.svg.selectAll('.node').remove();\r\n\r\n    // Render the updated tree\r\n    this.renderLinks();\r\n    this.renderNodes();\r\n\r\n    // Reset the zoom level\r\n    const initialTransform = d3.zoomIdentity.translate(width / 2, 0).scale(0.7);\r\n    const svgContainer = d3.select<SVGSVGElement, unknown>(\r\n      '#tree-container svg'\r\n    );\r\n    svgContainer.call(\r\n      d3.zoom<SVGSVGElement, unknown>().transform,\r\n      initialTransform\r\n    );\r\n  }\r\n\r\n  private renderNodes() {\r\n    const nodes = this.svg!.selectAll('.node')\r\n      .data(this.treeData!.descendants())\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .attr('cursor', 'pointer')\r\n      .attr('transform', (d: any) => `translate(${d.y},${d.x})`);\r\n\r\n    nodes\r\n      .append('circle')\r\n      .attr('r', 5) // Increased radius for better visibility\r\n      .attr('fill', (d: any) => {\r\n        switch (d.data.stage) {\r\n          case 'todo':\r\n            return '#27ae60'; // Green\r\n          case 'completed':\r\n            return '#3498db'; // Blue\r\n          case 'deleted':\r\n            return '#95a5a6'; // Gray\r\n          default:\r\n            return '#e74c3c'; // Default red for undefined\r\n        }\r\n      })\r\n      .attr('stroke', (d: any) => {\r\n        return d.data.stage === 'deleted' ? '#7f8c8d' : '#2c3e50';\r\n      })\r\n      .attr('stroke-width', 2)\r\n      .style('stroke-dasharray', (d: any) =>\r\n        d.data.stage === 'deleted' ? '4 2' : '0'\r\n      ); // Dashed for deleted\r\n\r\n    nodes.on('click', (event: any, d: any) => {\r\n      this.zoomToNode(d);\r\n    });\r\n\r\n    nodes.each(function (d: any, i: any, nodes: any) {\r\n      const node = d3.select(nodes[i]);\r\n\r\n      const textElement = node\r\n        .append('text')\r\n        .attr('dy', '.35em')\r\n        .attr('x', (d: any) => (d.children ? -20 : 20))\r\n        .attr('text-anchor', (d: any) => (d.children ? 'end' : 'start'))\r\n        .text((d: any) => `${d.data.name} (${d.data.stage})`) // Added stage in text for clarity\r\n        .attr('font-family', 'Arial')\r\n        .attr('font-size', '14px')\r\n        .attr('fill', '#2c3e50')\r\n        .node();\r\n\r\n      if (textElement) {\r\n        const bbox = textElement.getBBox();\r\n        const padding = 6;\r\n        node\r\n          .insert('rect', 'text')\r\n          .attr('x', bbox.x - padding)\r\n          .attr('y', bbox.y - padding)\r\n          .attr('width', bbox.width + 2 * padding)\r\n          .attr('height', bbox.height + 2 * padding)\r\n          .attr('rx', 8)\r\n          .attr('ry', 8)\r\n          .attr('fill', '#f9f9f9') // Subtle background\r\n          .attr('stroke', '#d0d0d0') // Lighter border\r\n          .attr('stroke-width', 1)\r\n          .lower();\r\n      }\r\n    });\r\n\r\n    // Add tooltips for more information\r\n    nodes\r\n      .append('title')\r\n      .text((d: any) => `Task: ${d.data.name}\\nStage: ${d.data.stage}`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* In tree-view.component.css */\r\n\r\n.node circle,\r\n.node text {\r\n  cursor: pointer;\r\n}\r\n\r\n.node:hover circle {\r\n  fill: #3498db;\r\n  stroke: #2980b9;\r\n}\r\n\r\n.node:hover text {\r\n  fill: #2c3e50;\r\n  font-weight: bold;\r\n}\r\n",
                    "styleUrl": "./tree-view.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "treeService",
                        "type": "TreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<!-- In tree-view.component.html -->\r\n<button (click)=\"resetTree()\">Reset Tree</button>\r\n<button (click)=\"toggleFilteredTree()\">\r\n  {{ showFilteredTree ? \"Show All Tasks\" : \"Show Filtered Tasks\" }}\r\n</button>\r\n<button (click)=\"toggleFilteredCompletedTree()\">\r\n  {{\r\n    showCompletedTasks\r\n      ? \"Show Completed Tasks\"\r\n      : \"Show Filtered Completed Tasks\"\r\n  }}\r\n</button>\r\n<div id=\"tree-container\"></div>\r\n\r\n<!-- <input type=\"text\" value=\"{{ getTreeAsText() }}\" /> -->\r\n"
        },
        {
            "name": "VortexComponent",
            "id": "component-VortexComponent-d6c1c241f7297122c2e96fb5f04f37c8adb903aa33d119b2ab4b015ffb3247921e34325b019cff31502e087634179194bc5ba832cdfe60c020b5107fc0653b08",
            "file": "src/app/features/core/vortex/vortex/vortex.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vortex",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vortex.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "CORE_APP_METADATA['vortex']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CORE_APP_METADATA } from '../../../../app.routes-metadata';\r\n\r\n@Component({\r\n  selector: 'app-vortex',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './vortex.component.html',\r\n  styleUrl: './vortex.component.scss',\r\n})\r\nexport class VortexComponent {\r\n  data = CORE_APP_METADATA['vortex'];\r\n}\r\n",
            "styleUrl": "./vortex.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>{{ data.title }}</h2>\r\n  <h3>{{ data.description }}</h3>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "WeeklyTaskListComponent",
            "id": "component-WeeklyTaskListComponent-90cf3f6e3d4b9e0ed77a5189cc11fb03e9627f723102ce2bd2b58840543537567798ac46e5dd218789c4158178ab42d846f7029ddf21e652ed1aa15f0f271e9d",
            "file": "src/app/features/core/sentinel/lists/weekly-task-list/weekly-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-weekly-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./weekly-task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskListRules",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "loadTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskNavigatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TaskNavigatorUltraService } from '../../../../../services/tasks/task-navigator-ultra.service';\r\nimport { TaskNavigatorComponent } from '../../../../../components/task-navigator/task-navigator.component';\r\nimport {\r\n  TaskListKey,\r\n  TaskListRules,\r\n  TaskListSubtype,\r\n  TaskListType,\r\n} from '../../../../../models/task-list-model';\r\nimport { TaskListRulesService } from '../../../../../services/tasks/task-list-rules.service';\r\n\r\n@Component({\r\n  selector: 'app-weekly-task-list',\r\n  standalone: true,\r\n  imports: [TaskNavigatorComponent],\r\n  templateUrl: './weekly-task-list.component.html',\r\n  styleUrl: './weekly-task-list.component.scss',\r\n})\r\nexport class WeeklyTaskListComponent implements OnInit {\r\n  errorMessage: string = '';\r\n  taskListRules: TaskListRules | null = null;\r\n\r\n  constructor(\r\n    private navigatorService: TaskNavigatorUltraService,\r\n    private taskListRulesService: TaskListRulesService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.loadTasks();\r\n  }\r\n\r\n  private async loadTasks() {\r\n    try {\r\n      const taskListKey: TaskListKey = {\r\n        type: TaskListType.WEEKLY,\r\n        data: TaskListSubtype.REPEATING,\r\n      };\r\n      this.taskListRules = this.taskListRulesService.getList(taskListKey);\r\n      this.navigatorService.loadAndInitializeTasks(taskListKey);\r\n      this.errorMessage = '';\r\n    } catch (error) {\r\n      this.errorMessage = 'Failed to load daily tasks.';\r\n      console.error(error);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./weekly-task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "navigatorService",
                        "type": "TaskNavigatorUltraService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListRulesService",
                        "type": "TaskListRulesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- create task now is in search field on header area anyway -->\r\n<!-- <div class=\"center-horizontal\">\r\n  <div class=\"task-form-container\"><app-create-task></app-create-task></div>\r\n</div> -->\r\n<div class=\"center-horizontal\">\r\n  <app-task-navigator [showArtificer]=\"true\"></app-task-navigator>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [],\r\n  // providers: [provideRouter(routes)],\r\n}"
            },
            {
                "name": "artificerDetailList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/artificer/artificer.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ArtificerDetails[]",
                "defaultValue": "[\r\n  { action: 'complete', icon: 'check', colorClass: 'complete-icon-color' },\r\n  { action: 'delete', icon: 'delete', colorClass: 'delete-icon-color' },\r\n  { action: 'refresh', icon: 'refresh', colorClass: 'refresh-icon-color' },\r\n  { action: 'move', icon: 'move_to_inbox', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'edit', icon: 'edit', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'select', icon: 'check_box', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'suggest', icon: 'search', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'promote', icon: 'expand_less', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'demote', icon: 'expand_more', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'mass', icon: 'add', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  {\r\n    action: 'moveToParent',\r\n    icon: 'arrow_upward',\r\n    colorClass: 'refresh-icon-color',\r\n  },\r\n]"
            },
            {
                "name": "canActivate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/core/auth-guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n): Promise<boolean | UrlTree> => {\r\n  const router = inject(Router);\r\n  const navigationService = inject(NavigationService);\r\n  const sessionManager = inject(SessionManagerService);\r\n  const authServiceOnline = inject(AuthService);\r\n  const authServiceOffline = inject(AuthOfflineService);\r\n\r\n  return (async () => {\r\n    await sessionManager.waitForInitialization();\r\n    const authService =\r\n      sessionManager.getSessionType() === 'online'\r\n        ? authServiceOnline\r\n        : authServiceOffline;\r\n\r\n    const isAuthenticated = authService.isAuthenticated();\r\n\r\n    if (isAuthenticated) {\r\n      return true;\r\n    }\r\n\r\n    navigationService.setRedirectUrl(state.url);\r\n    return router.createUrlTree(['/gateway/login']);\r\n  })();\r\n}"
            },
            {
                "name": "canActivateChild",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/core/auth-guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateChildFn",
                "defaultValue": "canActivate"
            },
            {
                "name": "citadelChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/citadel/citadel-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "citadelRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/citadel/citadel-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  importExport: {\r\n    title: 'Import/Export Tasks',\r\n    icon: 'upload', // Replace with the appropriate icon\r\n    description: 'Manage task imports and exports.',\r\n    altName: '',\r\n  },\r\n  template: {\r\n    title: 'Template Manager',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create and manage task templates.',\r\n    altName: '',\r\n  },\r\n}"
            },
            {
                "name": "completeButtonColorMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/colors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  completed: '#4CAF50', // Vibrant green\r\n  archived: '#1976D2', // Brighter blue\r\n  deleted: '#D32F2F', // Bright red\r\n  todo: '#FFA000', // Amber yellow\r\n  seen: '#616161', // Darker grey\r\n}"
            },
            {
                "name": "completeButtonColorMap1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/colors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  completed: '#4CAF50', // Subdued green\r\n  archived: '#1565C0', // Deep blue\r\n  deleted: '#C62828', // Muted red\r\n  todo: '#FFC107', // Muted yellow\r\n  seen: '#9E9E9E', // Subdued grey\r\n}"
            },
            {
                "name": "convertToTaskArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/test-files/other-files/json-to-tasks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(jsonData: any[]): TaskoratorTask[] =>\r\n  jsonData.map((item) => ({\r\n    ...item,\r\n    timeCreated: item.timeCreated ? new Date(item.timeCreated) : null,\r\n    lastUpdated: item.lastUpdated ? new Date(item.lastUpdated) : null,\r\n    timeEnd: item.timeEnd ? new Date(item.timeEnd) : null,\r\n    duration: parseInt(item.duration),\r\n    tags: item.tags.split(/\\s*,\\s*/),\r\n  }))"
            },
            {
                "name": "CORE_APP_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes-metadata.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  dreamforge: {\r\n    title: 'Dreamforge',\r\n    description:\r\n      'Creative hub focused on crafting, managing, and refining tasks. Includes tools for task creation and specialization.',\r\n    icon: 'build',\r\n    altName: 'Creator',\r\n  },\r\n  sentinel: {\r\n    title: 'Sentinel',\r\n    description:\r\n      'Strategic command center for overseeing, prioritizing, and managing tasks at a high level.',\r\n    icon: 'security',\r\n    altName: 'Task Lists',\r\n  },\r\n  nexus: {\r\n    title: 'Nexus',\r\n    description:\r\n      'Central hub for organizing and planning tasks, focusing on workflow management and time-based sessions.',\r\n    icon: 'hub',\r\n    altName: 'Time Management',\r\n  },\r\n  vortex: {\r\n    title: 'Vortex',\r\n    description:\r\n      'Visualization center for tasks, offering dynamic and interactive visual representations.',\r\n    icon: 'donut_large',\r\n    altName: 'Visualizer',\r\n  },\r\n  crucible: {\r\n    title: 'Crucible',\r\n    description:\r\n      'A focused area for refining and executing group actions on selected tasks.',\r\n    icon: 'filter_list',\r\n    altName: 'Mass Process',\r\n  },\r\n  citadel: {\r\n    title: 'Citadel',\r\n    description:\r\n      'Fortified hub for essential task management utilities, such as cleaning and importing/exporting tasks.',\r\n    icon: 'shield',\r\n    altName: 'Utilities',\r\n  },\r\n  gateway: {\r\n    title: 'Gateway',\r\n    description:\r\n      'The entry point to the application, managing user login, initial navigation, and settings.',\r\n    icon: 'login',\r\n    altName: 'Home',\r\n  },\r\n}"
            },
            {
                "name": "crucibleChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/crucible/crucible-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "crucibleRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/crucible/crucible-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  selected: {\r\n    title: 'SelectedTasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Manage selected tasks.',\r\n    altName: '',\r\n  },\r\n  searchOverlord: {\r\n    title: 'Search Overlord',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Search overlord.',\r\n    altName: '',\r\n  },\r\n  massAdd: {\r\n    title: 'Mass Add',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Add many tasks at the same time.',\r\n    altName: '',\r\n  },\r\n}"
            },
            {
                "name": "data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/test-files/other-files/tasks-json.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    taskId: '1',\r\n    name: 'Task Splitter',\r\n    todo: 'test if works editor',\r\n    why: 'to improve what i do and how much i do each task can be split till 2 min task',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '2023-11-28T17:39:40.387Z',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '5',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: 'project',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '5',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: 'task splitter',\r\n  },\r\n  {\r\n    taskId: '2',\r\n    name: 'NodeJS Projects',\r\n    todo: 'decide next step',\r\n    why: 'list of useful node',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '2023-08-16T18:08:23.326Z',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '134',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: 'js',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '0',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: '',\r\n  },\r\n  {\r\n    taskId: '3',\r\n    name: 'A-Github-Projects',\r\n    todo: 'decide next step',\r\n    why: '',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '134',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: '',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '0',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: '',\r\n  },\r\n  {\r\n    taskId: '4',\r\n    name: 'AndroidStudioProjects',\r\n    todo: 'decide next step',\r\n    why: '',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '2023-09-26T11:24:19.571Z',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '134',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: '',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '1',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: '',\r\n  },\r\n]"
            },
            {
                "name": "defaultTaskLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/task-list-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TaskListRules[]",
                "defaultValue": "[\r\n  {\r\n    id: 'daily',\r\n    title: 'Daily Tasks',\r\n    type: TaskListType.DAILY,\r\n    description: 'Recurring daily tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'daily') {\r\n          return false;\r\n        }\r\n        const { startTime, endTime } = calculatePeriodTimes('daily');\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false, // this is loose list we can't just add tasks there (unless we allow it in future?)\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'weekly',\r\n    title: 'Weekly Tasks',\r\n    type: TaskListType.WEEKLY,\r\n    description: 'Recurring weekly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'weekly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('weekly');\r\n        // Check if the task falls outside the current daily period\r\n\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'monthly',\r\n    title: 'Monthly Tasks',\r\n    type: TaskListType.MONTHLY,\r\n    description: 'Recurring monthly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'monthly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('monthly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'yearly',\r\n    title: 'Yearly Tasks',\r\n    type: TaskListType.YEARLY,\r\n    description: 'Recurring yearly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'yearly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('yearly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'focus',\r\n    title: 'Focus Tasks',\r\n    type: TaskListType.FOCUS,\r\n    description: 'Tasks set as focus tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'frog',\r\n    title: 'Frog Tasks',\r\n    type: TaskListType.FROG,\r\n    description: 'Tasks set as \"eat the frog\" tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'favorites',\r\n    title: 'Favorite Tasks',\r\n    type: TaskListType.FAVORITE,\r\n    description: 'Tasks marked as favorites',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: true, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestCreated',\r\n    title: 'Latest Created Tasks',\r\n    type: TaskListType.LATEST_CREATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // we don't know which overlord to add it to\r\n        canMove: false, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestUpdated',\r\n    title: 'Latest Updated Tasks',\r\n    type: TaskListType.LATEST_UPDATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true, // we don't know which overlord to add it to\r\n        canMove: true, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'overlord_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Overlord Tasks',\r\n    type: TaskListType.OVERLORD,\r\n    description: 'Tasks associated with a specific overlord',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo' && task.taskId !== ROOT_TASK_ID, // Filter tasks that have an overlord\r\n      sorter: (a, b) => (b.priority || 0) - (a.priority || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true,\r\n        canMove: true,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific overlord ID when used\r\n  },\r\n  {\r\n    id: 'session_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Session Tasks',\r\n    type: TaskListType.SESSION,\r\n    description: 'Tasks specific to a particular session',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo', // Filter tasks that have a session ID\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // complex session situation, we can't really easily add, unless in future \"create task component can handle it\"\r\n        canMove: false, // don't know from where...\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific session ID when used\r\n  },\r\n]"
            },
            {
                "name": "dreamforgeChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/dreamforge/dreamforge-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "dreamforgeRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/dreamforge/dreamforge-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  focus: {\r\n    title: 'Focus Tasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create focus tasks.',\r\n    altName: '',\r\n  },\r\n  frog: {\r\n    title: 'Frog Tasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create frog tasks.',\r\n    altName: '',\r\n  },\r\n  favorite: {\r\n    title: 'Favorite Tasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create favorite tasks.',\r\n    altName: '',\r\n  },\r\n  createRepetitive: {\r\n    title: 'Create Repetitive',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create repetitive tasks.',\r\n    altName: '',\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  isTesting: true,\r\n  firebase: {\r\n    projectId: 'taskorator',\r\n    appId: '1:799643180199:web:3a44fe3dcb6b8b5aeecf82',\r\n    storageBucket: 'taskorator.appspot.com',\r\n    apiKey: 'AIzaSyDrlKwP-ALtE5VFBn78t1yk8QDhx6PoXnI',\r\n    authDomain: 'taskorator.firebaseapp.com',\r\n    messagingSenderId: '799643180199',\r\n    measurementId: 'G-HBL7JCRWL0',\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  isTesting: false,\r\n  firebase: {\r\n    projectId: 'taskorator',\r\n    appId: '1:799643180199:web:3a44fe3dcb6b8b5aeecf82',\r\n    storageBucket: 'taskorator.appspot.com',\r\n    apiKey: 'AIzaSyDrlKwP-ALtE5VFBn78t1yk8QDhx6PoXnI',\r\n    authDomain: 'taskorator.firebaseapp.com',\r\n    messagingSenderId: '799643180199',\r\n    measurementId: 'G-HBL7JCRWL0',\r\n  },\r\n}"
            },
            {
                "name": "firebaseJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.firebase"
            },
            {
                "name": "gatewayChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/gateway/gateway-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "gatewayRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/gateway/gateway-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  login: {\r\n    title: 'Login',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Login Page.',\r\n    altName: '',\r\n  },\r\n  settings: {\r\n    title: 'Settings',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Modify settings.',\r\n    altName: '',\r\n  },\r\n  next: {\r\n    title: 'Next Task',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create task that we should focus next.',\r\n    altName: 'Next',\r\n  },\r\n}"
            },
            {
                "name": "getBaseTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/admin/models/template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n  const template: TaskTemplate = {\r\n    id: '0',\r\n    name: 'base',\r\n    authorId: 'unknown',\r\n    authorName: 'anonymous',\r\n    isPublic: false,\r\n    tasks: [],\r\n  };\r\n  return { ...template };\r\n}"
            },
            {
                "name": "getBaseTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/citadel/template/models/template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n  const template: TaskTemplate = {\r\n    id: '0',\r\n    name: 'base',\r\n    authorId: 'unknown',\r\n    authorName: 'anonymous',\r\n    isPublic: false,\r\n    tasks: [],\r\n  };\r\n  return { ...template };\r\n}"
            },
            {
                "name": "getUserStorageKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/core/api-offline.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(userId: string) => ({\r\n  TASKS: `tasks_${userId}`,\r\n  SETTINGS: `settings_${userId}`,\r\n  TREE: `tree_${userId}`,\r\n  SCORE: `score_${userId}`,\r\n  USER: `user_${userId}`,\r\n})"
            },
            {
                "name": "highlightRecentlyModifiedTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/test-files/other-files/app.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('highlightTask', [\r\n  state(\r\n    'normal',\r\n    style({\r\n      backgroundColor: 'transparent',\r\n    })\r\n  ),\r\n  state(\r\n    'highlighted',\r\n    style({\r\n      backgroundColor: '#FFFF99', // Highlight color, adjust as needed\r\n    })\r\n  ),\r\n  transition('normal <=> highlighted', [animate('1.5s')]),\r\n])"
            },
            {
                "name": "isTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.isTesting"
            },
            {
                "name": "maxPriority",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "NAVIGATION_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  ON_LOGIN_ROUTE_URL: 'sentinel',\r\n}"
            },
            {
                "name": "nexusChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/nexus/nexus-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "nexusRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/nexus/nexus-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  session: {\r\n    title: 'Session',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Start session to do certain tasks in certain time.',\r\n    altName: '',\r\n  },\r\n}"
            },
            {
                "name": "OTHER_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  APP_TITLE: 'taskorator',\r\n  REPAIR_TREE: true,\r\n  TREE_UPDATE_FREQUENCY: 500,\r\n  OFFLINE_USER_LOGIN_ID: 'OfflineLoginUserId3',\r\n  OFFLINE_USER_ID: 'OfflineUserId3',\r\n}"
            },
            {
                "name": "ROOT_TASK_DESCRIPTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Legends never die!'"
            },
            {
                "name": "ROOT_TASK_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'128'"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\r\n  {\r\n    path: 'next',\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n    component: NextTaskManagerComponent,\r\n  },\r\n  {\r\n    path: 'tasks/:taskId',\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n    component: TaskViewComponent, // allow simply navigate to task by url id\r\n  },\r\n  {\r\n    path: 'citadel',\r\n    loadChildren: () =>\r\n      import('./features/core/citadel/citadel-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['citadel'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'crucible',\r\n    loadChildren: () =>\r\n      import('./features/core/crucible/crucible-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['crucible'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'dreamforge',\r\n    loadChildren: () =>\r\n      import('./features/core/dreamforge/dreamforge-routes').then(\r\n        (m) => m.default\r\n      ),\r\n    data: CORE_APP_METADATA['dreamforge'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'gateway',\r\n    loadChildren: () =>\r\n      import('./features/core/gateway/gateway-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['gateway'], // Attach metadata for navigator\r\n    // canActivate: [canActivate],\r\n    // canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'nexus',\r\n    loadChildren: () =>\r\n      import('./features/core/nexus/nexus-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['nexus'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'sentinel',\r\n    loadChildren: () =>\r\n      import('./features/core/sentinel/sentinel-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['sentinel'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'vortex',\r\n    loadChildren: () =>\r\n      import('./features/core/vortex/vortex-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['vortex'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  { path: '', redirectTo: 'gateway', pathMatch: 'full' },\r\n  { path: '**', redirectTo: 'gateway' },\r\n]"
            },
            {
                "name": "SENSITIVE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  gptServiceUrl: 'http://192.168.1.182:3000',\r\n}"
            },
            {
                "name": "sentinelChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/sentinel/sentinel-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "sentinelRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/sentinel/sentinel-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  latestCreated: {\r\n    title: 'Latest Created Tasks',\r\n    icon: 'add_task', // Icon for newly created tasks\r\n    description: 'View and manage tasks created recently.',\r\n    altName: 'New Tasks',\r\n  },\r\n  latestUpdated: {\r\n    title: 'Latest Updated Tasks',\r\n    icon: 'update', // Icon for recently updated tasks\r\n    description: 'View and manage tasks updated recently.',\r\n    altName: 'Updated Tasks',\r\n  },\r\n  dailyTasks: {\r\n    title: 'Daily Tasks',\r\n    icon: 'calendar_today', // Icon for daily tasks\r\n    description: 'View and manage your tasks for today.',\r\n    altName: \"Today's Tasks\",\r\n  },\r\n  weeklyTasks: {\r\n    title: 'Weekly Tasks',\r\n    icon: 'date_range', // Icon for weekly tasks\r\n    description: 'View and manage your tasks for this week.',\r\n    altName: \"This Week's Tasks\",\r\n  },\r\n  focusTasksList: {\r\n    title: 'Focus Tasks',\r\n    icon: 'visibility', // Icon for focus tasks\r\n    description: 'View and manage tasks that need your attention.',\r\n    altName: 'Focused Tasks',\r\n  },\r\n  rootTasksList: {\r\n    title: 'Root Tasks',\r\n    icon: 'account_tree', // Icon for root task management\r\n    description: 'View and manage the root-level tasks.',\r\n    altName: 'Root Tasks',\r\n  },\r\n}"
            },
            {
                "name": "sqlCreateTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`CREATE TABLE ${taskTableName} (\r\n  taskId INTEGER PRIMARY KEY,\r\n  name TEXT NOT NULL,\r\n  todo TEXT NOT NULL,\r\n  why TEXT NOT NULL,\r\n  timeCreated TIMESTAMP NOT NULL,\r\n  timeEnd TIMESTAMP,\r\n  lastUpdated TIMESTAMP,\r\n  duration INTEGER NOT NULL,\r\n  overlord INTEGER,\r\n  repeat TEXT NOT NULL,\r\n  status TEXT NOT NULL,\r\n  stage TEXT NOT NULL,\r\n  type TEXT NOT NULL,\r\n  subtype TEXT NOT NULL,\r\n  size TEXT NOT NULL,\r\n  owner TEXT NOT NULL,\r\n  priority INTEGER NOT NULL,\r\n  backupLink TEXT NOT NULL,\r\n  imageUrl TEXT,\r\n  imageDataUrl TEXT,\r\n  tags TEXT NOT NULL\r\n);\r\n`"
            },
            {
                "name": "TASK_ACTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'created',\r\n  'updated',\r\n  'completed',\r\n  'archived',\r\n  'deleted',\r\n  'renewed',\r\n  'seen',\r\n  'activated',\r\n  'moved',\r\n  'split',\r\n  'priorityIncreased',\r\n  'priorityDecreased',\r\n  'nameUpdated',\r\n  'todoUpdated',\r\n  'whyUpdated',\r\n  'tagAdded',\r\n  'tagRemoved',\r\n  'imageUpdated',\r\n  'backupLinkUpdated',\r\n  'repeatUpdated',\r\n  'timeEndUpdated',\r\n  'durationUpdated',\r\n  'statusUpdated',\r\n  'typeUpdated',\r\n  'subtypeUpdated',\r\n  'sizeUpdated',\r\n]"
            },
            {
                "name": "TASK_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  TASK_LIST_LIMIT: 30,\r\n  CACHE_EXPIRATION_MS: 60 * 60 * 1000, // 60 minutes for example\r\n}"
            },
            {
                "name": "taskTableName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'tasks_table'"
            },
            {
                "name": "testTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/test-files/other-files/json-to-tasks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TaskoratorTask[]",
                "defaultValue": "convertToTaskArray(jsonData)"
            },
            {
                "name": "testTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/test-files/other-files/testTemplate.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  id: 'Rap2DS0nPnXkrNDxRwB7',\r\n  authorId: 'adminId',\r\n  isPublic: false,\r\n  authorName: 'Ubaby',\r\n  tasks: [\r\n    {\r\n      stage: 'todo',\r\n      name: 'multivitamin',\r\n      repeat: 'once',\r\n      tags: '',\r\n      status: 'active',\r\n      owner: '',\r\n      timeEnd: null,\r\n      size: 'do now',\r\n      priority: 0,\r\n      type: 'note',\r\n      duration: 0,\r\n      subtype: 'list',\r\n      imageDataUrl: '',\r\n      backupLink: '',\r\n      timeCreated: {\r\n        seconds: 1695723337,\r\n        nanoseconds: 476000000,\r\n      },\r\n      why: '',\r\n      overlord: 'JR9K3hByeEl7P9Jbls1T',\r\n      taskId: '277',\r\n      lastUpdated: {\r\n        seconds: 1698769391,\r\n        nanoseconds: 864000000,\r\n      },\r\n      todo: '',\r\n      imageUrl: '',\r\n    },\r\n    {\r\n      size: 'do now',\r\n      timeEnd: null,\r\n      subtype: 'list',\r\n      tags: '',\r\n      name: 'white pepper',\r\n      taskId: '262',\r\n      type: 'note',\r\n      lastUpdated: {\r\n        seconds: 1698769377,\r\n        nanoseconds: 743000000,\r\n      },\r\n      imageUrl: '',\r\n      status: 'active',\r\n      overlord: 'JR9K3hByeEl7P9Jbls1T',\r\n      timeCreated: {\r\n        seconds: 1695723337,\r\n        nanoseconds: 474000000,\r\n      },\r\n      todo: '',\r\n      priority: 0,\r\n      imageDataUrl: '',\r\n      owner: '',\r\n      stage: 'todo',\r\n      repeat: 'once',\r\n      why: '',\r\n      duration: 0,\r\n      backupLink: '',\r\n    },\r\n  ],\r\n}"
            },
            {
                "name": "vortexChildPaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/vortex/vortex-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
            },
            {
                "name": "vortexRouteMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/core/vortex/vortex-routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppRouteMap",
                "defaultValue": "{\r\n  vizualizer: {\r\n    title: 'Tree View',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'View tasks as a tree.',\r\n    altName: '',\r\n  },\r\n}"
            }
        ],
        "functions": [
            {
                "name": "calculatePeriodTimes",
                "file": "src/app/models/task-list-model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "repeatInterval",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "repeatInterval",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterTasks",
                "file": "src/app/models/task-list-model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "tasks",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterCompleted",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "repeatInterval",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ExtendedTask[]",
                "jsdoctags": [
                    {
                        "name": "tasks",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterCompleted",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "repeatInterval",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateRandomName",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "generateRandomTask",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlord",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "ROOT_TASK_ID"
                    }
                ],
                "returnType": "TaskoratorTask",
                "jsdoctags": [
                    {
                        "name": "overlord",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "ROOT_TASK_ID",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateTaskTree",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "rootId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breadth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TaskoratorTask[]",
                "jsdoctags": [
                    {
                        "name": "rootId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breadth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getButtonMatName",
                "file": "src/app/models/settings.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "actionName",
                        "type": "CompleteButtonAction",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "actionName",
                        "type": "CompleteButtonAction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getButtonTextName",
                "file": "src/app/models/settings.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "actionName",
                        "type": "CompleteButtonAction",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "actionName",
                        "type": "CompleteButtonAction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDefaultScore",
                "file": "src/app/models/score.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getDefaultTask",
                "file": "src/app/models/taskModelManager.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "TaskoratorTask"
            },
            {
                "name": "getDefaultTaskCustomized",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overrides",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "TaskoratorTask",
                "jsdoctags": [
                    {
                        "name": "overrides",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDefaultTaskSettings",
                "file": "src/app/models/settings.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getDefaultTree",
                "file": "src/app/models/taskTree.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "TaskTree"
            },
            {
                "name": "getIdFromKey",
                "file": "src/app/models/task-list-model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "TaskListKey",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "TaskListKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomElement",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomTask",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getRandomTasks",
                "file": "src/app/test-files/test-data/test-task.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "TaskoratorTask[]"
            },
            {
                "name": "getRootTaskObject",
                "file": "src/app/models/taskModelManager.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "TaskoratorTask"
            },
            {
                "name": "getUniqueTaskId",
                "file": "src/app/models/taskModelManager.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "string"
            }
        ],
        "typealiases": [
            {
                "name": "CompleteButtonAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"completed\" | \"seen\" | \"todo\" | \"archived\" | \"deleted\"",
                "file": "src/app/models/settings.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "RepeatOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"once\" | \"never\" | \"half-hourly\" | \"hourly\" | \"half-daily\" | \"daily\" | \"weekly\" | \"half-monthly\" | \"monthly\" | \"three-monthly\" | \"half-yearly\" | \"yearly\"",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "RepeatType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"daily\" | \"weekly\" | \"monthly\" | \"yearly\"",
                "file": "src/app/services/sync-api-cache/task-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SettingsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"focus\" | \"frog\" | \"favorite\"",
                "file": "src/app/services/sync-api-cache/task-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TaskSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"do now\" | \"split\" | \"delegate\"",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TaskStage",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"seen\" | \"completed\" | \"todo\" | \"archived\" | \"deleted\"",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TaskStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"active\" | \"inactive\"",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TaskSubtype",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | \"js\" | \"ts\" | \"html\" | \"css\" | \"sound\" | \"android\" | \"angular\" | \"nodejs\" | \"java\" | \"text\" | \"list\"",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TaskType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | \"code\" | \"idea\" | \"note\" | \"todo\" | \"checklist\" | \"tree\" | \"flowchart\" | \"task\" | \"next\" | \"job\" | \"feature\" | \"schedule\" | \"project\"",
                "file": "src/app/models/taskModelManager.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>task type guesser:\nif &quot;Task name caps&quot;- project\n&quot;task name&quot; - todo\nif TASK NAME -???</p>\n",
                "kind": 192
            },
            {
                "name": "TaskUiStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"normal\" | \"highlighted\" | \"flagged\" | \"viewed\" | \"updated\"",
                "file": "src/app/services/tasks/task-status.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "TaskActions",
                "childs": [
                    {
                        "name": "SELECTED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "selected"
                    },
                    {
                        "name": "MOVED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "moved"
                    },
                    {
                        "name": "CREATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "created"
                    },
                    {
                        "name": "UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "updated"
                    },
                    {
                        "name": "COMPLETED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "completed"
                    },
                    {
                        "name": "ARCHIVED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "archived"
                    },
                    {
                        "name": "DELETED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "deleted"
                    },
                    {
                        "name": "RENEWED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "renewed"
                    },
                    {
                        "name": "SEEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "seen"
                    },
                    {
                        "name": "ACTIVATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "activated"
                    },
                    {
                        "name": "PRIORITY_INCREASED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "priorityIncreased"
                    },
                    {
                        "name": "PRIORITY_DECREASED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "priorityDecreased"
                    },
                    {
                        "name": "NAME_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "nameUpdated"
                    },
                    {
                        "name": "TODO_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "todoUpdated"
                    },
                    {
                        "name": "WHY_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "whyUpdated"
                    },
                    {
                        "name": "TAG_ADDED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tagAdded"
                    },
                    {
                        "name": "TAG_REMOVED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tagRemoved"
                    },
                    {
                        "name": "IMAGE_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "imageUpdated"
                    },
                    {
                        "name": "BACKUP_LINK_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "backupLinkUpdated"
                    },
                    {
                        "name": "REPEAT_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "repeatUpdated"
                    },
                    {
                        "name": "TIME_END_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "timeEndUpdated"
                    },
                    {
                        "name": "DURATION_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "durationUpdated"
                    },
                    {
                        "name": "STATUS_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "statusUpdated"
                    },
                    {
                        "name": "TYPE_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "typeUpdated"
                    },
                    {
                        "name": "SUBTYPE_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "subtypeUpdated"
                    },
                    {
                        "name": "SIZE_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sizeUpdated"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/tasks/task-action-tracker.service.ts"
            },
            {
                "name": "TaskListSubtype",
                "childs": [
                    {
                        "name": "SETTINGS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "settings"
                    },
                    {
                        "name": "SESSION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "session"
                    },
                    {
                        "name": "REPEATING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "repeating"
                    },
                    {
                        "name": "API",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/task-list-model.ts"
            },
            {
                "name": "TaskListType",
                "childs": [
                    {
                        "name": "DAILY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "daily"
                    },
                    {
                        "name": "WEEKLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "weekly"
                    },
                    {
                        "name": "MONTHLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "monthly"
                    },
                    {
                        "name": "YEARLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "yearly"
                    },
                    {
                        "name": "LATEST_UPDATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "latestUpdated"
                    },
                    {
                        "name": "LATEST_CREATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "latestCreated"
                    },
                    {
                        "name": "FOCUS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "focus"
                    },
                    {
                        "name": "FROG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "frog"
                    },
                    {
                        "name": "FAVORITE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "favorite"
                    },
                    {
                        "name": "OVERLORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "overlord"
                    },
                    {
                        "name": "SESSION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "session"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/task-list-model.ts"
            },
            {
                "name": "TextType",
                "childs": [
                    {
                        "name": "CSV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CSV"
                    },
                    {
                        "name": "CSV_LIKE_TASKS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CSV_TASKS"
                    },
                    {
                        "name": "JSON",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "JSON"
                    },
                    {
                        "name": "JSON_LIKE_TASKS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "JSON_TASKS"
                    },
                    {
                        "name": "CODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CODE"
                    },
                    {
                        "name": "LIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LIST"
                    },
                    {
                        "name": "UNKNOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UNKNOWN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/features/core/crucible/input-to-tasks/services/text-type-detector.service.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [],\r\n  // providers: [provideRouter(routes)],\r\n}"
                },
                {
                    "name": "NAVIGATION_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  ON_LOGIN_ROUTE_URL: 'sentinel',\r\n}"
                },
                {
                    "name": "OTHER_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  APP_TITLE: 'taskorator',\r\n  REPAIR_TREE: true,\r\n  TREE_UPDATE_FREQUENCY: 500,\r\n  OFFLINE_USER_LOGIN_ID: 'OfflineLoginUserId3',\r\n  OFFLINE_USER_ID: 'OfflineUserId3',\r\n}"
                },
                {
                    "name": "SENSITIVE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  gptServiceUrl: 'http://192.168.1.182:3000',\r\n}"
                },
                {
                    "name": "TASK_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  TASK_LIST_LIMIT: 30,\r\n  CACHE_EXPIRATION_MS: 60 * 60 * 1000, // 60 minutes for example\r\n}"
                }
            ],
            "src/app/components/artificer/artificer.interface.ts": [
                {
                    "name": "artificerDetailList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/artificer/artificer.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtificerDetails[]",
                    "defaultValue": "[\r\n  { action: 'complete', icon: 'check', colorClass: 'complete-icon-color' },\r\n  { action: 'delete', icon: 'delete', colorClass: 'delete-icon-color' },\r\n  { action: 'refresh', icon: 'refresh', colorClass: 'refresh-icon-color' },\r\n  { action: 'move', icon: 'move_to_inbox', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'edit', icon: 'edit', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'select', icon: 'check_box', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'suggest', icon: 'search', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'promote', icon: 'expand_less', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'demote', icon: 'expand_more', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  { action: 'mass', icon: 'add', colorClass: 'refresh-icon-color' }, // create color for it ?\r\n  {\r\n    action: 'moveToParent',\r\n    icon: 'arrow_upward',\r\n    colorClass: 'refresh-icon-color',\r\n  },\r\n]"
                }
            ],
            "src/app/services/core/auth-guard.ts": [
                {
                    "name": "canActivate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/core/auth-guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n): Promise<boolean | UrlTree> => {\r\n  const router = inject(Router);\r\n  const navigationService = inject(NavigationService);\r\n  const sessionManager = inject(SessionManagerService);\r\n  const authServiceOnline = inject(AuthService);\r\n  const authServiceOffline = inject(AuthOfflineService);\r\n\r\n  return (async () => {\r\n    await sessionManager.waitForInitialization();\r\n    const authService =\r\n      sessionManager.getSessionType() === 'online'\r\n        ? authServiceOnline\r\n        : authServiceOffline;\r\n\r\n    const isAuthenticated = authService.isAuthenticated();\r\n\r\n    if (isAuthenticated) {\r\n      return true;\r\n    }\r\n\r\n    navigationService.setRedirectUrl(state.url);\r\n    return router.createUrlTree(['/gateway/login']);\r\n  })();\r\n}"
                },
                {
                    "name": "canActivateChild",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/core/auth-guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateChildFn",
                    "defaultValue": "canActivate"
                }
            ],
            "src/app/features/core/citadel/citadel-routes.ts": [
                {
                    "name": "citadelChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/citadel/citadel-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "citadelRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/citadel/citadel-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  importExport: {\r\n    title: 'Import/Export Tasks',\r\n    icon: 'upload', // Replace with the appropriate icon\r\n    description: 'Manage task imports and exports.',\r\n    altName: '',\r\n  },\r\n  template: {\r\n    title: 'Template Manager',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create and manage task templates.',\r\n    altName: '',\r\n  },\r\n}"
                }
            ],
            "src/app/models/colors.ts": [
                {
                    "name": "completeButtonColorMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/colors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  completed: '#4CAF50', // Vibrant green\r\n  archived: '#1976D2', // Brighter blue\r\n  deleted: '#D32F2F', // Bright red\r\n  todo: '#FFA000', // Amber yellow\r\n  seen: '#616161', // Darker grey\r\n}"
                },
                {
                    "name": "completeButtonColorMap1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/colors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  completed: '#4CAF50', // Subdued green\r\n  archived: '#1565C0', // Deep blue\r\n  deleted: '#C62828', // Muted red\r\n  todo: '#FFC107', // Muted yellow\r\n  seen: '#9E9E9E', // Subdued grey\r\n}"
                }
            ],
            "src/app/test-files/other-files/json-to-tasks.ts": [
                {
                    "name": "convertToTaskArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/test-files/other-files/json-to-tasks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(jsonData: any[]): TaskoratorTask[] =>\r\n  jsonData.map((item) => ({\r\n    ...item,\r\n    timeCreated: item.timeCreated ? new Date(item.timeCreated) : null,\r\n    lastUpdated: item.lastUpdated ? new Date(item.lastUpdated) : null,\r\n    timeEnd: item.timeEnd ? new Date(item.timeEnd) : null,\r\n    duration: parseInt(item.duration),\r\n    tags: item.tags.split(/\\s*,\\s*/),\r\n  }))"
                },
                {
                    "name": "testTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/test-files/other-files/json-to-tasks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskoratorTask[]",
                    "defaultValue": "convertToTaskArray(jsonData)"
                }
            ],
            "src/app/app.routes-metadata.ts": [
                {
                    "name": "CORE_APP_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes-metadata.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  dreamforge: {\r\n    title: 'Dreamforge',\r\n    description:\r\n      'Creative hub focused on crafting, managing, and refining tasks. Includes tools for task creation and specialization.',\r\n    icon: 'build',\r\n    altName: 'Creator',\r\n  },\r\n  sentinel: {\r\n    title: 'Sentinel',\r\n    description:\r\n      'Strategic command center for overseeing, prioritizing, and managing tasks at a high level.',\r\n    icon: 'security',\r\n    altName: 'Task Lists',\r\n  },\r\n  nexus: {\r\n    title: 'Nexus',\r\n    description:\r\n      'Central hub for organizing and planning tasks, focusing on workflow management and time-based sessions.',\r\n    icon: 'hub',\r\n    altName: 'Time Management',\r\n  },\r\n  vortex: {\r\n    title: 'Vortex',\r\n    description:\r\n      'Visualization center for tasks, offering dynamic and interactive visual representations.',\r\n    icon: 'donut_large',\r\n    altName: 'Visualizer',\r\n  },\r\n  crucible: {\r\n    title: 'Crucible',\r\n    description:\r\n      'A focused area for refining and executing group actions on selected tasks.',\r\n    icon: 'filter_list',\r\n    altName: 'Mass Process',\r\n  },\r\n  citadel: {\r\n    title: 'Citadel',\r\n    description:\r\n      'Fortified hub for essential task management utilities, such as cleaning and importing/exporting tasks.',\r\n    icon: 'shield',\r\n    altName: 'Utilities',\r\n  },\r\n  gateway: {\r\n    title: 'Gateway',\r\n    description:\r\n      'The entry point to the application, managing user login, initial navigation, and settings.',\r\n    icon: 'login',\r\n    altName: 'Home',\r\n  },\r\n}"
                }
            ],
            "src/app/features/core/crucible/crucible-routes.ts": [
                {
                    "name": "crucibleChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/crucible/crucible-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "crucibleRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/crucible/crucible-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  selected: {\r\n    title: 'SelectedTasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Manage selected tasks.',\r\n    altName: '',\r\n  },\r\n  searchOverlord: {\r\n    title: 'Search Overlord',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Search overlord.',\r\n    altName: '',\r\n  },\r\n  massAdd: {\r\n    title: 'Mass Add',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Add many tasks at the same time.',\r\n    altName: '',\r\n  },\r\n}"
                }
            ],
            "src/app/test-files/other-files/tasks-json.ts": [
                {
                    "name": "data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/test-files/other-files/tasks-json.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    taskId: '1',\r\n    name: 'Task Splitter',\r\n    todo: 'test if works editor',\r\n    why: 'to improve what i do and how much i do each task can be split till 2 min task',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '2023-11-28T17:39:40.387Z',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '5',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: 'project',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '5',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: 'task splitter',\r\n  },\r\n  {\r\n    taskId: '2',\r\n    name: 'NodeJS Projects',\r\n    todo: 'decide next step',\r\n    why: 'list of useful node',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '2023-08-16T18:08:23.326Z',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '134',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: 'js',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '0',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: '',\r\n  },\r\n  {\r\n    taskId: '3',\r\n    name: 'A-Github-Projects',\r\n    todo: 'decide next step',\r\n    why: '',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '134',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: '',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '0',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: '',\r\n  },\r\n  {\r\n    taskId: '4',\r\n    name: 'AndroidStudioProjects',\r\n    todo: 'decide next step',\r\n    why: '',\r\n    timeCreated: '2023-07-28T17:39:30.708Z',\r\n    lastUpdated: '2023-09-26T11:24:19.571Z',\r\n    timeEnd: '',\r\n    duration: '0',\r\n    overlord: '134',\r\n    repeat: 'never',\r\n    status: 'inactive',\r\n    stage: 'todo',\r\n    type: '',\r\n    subtype: 'list',\r\n    size: 'split',\r\n    owner: 'Ubaby',\r\n    priority: '1',\r\n    backupLink: '',\r\n    imageUrl: '',\r\n    imageDataUrl: '',\r\n    tags: '',\r\n  },\r\n]"
                }
            ],
            "src/app/models/task-list-model.ts": [
                {
                    "name": "defaultTaskLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/task-list-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListRules[]",
                    "defaultValue": "[\r\n  {\r\n    id: 'daily',\r\n    title: 'Daily Tasks',\r\n    type: TaskListType.DAILY,\r\n    description: 'Recurring daily tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'daily') {\r\n          return false;\r\n        }\r\n        const { startTime, endTime } = calculatePeriodTimes('daily');\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false, // this is loose list we can't just add tasks there (unless we allow it in future?)\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'weekly',\r\n    title: 'Weekly Tasks',\r\n    type: TaskListType.WEEKLY,\r\n    description: 'Recurring weekly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'weekly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('weekly');\r\n        // Check if the task falls outside the current daily period\r\n\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'monthly',\r\n    title: 'Monthly Tasks',\r\n    type: TaskListType.MONTHLY,\r\n    description: 'Recurring monthly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'monthly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('monthly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'yearly',\r\n    title: 'Yearly Tasks',\r\n    type: TaskListType.YEARLY,\r\n    description: 'Recurring yearly tasks',\r\n    rules: {\r\n      filter: (task) => {\r\n        if (task.repeat !== 'yearly') return false;\r\n\r\n        const { startTime, endTime } = calculatePeriodTimes('yearly');\r\n        // Check if the task falls outside the current daily period\r\n        return task.lastUpdated < startTime || task.lastUpdated >= endTime;\r\n      },\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO: enable once create task component can know what list is displayed, and if task is added and is task.repeat (then we add to the repeat list (cache), its added in api anyway)\r\n        canMove: false,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'focus',\r\n    title: 'Focus Tasks',\r\n    type: TaskListType.FOCUS,\r\n    description: 'Tasks set as focus tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'frog',\r\n    title: 'Frog Tasks',\r\n    type: TaskListType.FROG,\r\n    description: 'Tasks set as \"eat the frog\" tasks',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: false, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'favorites',\r\n    title: 'Favorite Tasks',\r\n    type: TaskListType.FAVORITE,\r\n    description: 'Tasks marked as favorites',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo',\r\n      sorter: (a, b) => (a.priority || 0) - (b.priority || 0),\r\n      permissions: {\r\n        canAdd: true, // TODO:  is added through separate component, but we maybe can enable later in task create\r\n        canMove: false, // we can never move because if we do, we don't even know where from... because those are lose\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestCreated',\r\n    title: 'Latest Created Tasks',\r\n    type: TaskListType.LATEST_CREATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.timeCreated || 0) - (a.timeCreated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // we don't know which overlord to add it to\r\n        canMove: false, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'latestUpdated',\r\n    title: 'Latest Updated Tasks',\r\n    type: TaskListType.LATEST_UPDATED,\r\n    description: 'Most recently created or updated tasks',\r\n    rules: {\r\n      filter: (task) => task.taskId !== ROOT_TASK_ID, // don't show root when it is updated, as it might seem as normal task...\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true, // we don't know which overlord to add it to\r\n        canMove: true, // we don't know from where... we are seeing this as lose tasks\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '',\r\n  },\r\n  {\r\n    id: 'overlord_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Overlord Tasks',\r\n    type: TaskListType.OVERLORD,\r\n    description: 'Tasks associated with a specific overlord',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo' && task.taskId !== ROOT_TASK_ID, // Filter tasks that have an overlord\r\n      sorter: (a, b) => (b.priority || 0) - (a.priority || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: true,\r\n        canMove: true,\r\n        canDelete: true,\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific overlord ID when used\r\n  },\r\n  {\r\n    id: 'session_*', // The * indicates this is a dynamic ID pattern\r\n    title: 'Session Tasks',\r\n    type: TaskListType.SESSION,\r\n    description: 'Tasks specific to a particular session',\r\n    rules: {\r\n      filter: (task) => task.stage === 'todo', // Filter tasks that have a session ID\r\n      sorter: (a, b) => (b.lastUpdated || 0) - (a.lastUpdated || 0), // Most recent first\r\n      permissions: {\r\n        canAdd: false, // complex session situation, we can't really easily add, unless in future \"create task component can handle it\"\r\n        canMove: false, // don't know from where...\r\n        canDelete: false, // ambiguous... delete from this list or delete completely?\r\n        canComplete: true,\r\n      },\r\n    },\r\n    parent: '', // Can be set to the specific session ID when used\r\n  },\r\n]"
                }
            ],
            "src/app/features/core/dreamforge/dreamforge-routes.ts": [
                {
                    "name": "dreamforgeChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/dreamforge/dreamforge-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "dreamforgeRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/dreamforge/dreamforge-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  focus: {\r\n    title: 'Focus Tasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create focus tasks.',\r\n    altName: '',\r\n  },\r\n  frog: {\r\n    title: 'Frog Tasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create frog tasks.',\r\n    altName: '',\r\n  },\r\n  favorite: {\r\n    title: 'Favorite Tasks',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create favorite tasks.',\r\n    altName: '',\r\n  },\r\n  createRepetitive: {\r\n    title: 'Create Repetitive',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create repetitive tasks.',\r\n    altName: '',\r\n  },\r\n}"
                }
            ],
            "src/environments/environment.test.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  isTesting: true,\r\n  firebase: {\r\n    projectId: 'taskorator',\r\n    appId: '1:799643180199:web:3a44fe3dcb6b8b5aeecf82',\r\n    storageBucket: 'taskorator.appspot.com',\r\n    apiKey: 'AIzaSyDrlKwP-ALtE5VFBn78t1yk8QDhx6PoXnI',\r\n    authDomain: 'taskorator.firebaseapp.com',\r\n    messagingSenderId: '799643180199',\r\n    measurementId: 'G-HBL7JCRWL0',\r\n  },\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  isTesting: false,\r\n  firebase: {\r\n    projectId: 'taskorator',\r\n    appId: '1:799643180199:web:3a44fe3dcb6b8b5aeecf82',\r\n    storageBucket: 'taskorator.appspot.com',\r\n    apiKey: 'AIzaSyDrlKwP-ALtE5VFBn78t1yk8QDhx6PoXnI',\r\n    authDomain: 'taskorator.firebaseapp.com',\r\n    messagingSenderId: '799643180199',\r\n    measurementId: 'G-HBL7JCRWL0',\r\n  },\r\n}"
                }
            ],
            "src/main.ts": [
                {
                    "name": "firebaseJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.firebase"
                },
                {
                    "name": "isTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.isTesting"
                }
            ],
            "src/app/features/core/gateway/gateway-routes.ts": [
                {
                    "name": "gatewayChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/gateway/gateway-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "gatewayRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/gateway/gateway-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  login: {\r\n    title: 'Login',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Login Page.',\r\n    altName: '',\r\n  },\r\n  settings: {\r\n    title: 'Settings',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Modify settings.',\r\n    altName: '',\r\n  },\r\n  next: {\r\n    title: 'Next Task',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Create task that we should focus next.',\r\n    altName: 'Next',\r\n  },\r\n}"
                }
            ],
            "src/app/features/admin/models/template.ts": [
                {
                    "name": "getBaseTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/admin/models/template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n  const template: TaskTemplate = {\r\n    id: '0',\r\n    name: 'base',\r\n    authorId: 'unknown',\r\n    authorName: 'anonymous',\r\n    isPublic: false,\r\n    tasks: [],\r\n  };\r\n  return { ...template };\r\n}"
                }
            ],
            "src/app/features/core/citadel/template/models/template.ts": [
                {
                    "name": "getBaseTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/citadel/template/models/template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n  const template: TaskTemplate = {\r\n    id: '0',\r\n    name: 'base',\r\n    authorId: 'unknown',\r\n    authorName: 'anonymous',\r\n    isPublic: false,\r\n    tasks: [],\r\n  };\r\n  return { ...template };\r\n}"
                }
            ],
            "src/app/services/core/api-offline.service.ts": [
                {
                    "name": "getUserStorageKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/core/api-offline.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(userId: string) => ({\r\n  TASKS: `tasks_${userId}`,\r\n  SETTINGS: `settings_${userId}`,\r\n  TREE: `tree_${userId}`,\r\n  SCORE: `score_${userId}`,\r\n  USER: `user_${userId}`,\r\n})"
                }
            ],
            "src/app/test-files/other-files/app.animations.ts": [
                {
                    "name": "highlightRecentlyModifiedTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/test-files/other-files/app.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('highlightTask', [\r\n  state(\r\n    'normal',\r\n    style({\r\n      backgroundColor: 'transparent',\r\n    })\r\n  ),\r\n  state(\r\n    'highlighted',\r\n    style({\r\n      backgroundColor: '#FFFF99', // Highlight color, adjust as needed\r\n    })\r\n  ),\r\n  transition('normal <=> highlighted', [animate('1.5s')]),\r\n])"
                }
            ],
            "src/app/models/taskModelManager.ts": [
                {
                    "name": "maxPriority",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "10"
                },
                {
                    "name": "ROOT_TASK_DESCRIPTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Legends never die!'"
                },
                {
                    "name": "ROOT_TASK_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'128'"
                },
                {
                    "name": "sqlCreateTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`CREATE TABLE ${taskTableName} (\r\n  taskId INTEGER PRIMARY KEY,\r\n  name TEXT NOT NULL,\r\n  todo TEXT NOT NULL,\r\n  why TEXT NOT NULL,\r\n  timeCreated TIMESTAMP NOT NULL,\r\n  timeEnd TIMESTAMP,\r\n  lastUpdated TIMESTAMP,\r\n  duration INTEGER NOT NULL,\r\n  overlord INTEGER,\r\n  repeat TEXT NOT NULL,\r\n  status TEXT NOT NULL,\r\n  stage TEXT NOT NULL,\r\n  type TEXT NOT NULL,\r\n  subtype TEXT NOT NULL,\r\n  size TEXT NOT NULL,\r\n  owner TEXT NOT NULL,\r\n  priority INTEGER NOT NULL,\r\n  backupLink TEXT NOT NULL,\r\n  imageUrl TEXT,\r\n  imageDataUrl TEXT,\r\n  tags TEXT NOT NULL\r\n);\r\n`"
                },
                {
                    "name": "TASK_ACTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'created',\r\n  'updated',\r\n  'completed',\r\n  'archived',\r\n  'deleted',\r\n  'renewed',\r\n  'seen',\r\n  'activated',\r\n  'moved',\r\n  'split',\r\n  'priorityIncreased',\r\n  'priorityDecreased',\r\n  'nameUpdated',\r\n  'todoUpdated',\r\n  'whyUpdated',\r\n  'tagAdded',\r\n  'tagRemoved',\r\n  'imageUpdated',\r\n  'backupLinkUpdated',\r\n  'repeatUpdated',\r\n  'timeEndUpdated',\r\n  'durationUpdated',\r\n  'statusUpdated',\r\n  'typeUpdated',\r\n  'subtypeUpdated',\r\n  'sizeUpdated',\r\n]"
                },
                {
                    "name": "taskTableName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'tasks_table'"
                }
            ],
            "src/app/features/core/nexus/nexus-routes.ts": [
                {
                    "name": "nexusChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/nexus/nexus-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "nexusRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/nexus/nexus-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  session: {\r\n    title: 'Session',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'Start session to do certain tasks in certain time.',\r\n    altName: '',\r\n  },\r\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\r\n  {\r\n    path: 'next',\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n    component: NextTaskManagerComponent,\r\n  },\r\n  {\r\n    path: 'tasks/:taskId',\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n    component: TaskViewComponent, // allow simply navigate to task by url id\r\n  },\r\n  {\r\n    path: 'citadel',\r\n    loadChildren: () =>\r\n      import('./features/core/citadel/citadel-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['citadel'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'crucible',\r\n    loadChildren: () =>\r\n      import('./features/core/crucible/crucible-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['crucible'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'dreamforge',\r\n    loadChildren: () =>\r\n      import('./features/core/dreamforge/dreamforge-routes').then(\r\n        (m) => m.default\r\n      ),\r\n    data: CORE_APP_METADATA['dreamforge'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'gateway',\r\n    loadChildren: () =>\r\n      import('./features/core/gateway/gateway-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['gateway'], // Attach metadata for navigator\r\n    // canActivate: [canActivate],\r\n    // canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'nexus',\r\n    loadChildren: () =>\r\n      import('./features/core/nexus/nexus-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['nexus'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'sentinel',\r\n    loadChildren: () =>\r\n      import('./features/core/sentinel/sentinel-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['sentinel'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  {\r\n    path: 'vortex',\r\n    loadChildren: () =>\r\n      import('./features/core/vortex/vortex-routes').then((m) => m.default),\r\n    data: CORE_APP_METADATA['vortex'], // Attach metadata for navigator\r\n    canActivate: [canActivate],\r\n    canActivateChild: [canActivateChild],\r\n  },\r\n  { path: '', redirectTo: 'gateway', pathMatch: 'full' },\r\n  { path: '**', redirectTo: 'gateway' },\r\n]"
                }
            ],
            "src/app/features/core/sentinel/sentinel-routes.ts": [
                {
                    "name": "sentinelChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/sentinel/sentinel-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "sentinelRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/sentinel/sentinel-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  latestCreated: {\r\n    title: 'Latest Created Tasks',\r\n    icon: 'add_task', // Icon for newly created tasks\r\n    description: 'View and manage tasks created recently.',\r\n    altName: 'New Tasks',\r\n  },\r\n  latestUpdated: {\r\n    title: 'Latest Updated Tasks',\r\n    icon: 'update', // Icon for recently updated tasks\r\n    description: 'View and manage tasks updated recently.',\r\n    altName: 'Updated Tasks',\r\n  },\r\n  dailyTasks: {\r\n    title: 'Daily Tasks',\r\n    icon: 'calendar_today', // Icon for daily tasks\r\n    description: 'View and manage your tasks for today.',\r\n    altName: \"Today's Tasks\",\r\n  },\r\n  weeklyTasks: {\r\n    title: 'Weekly Tasks',\r\n    icon: 'date_range', // Icon for weekly tasks\r\n    description: 'View and manage your tasks for this week.',\r\n    altName: \"This Week's Tasks\",\r\n  },\r\n  focusTasksList: {\r\n    title: 'Focus Tasks',\r\n    icon: 'visibility', // Icon for focus tasks\r\n    description: 'View and manage tasks that need your attention.',\r\n    altName: 'Focused Tasks',\r\n  },\r\n  rootTasksList: {\r\n    title: 'Root Tasks',\r\n    icon: 'account_tree', // Icon for root task management\r\n    description: 'View and manage the root-level tasks.',\r\n    altName: 'Root Tasks',\r\n  },\r\n}"
                }
            ],
            "src/app/test-files/other-files/testTemplate.ts": [
                {
                    "name": "testTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/test-files/other-files/testTemplate.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  id: 'Rap2DS0nPnXkrNDxRwB7',\r\n  authorId: 'adminId',\r\n  isPublic: false,\r\n  authorName: 'Ubaby',\r\n  tasks: [\r\n    {\r\n      stage: 'todo',\r\n      name: 'multivitamin',\r\n      repeat: 'once',\r\n      tags: '',\r\n      status: 'active',\r\n      owner: '',\r\n      timeEnd: null,\r\n      size: 'do now',\r\n      priority: 0,\r\n      type: 'note',\r\n      duration: 0,\r\n      subtype: 'list',\r\n      imageDataUrl: '',\r\n      backupLink: '',\r\n      timeCreated: {\r\n        seconds: 1695723337,\r\n        nanoseconds: 476000000,\r\n      },\r\n      why: '',\r\n      overlord: 'JR9K3hByeEl7P9Jbls1T',\r\n      taskId: '277',\r\n      lastUpdated: {\r\n        seconds: 1698769391,\r\n        nanoseconds: 864000000,\r\n      },\r\n      todo: '',\r\n      imageUrl: '',\r\n    },\r\n    {\r\n      size: 'do now',\r\n      timeEnd: null,\r\n      subtype: 'list',\r\n      tags: '',\r\n      name: 'white pepper',\r\n      taskId: '262',\r\n      type: 'note',\r\n      lastUpdated: {\r\n        seconds: 1698769377,\r\n        nanoseconds: 743000000,\r\n      },\r\n      imageUrl: '',\r\n      status: 'active',\r\n      overlord: 'JR9K3hByeEl7P9Jbls1T',\r\n      timeCreated: {\r\n        seconds: 1695723337,\r\n        nanoseconds: 474000000,\r\n      },\r\n      todo: '',\r\n      priority: 0,\r\n      imageDataUrl: '',\r\n      owner: '',\r\n      stage: 'todo',\r\n      repeat: 'once',\r\n      why: '',\r\n      duration: 0,\r\n      backupLink: '',\r\n    },\r\n  ],\r\n}"
                }
            ],
            "src/app/features/core/vortex/vortex-routes.ts": [
                {
                    "name": "vortexChildPaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/vortex/vortex-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "routes[0].children?.map((child) => child.path || '') || []"
                },
                {
                    "name": "vortexRouteMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/core/vortex/vortex-routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppRouteMap",
                    "defaultValue": "{\r\n  vizualizer: {\r\n    title: 'Tree View',\r\n    icon: 'template', // Replace with the appropriate icon\r\n    description: 'View tasks as a tree.',\r\n    altName: '',\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/models/task-list-model.ts": [
                {
                    "name": "calculatePeriodTimes",
                    "file": "src/app/models/task-list-model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTasks",
                    "file": "src/app/models/task-list-model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "tasks",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterCompleted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ExtendedTask[]",
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterCompleted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repeatInterval",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIdFromKey",
                    "file": "src/app/models/task-list-model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "key",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "TaskListKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/test-files/test-data/test-task.ts": [
                {
                    "name": "generateRandomName",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "generateRandomTask",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "ROOT_TASK_ID"
                        }
                    ],
                    "returnType": "TaskoratorTask",
                    "jsdoctags": [
                        {
                            "name": "overlord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "ROOT_TASK_ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTaskTree",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "rootId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "breadth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TaskoratorTask[]",
                    "jsdoctags": [
                        {
                            "name": "rootId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultTaskCustomized",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overrides",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "TaskoratorTask",
                    "jsdoctags": [
                        {
                            "name": "overrides",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomElement",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomTask",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "getRandomTasks",
                    "file": "src/app/test-files/test-data/test-task.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "TaskoratorTask[]"
                }
            ],
            "src/app/models/settings.ts": [
                {
                    "name": "getButtonMatName",
                    "file": "src/app/models/settings.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "actionName",
                            "type": "CompleteButtonAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "actionName",
                            "type": "CompleteButtonAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButtonTextName",
                    "file": "src/app/models/settings.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "actionName",
                            "type": "CompleteButtonAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionName",
                            "type": "CompleteButtonAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultTaskSettings",
                    "file": "src/app/models/settings.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/models/score.ts": [
                {
                    "name": "getDefaultScore",
                    "file": "src/app/models/score.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/models/taskModelManager.ts": [
                {
                    "name": "getDefaultTask",
                    "file": "src/app/models/taskModelManager.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "TaskoratorTask"
                },
                {
                    "name": "getRootTaskObject",
                    "file": "src/app/models/taskModelManager.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "TaskoratorTask"
                },
                {
                    "name": "getUniqueTaskId",
                    "file": "src/app/models/taskModelManager.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                }
            ],
            "src/app/models/taskTree.ts": [
                {
                    "name": "getDefaultTree",
                    "file": "src/app/models/taskTree.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "TaskTree"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/services/tasks/task-action-tracker.service.ts": [
                {
                    "name": "TaskActions",
                    "childs": [
                        {
                            "name": "SELECTED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "selected"
                        },
                        {
                            "name": "MOVED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "moved"
                        },
                        {
                            "name": "CREATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "created"
                        },
                        {
                            "name": "UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "updated"
                        },
                        {
                            "name": "COMPLETED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "completed"
                        },
                        {
                            "name": "ARCHIVED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "archived"
                        },
                        {
                            "name": "DELETED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "deleted"
                        },
                        {
                            "name": "RENEWED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "renewed"
                        },
                        {
                            "name": "SEEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "seen"
                        },
                        {
                            "name": "ACTIVATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "activated"
                        },
                        {
                            "name": "PRIORITY_INCREASED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "priorityIncreased"
                        },
                        {
                            "name": "PRIORITY_DECREASED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "priorityDecreased"
                        },
                        {
                            "name": "NAME_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "nameUpdated"
                        },
                        {
                            "name": "TODO_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "todoUpdated"
                        },
                        {
                            "name": "WHY_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "whyUpdated"
                        },
                        {
                            "name": "TAG_ADDED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tagAdded"
                        },
                        {
                            "name": "TAG_REMOVED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tagRemoved"
                        },
                        {
                            "name": "IMAGE_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "imageUpdated"
                        },
                        {
                            "name": "BACKUP_LINK_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "backupLinkUpdated"
                        },
                        {
                            "name": "REPEAT_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "repeatUpdated"
                        },
                        {
                            "name": "TIME_END_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "timeEndUpdated"
                        },
                        {
                            "name": "DURATION_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "durationUpdated"
                        },
                        {
                            "name": "STATUS_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "statusUpdated"
                        },
                        {
                            "name": "TYPE_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "typeUpdated"
                        },
                        {
                            "name": "SUBTYPE_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "subtypeUpdated"
                        },
                        {
                            "name": "SIZE_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sizeUpdated"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/tasks/task-action-tracker.service.ts"
                }
            ],
            "src/app/models/task-list-model.ts": [
                {
                    "name": "TaskListSubtype",
                    "childs": [
                        {
                            "name": "SETTINGS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "settings"
                        },
                        {
                            "name": "SESSION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "session"
                        },
                        {
                            "name": "REPEATING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "repeating"
                        },
                        {
                            "name": "API",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/task-list-model.ts"
                },
                {
                    "name": "TaskListType",
                    "childs": [
                        {
                            "name": "DAILY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "daily"
                        },
                        {
                            "name": "WEEKLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "weekly"
                        },
                        {
                            "name": "MONTHLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "monthly"
                        },
                        {
                            "name": "YEARLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "yearly"
                        },
                        {
                            "name": "LATEST_UPDATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "latestUpdated"
                        },
                        {
                            "name": "LATEST_CREATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "latestCreated"
                        },
                        {
                            "name": "FOCUS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "focus"
                        },
                        {
                            "name": "FROG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "frog"
                        },
                        {
                            "name": "FAVORITE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "favorite"
                        },
                        {
                            "name": "OVERLORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "overlord"
                        },
                        {
                            "name": "SESSION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "session"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/task-list-model.ts"
                }
            ],
            "src/app/features/core/crucible/input-to-tasks/services/text-type-detector.service.ts": [
                {
                    "name": "TextType",
                    "childs": [
                        {
                            "name": "CSV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CSV"
                        },
                        {
                            "name": "CSV_LIKE_TASKS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CSV_TASKS"
                        },
                        {
                            "name": "JSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "JSON"
                        },
                        {
                            "name": "JSON_LIKE_TASKS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "JSON_TASKS"
                        },
                        {
                            "name": "CODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CODE"
                        },
                        {
                            "name": "LIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LIST"
                        },
                        {
                            "name": "UNKNOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UNKNOWN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/features/core/crucible/input-to-tasks/services/text-type-detector.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/models/settings.ts": [
                {
                    "name": "CompleteButtonAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"completed\" | \"seen\" | \"todo\" | \"archived\" | \"deleted\"",
                    "file": "src/app/models/settings.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/models/taskModelManager.ts": [
                {
                    "name": "RepeatOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"once\" | \"never\" | \"half-hourly\" | \"hourly\" | \"half-daily\" | \"daily\" | \"weekly\" | \"half-monthly\" | \"monthly\" | \"three-monthly\" | \"half-yearly\" | \"yearly\"",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TaskSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"do now\" | \"split\" | \"delegate\"",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TaskStage",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"seen\" | \"completed\" | \"todo\" | \"archived\" | \"deleted\"",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TaskStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"active\" | \"inactive\"",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TaskSubtype",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | \"js\" | \"ts\" | \"html\" | \"css\" | \"sound\" | \"android\" | \"angular\" | \"nodejs\" | \"java\" | \"text\" | \"list\"",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TaskType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | \"code\" | \"idea\" | \"note\" | \"todo\" | \"checklist\" | \"tree\" | \"flowchart\" | \"task\" | \"next\" | \"job\" | \"feature\" | \"schedule\" | \"project\"",
                    "file": "src/app/models/taskModelManager.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>task type guesser:\nif &quot;Task name caps&quot;- project\n&quot;task name&quot; - todo\nif TASK NAME -???</p>\n",
                    "kind": 192
                }
            ],
            "src/app/services/sync-api-cache/task-list.service.ts": [
                {
                    "name": "RepeatType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"daily\" | \"weekly\" | \"monthly\" | \"yearly\"",
                    "file": "src/app/services/sync-api-cache/task-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SettingsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"focus\" | \"frog\" | \"favorite\"",
                    "file": "src/app/services/sync-api-cache/task-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/services/tasks/task-status.service.ts": [
                {
                    "name": "TaskUiStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"normal\" | \"highlighted\" | \"flagged\" | \"viewed\" | \"updated\"",
                    "file": "src/app/services/tasks/task-status.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OTHER_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SENSITIVE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TASK_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes-metadata.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_APP_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppRouteMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/artificer/artificer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArtificerComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/artificer/artificer.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Artificer",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/artificer/artificer.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtificerDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/artificer/artificer.interface.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "artificerDetailList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/artificer/artificer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ArtificerService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/base/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/horizontal-navigation/horizontal-navigation-test/horizontal-navigation-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalNavigationComponentTest",
                "coveragePercent": 13,
                "coverageCount": "3/22",
                "status": "low"
            },
            {
                "filePath": "src/app/components/horizontal-navigation/horizontal-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/mass-add-popup/mass-add-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MassAddPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/overlord-navigator/overlord-navigator-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverlordNavigatorComponentTest",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/overlord-navigator/overlord-navigator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverlordNavigatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/search-create/search-create-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchCreateTestComponent",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/search-create/search-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchCreateComponent",
                "coveragePercent": 25,
                "coverageCount": "3/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/search-overlord/search-overlord-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchOverlordTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/search-overlord/search-overlord.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchOverlordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-edit/task-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-navigator/task-navigator-test/task-navigator-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskNavigatorTestComponent",
                "coveragePercent": 33,
                "coverageCount": "7/21",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/task-navigator/task-navigator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskNavigatorComponent",
                "coveragePercent": 4,
                "coverageCount": "1/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/artificer-action/artificer-action-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArtificerActionComponentTest",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/artificer-action/artificer-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArtificerActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/create-task/create-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/promoter/promoter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PromoterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/staged-task-list/staged-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StagedTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-card/task-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-edit-popup/task-edit-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskEditPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-mini/task-mini.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskMiniComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-view/task-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/models/template.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/models/template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBaseTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskoratorUserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/services/admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/services/local-sqlite.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalSqliteService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/admin/services/tree-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreeBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/citadel-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "citadelChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/citadel-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "citadelRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/citadel/citadel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CitadelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/import-export/import-export.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportExportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/template/models/template.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/template/models/template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBaseTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/template/services/template.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TemplateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/citadel/template/template-handler/template-handler.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateHandlerComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/crucible-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "crucibleChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/crucible-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "crucibleRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/crucible/crucible.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CrucibleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/input-to-tasks/input-to-tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputToTasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/services/code-to-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CodeToTasksService",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/services/csv-to-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CsvToTasksService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/services/input-to-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InputToTasksService",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/services/task-object-helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskObjectHelperService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/services/text-to-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TextToTasksService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/input-to-tasks/services/text-type-detector.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TextTypeDetectorService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/crucible/selected-multiple/selected-multiple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectedMultipleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/create-repetitive-task/create-repetitive-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateRepetitiveTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/dreamforge-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dreamforgeChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/dreamforge-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dreamforgeRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/dreamforge/dreamforge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DreamforgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/favorite/favorite-task/favorite-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FavoriteTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/focus/focus/focus.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FocusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/dreamforge/frog/frog-task/frog-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FrogTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/gateway/gateway-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gatewayChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/gateway/gateway-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gatewayRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/gateway/gateway/gateway.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GatewayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/gateway/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/gateway/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/nexus-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nexusChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/nexus-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nexusRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/nexus/nexus.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NexusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/session/services/task-session-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskSessionApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/session/services/task-session-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskSessionCacheService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/session/services/task-session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskSessionService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/session/session/session.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SessionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/session/task-session-dialog/task-session-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskSessionDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/nexus/session/task-session.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskSession",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/lists/daily-task-list/daily-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DailyTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/lists/focus-task-list/focus-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FocusTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/lists/latest-created-task-list/latest-created-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LatestCreatedTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/lists/latest-updated-task-list/latest-updated-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LatestUpdatedTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/lists/root-task-list/root-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RootTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/lists/weekly-task-list/weekly-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeeklyTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/sentinel-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sentinelChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/sentinel-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sentinelRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/sentinel/sentinel/sentinel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SentinelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/vortex/tree-view/tree-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/vortex/tree-view/tree-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/vortex/vortex-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vortexChildPaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/vortex/vortex-routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vortexRouteMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/core/vortex/vortex/vortex.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VortexComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/gpt/gpt-create/gpt-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GptCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/gpt/gpt-tasks/gpt-tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GptTasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/gpt/services/gpt-request.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GptRequestService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/gpt/services/gpt-suggest.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GptSuggestService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/gpt/services/gpt-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GptTasksService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/next-task-manager/next-task-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NextTaskManagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/ui-factory/taskorator-main/taskorator-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskoratorMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/ui-factory/taskorator-main/taskorator-main.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/colors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeButtonColorMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/colors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeButtonColorMap1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/register-user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterUserResult",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/score.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Score",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/score.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultScore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/api-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/auth-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/auth-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthUser",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/cache-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CacheStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/error-handling-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorHandlingStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/registration-strategy.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegistrationApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/registration-strategy.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegistrationData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/score-strategy.interface copy.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScoreApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/score-strategy.interface copy.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScoreCacheStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/score-strategy.interface copy.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScoreStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/session-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskSessionApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/session-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskSessionStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/settings-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/settings-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsCacheStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/settings-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/strategy-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/task-list-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/task-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/task-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskCacheStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/tree-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeApiStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/tree-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeCacheStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/tree-strategy.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterUserResult",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-strategies/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/settings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskSettings",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/models/settings.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getButtonMatName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/settings.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getButtonTextName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/settings.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultTaskSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/settings.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CompleteButtonAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListPermissions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListRules",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListKey",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListRules",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculatePeriodTimes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getIdFromKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task-list-model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTaskLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtendedTask",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskoratorTask",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRootTaskObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUniqueTaskId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maxPriority",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROOT_TASK_DESCRIPTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROOT_TASK_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sqlCreateTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TASK_ACTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskTableName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "RepeatOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskStage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskSubtype",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskModelManager.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/taskTree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskNodeInfo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskTree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskTree",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskTree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskTreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/taskTree.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoggedInUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/general-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GeneralApiService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/key-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "KeyApiService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/register-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterApiService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/task-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskApiService",
                "coveragePercent": 6,
                "coverageCount": "1/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/task-list-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListApiService",
                "coveragePercent": 31,
                "coverageCount": "9/29",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/api/task-list-assistant-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListAssistantService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/task-score-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskScoreApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/task-session-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskSessionApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/task-settings-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskSettingsApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/task-tree-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskTreeApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/api/user-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserApiService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cache/score-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScoreCacheService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/cache/settings-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsCacheService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/cache/task-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskCacheService",
                "coveragePercent": 57,
                "coverageCount": "8/14",
                "status": "good"
            },
            {
                "filePath": "src/app/services/cache/task-id-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskIdCacheService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cache/task-id-cache.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListCacheResult",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cache/tree-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreeCacheService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/core/api-firebase.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiFirebaseService",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/api-offline.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiOfflineService",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/api-offline.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUserStorageKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/auth-guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "canActivate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/auth-guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "canActivateChild",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/auth-offline.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthOfflineService",
                "coveragePercent": 27,
                "coverageCount": "5/18",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/core/auth-offline.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OfflineUser",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 5,
                "coverageCount": "1/18",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/cache-orchestrator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CacheOrchestratorService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/event-bus.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventBusService",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/registration.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegistrationService",
                "coveragePercent": 10,
                "coverageCount": "2/20",
                "status": "low"
            },
            {
                "filePath": "src/app/services/core/task-validator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskValidatorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/current-input.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CurrentInputService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/navigation-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationBuilderService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 53,
                "coverageCount": "8/15",
                "status": "good"
            },
            {
                "filePath": "src/app/services/session-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionManagerService",
                "coveragePercent": 5,
                "coverageCount": "1/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sync-api-cache/score.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScoreService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sync-api-cache/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sync-api-cache/task-batch.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskBatchService",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/sync-api-cache/task-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListService",
                "coveragePercent": 21,
                "coverageCount": "5/23",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sync-api-cache/task-list.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "RepeatType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sync-api-cache/task-list.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SettingsType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sync-api-cache/task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 53,
                "coverageCount": "7/13",
                "status": "good"
            },
            {
                "filePath": "src/app/services/sync-api-cache/tree.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreeService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/search-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchTasksService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/selected-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectedListService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/selected-multiple.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectedMultipleService",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/selected-overlord.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectedOverlordService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/selected-task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectedTaskService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-action-tracker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskActionTrackerService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/task-action-tracker.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-list-rules.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListRulesService",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/task-list-simple.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListSimpleService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-navigator-ultra.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskNavigatorUltraService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/services/tasks/task-settings-tasks.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskSettingsTasksService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskStatusService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/tasks/task-status.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskUiStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-transmutation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskTransmutationService",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/tasks/task-update.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskUpdateService",
                "coveragePercent": 45,
                "coverageCount": "16/35",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/task-usage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskUsageService",
                "coveragePercent": 60,
                "coverageCount": "6/10",
                "status": "good"
            },
            {
                "filePath": "src/app/services/tasks/task-usage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskUsage",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tasks/task-utility.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskUtilityService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-utility.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tasks/task-view.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskViewService",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tree/task-tree-autoupdater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskTreeAutoupdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tree/task-tree-heal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskTreeHealService",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tree/task-tree-node-tools.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskTreeNodeToolsService",
                "coveragePercent": 57,
                "coverageCount": "8/14",
                "status": "good"
            },
            {
                "filePath": "src/app/services/tree/tree-node.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TreeNodeService",
                "coveragePercent": 60,
                "coverageCount": "9/15",
                "status": "good"
            },
            {
                "filePath": "src/app/services/utils/color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/test-files/other-files/app.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "highlightRecentlyModifiedTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/other-files/json-to-tasks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "convertToTaskArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/other-files/json-to-tasks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/other-files/tasks-json.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/other-files/testTemplate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestAppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-components/task-navigator/task-navigator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskNavigatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateRandomName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateRandomTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateTaskTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultTaskCustomized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-data/test-task.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/test-files/test-services/test-tree.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TestTreeService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}